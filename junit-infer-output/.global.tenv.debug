class org.junit.runners.Suite
fields: {
           java.util.List* runners <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.ParentRunner
         }
objc_protocols: {}
methods: {
            Suite.<init>(Class,Class[]) 
            Suite.<init>(Class,RunnerBuilder) 
            Runner Suite.emptySuite() 
            Suite.<init>(Class,List) 
            Description Suite.describeChild(Runner) 
            Description Suite.describeChild(Object) 
            Suite.<init>(RunnerBuilder,Class,Class[]) 
            void Suite.runChild(Runner,RunNotifier) 
            void Suite.runChild(Object,RunNotifier) 
            Class[] Suite.getAnnotatedClasses(Class) 
            Suite.<init>(RunnerBuilder,Class[]) 
            List Suite.getChildren()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.Throwables$State$4
fields: {}
statics: {
            org.junit.internal.Throwables$State* PROCESSING_OTHER_CODE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_TEST_FRAMEWORK_CODE <_final> 
            org.junit.internal.Throwables$State*[_*_](*) $VALUES <_final> 
            org.junit.internal.Throwables$State* DONE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_REFLECTION_CODE <_final>
          }
supers: {
           class org.junit.internal.Throwables$State
         }
objc_protocols: {}
methods: {
            Throwables$State$4.<init>(String,int) 
            Throwables$State Throwables$State$4.processLine(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.Suite$SuiteClasses
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            Class[] Suite$SuiteClasses.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.TYPE") _java.lang.annotation.Inherited>}
java_class_info: {[Some {kind= Interface; loc= [Some line 46, column 22]}]}
dummy: false

class org.junit.tests.SampleJUnit4Tests$TestWithOneThrowingTestMethodWithCause
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SampleJUnit4Tests$TestWithOneThrowingTestMethodWithCause.<init>() 
            void SampleJUnit4Tests$TestWithOneThrowingTestMethodWithCause.alwaysThrows()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 24]}]}
dummy: false
class java.io.StringReader
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.Class
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.classes.EnclosedTest$Enclosing
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            EnclosedTest$Enclosing.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false
class org.junit.experimental.theories.internal.AllMembersSupplier
fields: {
           org.junit.runners.model.TestClass* clazz <_final>
         }
statics: {}
supers: {
           class org.junit.experimental.theories.ParameterSupplier
         }
objc_protocols: {}
methods: {
            boolean AllMembersSupplier.isAssignableToAnyOf(Class[],Object) 
            Object AllMembersSupplier.getStaticFieldValue(Field) 
            void AllMembersSupplier.addMultiPointMethods(ParameterSignature,List) 
            AllMembersSupplier.<init>(TestClass) 
            void AllMembersSupplier.addMultiPointFields(ParameterSignature,List) 
            void AllMembersSupplier.addArrayValues(ParameterSignature,String,List,Object) 
            List AllMembersSupplier.getValueSources(ParameterSignature) 
            Collection AllMembersSupplier.getSingleDataPointMethods(ParameterSignature) 
            void AllMembersSupplier.addDataPointsValues(Class,ParameterSignature,String,List,Object) 
            Collection AllMembersSupplier.getSingleDataPointFields(ParameterSignature) 
            boolean AllMembersSupplier.access$000(Class[],Object) 
            void AllMembersSupplier.addSinglePointFields(ParameterSignature,List) 
            Collection AllMembersSupplier.getDataPointsFields(ParameterSignature) 
            void AllMembersSupplier.addSinglePointMethods(ParameterSignature,List) 
            void AllMembersSupplier.addIterableValues(ParameterSignature,String,List,Iterable) 
            Collection AllMembersSupplier.getDataPointsMethods(ParameterSignature)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.tests.manipulation.SingleMethodTest$TestTwo
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SingleMethodTest$TestTwo.<init>() 
            void SingleMethodTest$TestTwo.b() 
            void SingleMethodTest$TestTwo.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 147, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.runner.WhenNoParametersMatch
fields: {}
statics: {
            org.hamcrest.Matcher*[_*_](*) matchers <_org.junit.experimental.theories.DataPoints> 
            int[_*_](*) ints <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WhenNoParametersMatch.<clinit>() 
            void WhenNoParametersMatch.showFailedAssumptionsWhenNoParametersFound(int,Matcher) 
            WhenNoParametersMatch.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerTest$ExampleTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParentRunnerTest$ExampleTest.test1() 
            void ParentRunnerTest$ExampleTest.test3() 
            ParentRunnerTest$ExampleTest.<init>() 
            void ParentRunnerTest$ExampleTest.test2()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 110, column 24]}]}
dummy: false
class org.junit.internal.JUnitSystem
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void JUnitSystem.exit(int) 
            PrintStream JUnitSystem.out()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class junit.framework.JUnit4TestCaseFacade
fields: {
           org.junit.runner.Description* fDescription <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.Test 
           class org.junit.runner.Describable
         }
objc_protocols: {}
methods: {
            void JUnit4TestCaseFacade.run(TestResult) 
            int JUnit4TestCaseFacade.countTestCases() 
            JUnit4TestCaseFacade.<init>(Description) 
            String JUnit4TestCaseFacade.toString() 
            Description JUnit4TestCaseFacade.getDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.samples.money.MoneyTest
fields: {
           junit.samples.money.Money* f7USD <> 
           junit.samples.money.IMoney* fMB1 <> 
           junit.samples.money.Money* f12CHF <> 
           junit.samples.money.Money* f21USD <> 
           junit.samples.money.IMoney* fMB2 <> 
           junit.samples.money.Money* f14CHF <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MoneyTest.testBagNotEquals() 
            void MoneyTest.testNormalize4() 
            void MoneyTest.testMoneyHash() 
            void MoneyTest.zeroMoniesAreEqualRegardlessOfCurrency() 
            void MoneyTest.testSimpleMultiply() 
            void MoneyTest.testBagSubtract() 
            void MoneyTest.testMoneyBagHash() 
            void MoneyTest.testSimpleAdd() 
            void MoneyTest.testBagNegate() 
            MoneyTest.<init>() 
            void MoneyTest.testNormalize2() 
            void MoneyTest.testSimpleSubtract() 
            void MoneyTest.testIsZero() 
            void MoneyTest.testMoneyBagEquals() 
            void MoneyTest.testPrint() 
            void MoneyTest.testBagMultiply() 
            void MoneyTest.testSimplify() 
            void MoneyTest.setUp() 
            void MoneyTest.testSimpleNegate() 
            void MoneyTest.testBagSumAdd() 
            void MoneyTest.testMoneyEquals() 
            void MoneyTest.testSimpleBagAdd() 
            void MoneyTest.testBagSimpleAdd() 
            void MoneyTest.testNormalize3() 
            Test MoneyTest.suite() 
            void MoneyTest.testMixedSimpleAdd()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false

class org.junit.tests.manipulation.OrderableTest$TestClassRunnerIsOrderable$DoNotOrderMe
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestClassRunnerIsOrderable$DoNotOrderMe.c() 
            OrderableTest$TestClassRunnerIsOrderable$DoNotOrderMe.<init>() 
            void OrderableTest$TestClassRunnerIsOrderable$DoNotOrderMe.b() 
            void OrderableTest$TestClassRunnerIsOrderable$DoNotOrderMe.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.NAME_ASCENDING")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 46, column 28]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest$OneTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            JUnit38ClassRunnerTest$OneTest.<init>() 
            void JUnit38ClassRunnerTest$OneTest.testOne()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 56, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasDataPointsArrayField
fields: {}
statics: {
            java.lang.String*[_*_](*) list <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AllMembersSupplierTest$HasDataPointsArrayField.<clinit>() 
            AllMembersSupplierTest$HasDataPointsArrayField.<init>() 
            void AllMembersSupplierTest$HasDataPointsArrayField.theory(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 24]}]}
dummy: false
class org.hamcrest.TypeSafeMatcher
fields: {
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            void TypeSafeMatcher.<clinit>() 
            void TypeSafeMatcher.describeMismatch(Object,Description) 
            boolean TypeSafeMatcher.matches(Object) 
            TypeSafeMatcher.<init>() 
            TypeSafeMatcher.<init>(ReflectiveTypeFinder) 
            TypeSafeMatcher.<init>(Class) 
            void TypeSafeMatcher.describeMismatchSafely(Object,Description) 
            boolean TypeSafeMatcher.matchesSafely(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class java.lang.Integer
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.TestRuleTest$PrivateRule
fields: {
           org.junit.rules.TestRule* rule <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$PrivateRule.foo() 
            TestRuleTest$PrivateRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 202, column 24]}]}
dummy: false
class javax.xml.namespace.NamespaceContext
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.listening.RunnerTest$Example
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RunnerTest$Example.<init>() 
            void RunnerTest$Example.empty()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 24]}]}
dummy: false
class org.junit.experimental.ParallelComputer
fields: {
           _Bool methods <_final> 
           _Bool classes <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Computer
         }
objc_protocols: {}
methods: {
            Runner ParallelComputer.getRunner(RunnerBuilder,Class) 
            Computer ParallelComputer.classes() 
            ParallelComputer.<init>(boolean,boolean) 
            Runner ParallelComputer.parallelize(Runner) 
            Computer ParallelComputer.methods() 
            Runner ParallelComputer.getSuite(RunnerBuilder,Class[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.rules.DisableOnDebugTest
fields: {}
statics: {
            java.util.List* PRE_JAVA5_DEBUG_ARGUMENTS_IN_REVERSE_ORDER <_final> 
            java.util.List* WITHOUT_DEBUG_ARGUMENTS <_final> 
            java.util.List* PRE_JAVA5_DEBUG_ARGUMENTS <_final> 
            java.util.List* POST_JAVA5_DEBUG_ARGUMENTS <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void DisableOnDebugTest.<clinit>() 
            void DisableOnDebugTest.givenPreJava5DebugArgumentsIsDebuggingShouldReturnTrue() 
            List DisableOnDebugTest.access$300() 
            void DisableOnDebugTest.whenRunWithPreJava5DebugArgumentsTestShouldFail() 
            List DisableOnDebugTest.access$100() 
            void DisableOnDebugTest.givenPostJava5DebugArgumentsIsDebuggingShouldReturnTrue() 
            DisableOnDebugTest.<init>() 
            void DisableOnDebugTest.whenRunWithPostJava5DebugArgumentsTestShouldFail() 
            void DisableOnDebugTest.givenPreJava5DebugArgumentsInReverseIsDebuggingShouldReturnTrue() 
            List DisableOnDebugTest.access$400() 
            void DisableOnDebugTest.whenRunWithPreJava5DebugArgumentsInReverseOrderTestShouldFail() 
            List DisableOnDebugTest.access$200() 
            void DisableOnDebugTest.givenArgumentsWithoutDebugFlagsIsDebuggingShouldReturnFalse() 
            void DisableOnDebugTest.whenRunWithoutDebugFlagsTestShouldPass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.samples.SimpleTest
fields: {
           int fValue2 <> 
           int unused <> 
           int fValue1 <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SimpleTest.testEquals() 
            SimpleTest.<init>() 
            void SimpleTest.setUp() 
            void SimpleTest.divideByZero() 
            Test SimpleTest.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.tests.manipulation.SingleMethodTest$ParameterizedOneTimeSetup
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            List SingleMethodTest$ParameterizedOneTimeSetup.params() 
            void SingleMethodTest$ParameterizedOneTimeSetup.one() 
            SingleMethodTest$ParameterizedOneTimeSetup.<init>(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 56, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$TeardownFailureTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$TeardownFailureTest.<init>() 
            void AnnotationTest$TeardownFailureTest.after() 
            void AnnotationTest$TeardownFailureTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 134, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$RunAllAfterClasses
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationTest$RunAllAfterClasses.bad() 
            AnnotationTest$RunAllAfterClasses.<init>() 
            void AnnotationTest$RunAllAfterClasses.two() 
            void AnnotationTest$RunAllAfterClasses.one() 
            void AnnotationTest$RunAllAfterClasses.empty() 
            void AnnotationTest$RunAllAfterClasses.good()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 783, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$OneMoreTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$OneMoreTest.<init>() 
            void CategoryTest$OneMoreTest.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 395, column 24]}]}
dummy: false
class org.junit.runners.model.TestClassTest$TwoConstructors
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$TwoConstructors.<init>() 
            TestClassTest$TwoConstructors.<init>(int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.AllTheoriesTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTheoriesTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.experimental.theories.internal.AllTheoriesInternalTests, org.junit.tests.experimental.theories.runner.AllTheoriesRunnerTests, org.junit.tests.experimental.theories.ParameterSignatureTest, org.junit.tests.experimental.theories.TestedOnSupplierTest, org.junit.tests.experimental.theories.AssumingInTheoriesTest, org.junit.tests.experimental.theories.PotentialAssignmentTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.rules.VerifierRuleTest$UsesVerifier$1
fields: {
           org.junit.rules.VerifierRuleTest$UsesVerifier* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.Verifier
         }
objc_protocols: {}
methods: {
            VerifierRuleTest$UsesVerifier$1.<init>(VerifierRuleTest$UsesVerifier) 
            void VerifierRuleTest$UsesVerifier$1.verify()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 51]}]}
dummy: false
class org.junit.rules.MethodRulesTest$HasMethodReturningMethodRule$1
fields: {
           org.junit.rules.MethodRulesTest$HasMethodReturningMethodRule* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            MethodRulesTest$HasMethodReturningMethodRule$1.<init>(MethodRulesTest$HasMethodReturningMethodRule) 
            Statement MethodRulesTest$HasMethodReturningMethodRule$1.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 308, column 57]}]}
dummy: false
class org.junit.experimental.max.MaxHistory$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckCallableThatThrowsInternalAssumptionViolatedException$1
fields: {
           org.junit.rules.ErrorCollectorTest$CheckCallableThatThrowsInternalAssumptionViolatedException* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckCallableThatThrowsInternalAssumptionViolatedException$1.<init>(ErrorCollectorTest$CheckCallableThatThrowsInternalAssumptionViolatedException) 
            Object ErrorCollectorTest$CheckCallableThatThrowsInternalAssumptionViolatedException$1.call()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 230, column 59]}]}
dummy: false

class org.junit.rules.ExpectedExceptionTest$ThrowExceptionWithExpectedPartOfMessage
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ThrowExceptionWithExpectedPartOfMessage.throwsNullPointerExceptionWithMessage() 
            ExpectedExceptionTest$ThrowExceptionWithExpectedPartOfMessage.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 135, column 24]}]}
dummy: false
class junit.tests.SampleJUnit3Tests$TestWithOneThrowingTestMethod
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            SampleJUnit3Tests$TestWithOneThrowingTestMethod.<init>() 
            void SampleJUnit3Tests$TestWithOneThrowingTestMethod.testAlwaysThrows()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 24]}]}
dummy: false
class org.junit.runner.manipulation.Sorter
fields: {
           java.util.Comparator* comparator <_final>
         }
statics: {
            org.junit.runner.manipulation.Sorter* NULL <_final> 
            java.lang.String* CONSTRUCTOR_ERROR_FORMAT <_final>
          }
supers: {
           class org.junit.runner.manipulation.Ordering 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            void Sorter.<clinit>() 
            int Sorter.compare(Object,Object) 
            boolean Sorter.validateOrderingIsCorrect() 
            void Sorter.apply(Object) 
            Sorter.<init>(Comparator) 
            int Sorter.compare(Description,Description) 
            List Sorter.orderItems(Collection)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$NewObjectEachTime
fields: {
           java.util.List* list <>
         }
statics: {
            java.lang.String* A <_org.junit.experimental.theories.DataPoint> 
            java.lang.String* B <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuccessfulWithDataPointFields$NewObjectEachTime.<clinit>() 
            SuccessfulWithDataPointFields$NewObjectEachTime.<init>() 
            void SuccessfulWithDataPointFields$NewObjectEachTime.addToEmptyList(String)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 54, column 24]}]}
dummy: false
class junit.tests.SampleJUnit3Tests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SampleJUnit3Tests.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class org.junit.experimental.theories.DataPoints
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            String[] DataPoints.value() 
            Class[] DataPoints.ignoredExceptions()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD")>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.validator.TestClassValidator
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            List TestClassValidator.validateTestClass(TestClass)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuiteTest.<clinit>() 
            void SuiteTest.beforeAndAfterClassRunOnSuite() 
            void SuiteTest.ensureTestIsRun() 
            void SuiteTest.whatHappensWhenASuiteContainsItselfIndirectly() 
            void SuiteTest.nonPublicSuiteClassWithBeforeClassPasses() 
            void SuiteTest.whatHappensWhenASuiteHasACycle() 
            void SuiteTest.suiteTestCountIsCorrect() 
            SuiteTest.<init>() 
            void SuiteTest.suiteShouldComplainAboutNoSuiteClassesAnnotation() 
            void SuiteTest.forwardCompatibilityWorksWithGetTests() 
            void SuiteTest.withoutSuiteClassAnnotationProducesFailure() 
            void SuiteTest.ensureInheritedTestIsRun() 
            void SuiteTest.suiteShouldBeOKwithNonDefaultConstructor() 
            void SuiteTest.ensureSuitesWorkWithForwardCompatibility() 
            void SuiteTest.whatHappensWhenASuiteHasAForkingCycle() 
            void SuiteTest.suiteClassDoesNotNeedToBePublic() 
            void SuiteTest.forwardCompatibilityWorksWithTestCount() 
            String SuiteTest.access$084(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 13]}]}
dummy: false
class junit.tests.runner.TextFeedbackTest$TestResultPrinter
fields: {
           java.io.PrintStream* fWriter <> 
           int fColumn <>
         }
statics: {}
supers: {
           class junit.textui.ResultPrinter
         }
objc_protocols: {}
methods: {
            TextFeedbackTest$TestResultPrinter.<init>(PrintStream) 
            String TextFeedbackTest$TestResultPrinter.elapsedTimeAsString(long)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 17]}]}
dummy: false

class org.junit.tests.running.classes.ParentRunnerTest$AssertionErrorAtParentLevelTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParentRunnerTest$AssertionErrorAtParentLevelTest.<init>() 
            void ParentRunnerTest$AssertionErrorAtParentLevelTest.test() 
            void ParentRunnerTest$AssertionErrorAtParentLevelTest.beforeClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 160, column 24]}]}
dummy: false
class junit.tests.runner.TextRunnerTest$1
fields: {
           junit.tests.runner.TextRunnerTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.io.OutputStream
         }
objc_protocols: {}
methods: {
            void TextRunnerTest$1.write(int) 
            TextRunnerTest$1.<init>(TextRunnerTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 47, column 35]}]}
dummy: false
class org.junit.tests.experimental.theories.runner.WithOnlyTestAnnotations
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithOnlyTestAnnotations.honorExpected() 
            void WithOnlyTestAnnotations.honorTimeout() 
            WithOnlyTestAnnotations.<init>() 
            void WithOnlyTestAnnotations.honorExpectedPassing() 
            void WithOnlyTestAnnotations.testErrorWhenTestHasParametersDespiteTheories()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.rules.ErrorCollectorTest$ErrorCollectorNotCalledByFailingTest
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$ErrorCollectorNotCalledByFailingTest.<init>() 
            void ErrorCollectorTest$ErrorCollectorNotCalledByFailingTest.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 318, column 24]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckMatcherThatFailsWithoutProvidedReason
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckMatcherThatFailsWithoutProvidedReason.<init>() 
            void ErrorCollectorTest$CheckMatcherThatFailsWithoutProvidedReason.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 160, column 24]}]}
dummy: false
class org.junit.rules.MethodRulesTest$CustomTestName$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.runner.Description* val$description <_final> 
           org.junit.rules.MethodRulesTest$CustomTestName* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            MethodRulesTest$CustomTestName$1.<init>(MethodRulesTest$CustomTestName,Description,Statement) 
            void MethodRulesTest$CustomTestName$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 282, column 35]}]}
dummy: false

class org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest$AfterClassWithIgnoredTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ClassLevelMethodsWithIgnoredTestsTest$AfterClassWithIgnoredTest.<init>() 
            void ClassLevelMethodsWithIgnoredTestsTest$AfterClassWithIgnoredTest.afterClass() 
            void ClassLevelMethodsWithIgnoredTestsTest$AfterClassWithIgnoredTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 70, column 24]}]}
dummy: false
class org.junit.rules.ExternalResourceRuleTest$2
fields: {
           org.junit.rules.ExternalResourceRuleTest* this$0 <_final> 
           java.util.concurrent.atomic.AtomicReference* val$externalResourceException <_final>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            void ExternalResourceRuleTest$2.after() 
            ExternalResourceRuleTest$2.<init>(ExternalResourceRuleTest,AtomicReference)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 128, column 63]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$TestClassRunnerIsSortable$Enclosing$B
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SortableTest$TestClassRunnerIsSortable$Enclosing$B.c() 
            SortableTest$TestClassRunnerIsSortable$Enclosing$B.<init>() 
            void SortableTest$TestClassRunnerIsSortable$Enclosing$B.b() 
            void SortableTest$TestClassRunnerIsSortable$Enclosing$B.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 121, column 32]}]}
dummy: false

class org.junit.runner.notification.SynchronizedRunListenerTest$MethodSignature
fields: {
           java.lang.reflect.Method* fMethod <_final> 
           java.lang.String* fName <_final> 
           java.util.List* fParameterTypes <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String SynchronizedRunListenerTest$MethodSignature.toString() 
            boolean SynchronizedRunListenerTest$MethodSignature.equals(Object) 
            int SynchronizedRunListenerTest$MethodSignature.hashCode() 
            SynchronizedRunListenerTest$MethodSignature.<init>(Method)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 25]}]}
dummy: false
class org.junit.internal.ArrayComparisonFailureTest
fields: {}
statics: {
            java.lang.String* ARRAY_COMPARISON_FAILURE_411 <_final> 
            java.lang.String* ARRAY_COMPARISON_FAILURE_412 <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ArrayComparisonFailureTest.classShouldAccept411Version() 
            ArrayComparisonFailureTest.<init>() 
            void ArrayComparisonFailureTest.classShouldAccept412Version() 
            ArrayComparisonFailure ArrayComparisonFailureTest.deserializeFailureFromFile(String) 
            void ArrayComparisonFailureTest.assertFailureSerializableFromOthers(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest
fields: {
           java.lang.String* fName <>
         }
statics: {
            java.util.Collection* tests <> 
            int count <> 
            _Bool run <> 
            java.lang.String* log <>
          }
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void AnnotationTest.testStaticFieldsCanBeTreatedAsShadowed() 
            void AnnotationTest.testTeardownFailure() 
            void AnnotationTest.testOrder() 
            void AnnotationTest.testRunAllAfterClasses() 
            void AnnotationTest.testOldSuiteTest() 
            void AnnotationTest.testSetup() 
            void AnnotationTest.testOrderingOfInheritance() 
            void AnnotationTest.testRunAllAfters() 
            void AnnotationTest.testTeardownAfterFailure() 
            void AnnotationTest.testTwoTests() 
            void AnnotationTest.testAnnotatedMethod() 
            void AnnotationTest.testErrorInBeforeClass() 
            AnnotationTest.<init>() 
            void AnnotationTest.testOneTimeSetup() 
            void AnnotationTest.testRunFailure() 
            void AnnotationTest.testStaticMethodsCanBeTreatedAsShadowed() 
            void AnnotationTest.testTestInheritance() 
            void AnnotationTest.testTestAndTeardownFailure() 
            void AnnotationTest.testNonStaticOneTimeSetup() 
            void AnnotationTest.testException() 
            void AnnotationTest.testRunAllAfterClassesRegardless() 
            void AnnotationTest.setUp() 
            void AnnotationTest.testExceptionNotThrown() 
            void AnnotationTest.testTeardown() 
            void AnnotationTest.testShadowing() 
            void AnnotationTest.testRunAllAftersRegardless() 
            void AnnotationTest.testOldTest() 
            void AnnotationTest.testAnnotatedMethodWithFutureProofExplicitRunner() 
            void AnnotationTest.testErrorInAfterClass() 
            void AnnotationTest.testOneTimeTeardown() 
            void AnnotationTest.testSetupFailure() 
            void AnnotationTest.testFieldsShadowFieldsFromParent()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 13]}]}
dummy: false
class org.junit.Assert
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void Assert.assertEquals(String,long,long) 
            void Assert.assertArrayEquals(String,byte[],byte[]) 
            String Assert.formatClass(Class) 
            void Assert.assertArrayEquals(String,float[],float[],float) 
            void Assert.assertNotEquals(String,Object,Object) 
            void Assert.assertArrayEquals(short[],short[]) 
            void Assert.assertTrue(String,boolean) 
            void Assert.assertArrayEquals(String,long[],long[]) 
            void Assert.fail(String) 
            void Assert.assertEquals(double,double,double) 
            void Assert.assertNotEquals(float,float,float) 
            void Assert.failNotSame(String,Object,Object) 
            String Assert.formatClassAndValue(Object,String) 
            void Assert.assertNotEquals(String,float,float,float) 
            void Assert.assertNotNull(Object) 
            void Assert.assertArrayEquals(float[],float[],float) 
            void Assert.assertArrayEquals(String,short[],short[]) 
            void Assert.assertEquals(Object,Object) 
            void Assert.assertNotEquals(long,long) 
            void Assert.assertThat(Object,Matcher) 
            void Assert.assertNotNull(String,Object) 
            void Assert.assertEquals(String,double,double) 
            void Assert.assertEquals(String,double,double,double) 
            boolean Assert.doubleIsDifferent(double,double,double) 
            void Assert.assertArrayEquals(long[],long[]) 
            Assert.<init>() 
            void Assert.assertFalse(String,boolean) 
            void Assert.assertArrayEquals(String,double[],double[],double) 
            void Assert.assertEquals(String,Object,Object) 
            boolean Assert.isEquals(Object,Object) 
            void Assert.assertEquals(long,long) 
            void Assert.assertArrayEquals(byte[],byte[]) 
            void Assert.failSame(String) 
            void Assert.assertThat(String,Object,Matcher) 
            void Assert.assertEquals(String,float,float,float) 
            void Assert.assertArrayEquals(String,Object[],Object[]) 
            void Assert.assertSame(Object,Object) 
            void Assert.assertEquals(String,Object[],Object[]) 
            void Assert.assertArrayEquals(String,char[],char[]) 
            void Assert.fail() 
            String Assert.format(String,Object,Object) 
            void Assert.assertNotEquals(Object,Object) 
            boolean Assert.floatIsDifferent(float,float,float) 
            void Assert.assertNotEquals(String,long,long) 
            void Assert.assertArrayEquals(int[],int[]) 
            Throwable Assert.assertThrows(Class,ThrowingRunnable) 
            void Assert.assertFalse(boolean) 
            void Assert.failNotEquals(String,Object,Object) 
            boolean Assert.equalsRegardingNull(Object,Object) 
            void Assert.assertEquals(float,float,float) 
            void Assert.assertArrayEquals(boolean[],boolean[]) 
            void Assert.assertSame(String,Object,Object) 
            void Assert.assertArrayEquals(Object[],Object[]) 
            void Assert.internalArrayEquals(String,Object,Object) 
            void Assert.assertNull(Object) 
            void Assert.assertEquals(double,double) 
            void Assert.assertTrue(boolean) 
            void Assert.assertArrayEquals(String,int[],int[]) 
            void Assert.assertNotEquals(double,double,double) 
            String Assert.buildPrefix(String) 
            void Assert.assertNull(String,Object) 
            void Assert.failNotNull(String,Object) 
            void Assert.assertNotEquals(String,double,double,double) 
            void Assert.assertArrayEquals(double[],double[],double) 
            void Assert.failEquals(String,Object) 
            void Assert.assertArrayEquals(char[],char[]) 
            void Assert.assertNotSame(String,Object,Object) 
            Throwable Assert.assertThrows(String,Class,ThrowingRunnable) 
            void Assert.assertArrayEquals(String,boolean[],boolean[]) 
            void Assert.assertNotSame(Object,Object) 
            void Assert.assertEquals(Object[],Object[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 13]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeout
fields: {
           _Bool lookForStuckThread <_final> 
           long timeout <_final> 
           org.junit.runners.model.Statement* originalStatement <_final> 
           java.util.concurrent.TimeUnit* timeUnit <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            Exception FailOnTimeout.createTimeoutException(Thread) 
            List FailOnTimeout.getThreadsInGroup(ThreadGroup) 
            ThreadGroup FailOnTimeout.threadGroupForNewThread() 
            Thread FailOnTimeout.getStuckThread(Thread) 
            long FailOnTimeout.cpuTime(Thread) 
            StackTraceElement[] FailOnTimeout.getStackTrace(Thread) 
            Statement FailOnTimeout.access$600(FailOnTimeout) 
            FailOnTimeout.<init>(FailOnTimeout$Builder,Statement) 
            FailOnTimeout.<init>(Statement,long) 
            Throwable FailOnTimeout.getResult(FutureTask,Thread) 
            FailOnTimeout.<init>(FailOnTimeout$Builder,Statement,FailOnTimeout$1) 
            FailOnTimeout$Builder FailOnTimeout.builder() 
            void FailOnTimeout.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$TestWithThrowingMethodRule
fields: {
           org.junit.tests.SampleJUnit4Tests$ThrowingMethodRule* rule <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SampleJUnit4Tests$TestWithThrowingMethodRule.alwaysPasses() 
            SampleJUnit4Tests$TestWithThrowingMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 85, column 24]}]}
dummy: false
class java.lang.Float
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runner.FilterOptionIntegrationTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.io.IOException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.ClassRulesTest$ExampleTestWithClassRule
fields: {}
statics: {
            org.junit.rules.ClassRulesTest$Counter* counter <_org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$ExampleTestWithClassRule.<clinit>() 
            void ClassRulesTest$ExampleTestWithClassRule.secondTest() 
            ClassRulesTest$ExampleTestWithClassRule.<init>() 
            void ClassRulesTest$ExampleTestWithClassRule.firstTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 40, column 24]}]}
dummy: false
class org.junit.rules.MethodRulesTest$WatchmanTest
fields: {
           org.junit.rules.MethodRule* watchman <_org.junit.Rule>
         }
statics: {
            java.lang.String* watchedLog <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$WatchmanTest.fails() 
            MethodRulesTest$WatchmanTest.<init>() 
            String MethodRulesTest$WatchmanTest.access$584(Object) 
            String MethodRulesTest$WatchmanTest.access$502(String) 
            void MethodRulesTest$WatchmanTest.succeeds() 
            String MethodRulesTest$WatchmanTest.access$500()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 159, column 24]}]}
dummy: false
class org.junit.tests.running.core.CommandLineTest$Count
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CommandLineTest$Count.increment() 
            CommandLineTest$Count.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 55, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$TestRuleIsAroundMethodRule
fields: {
           org.junit.rules.TestRule* a <_final _org.junit.Rule> 
           org.junit.rules.MethodRule* z <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$TestRuleIsAroundMethodRule.foo() 
            TestRuleTest$TestRuleIsAroundMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 546, column 24]}]}
dummy: false
class org.junit.experimental.max.MaxCore$1$1
fields: {
           org.junit.experimental.max.MaxCore$1* this$1 <_final> 
           java.util.List* runners <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.Suite
         }
objc_protocols: {}
methods: {
            MaxCore$1$1.<init>(MaxCore$1,Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 114, column 63]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SuperShadowing$1
fields: {
           org.junit.tests.running.methods.AnnotationTest$SuperShadowing* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            void AnnotationTest$SuperShadowing$1.after() 
            void AnnotationTest$SuperShadowing$1.before() 
            AnnotationTest$SuperShadowing$1.<init>(AnnotationTest$SuperShadowing)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 466, column 42]}]}
dummy: false
class org.junit.rules.MethodRulesTest$BeforesAndAfters$1
fields: {
           org.junit.rules.MethodRulesTest$BeforesAndAfters* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatchman
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$BeforesAndAfters$1.finished(FrameworkMethod) 
            MethodRulesTest$BeforesAndAfters$1.<init>(MethodRulesTest$BeforesAndAfters) 
            void MethodRulesTest$BeforesAndAfters$1.starting(FrameworkMethod) 
            void MethodRulesTest$BeforesAndAfters$1.succeeded(FrameworkMethod)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 203, column 56]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$TeardownAfterFailureTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$TeardownAfterFailureTest.<init>() 
            void AnnotationTest$TeardownAfterFailureTest.after() 
            void AnnotationTest$TeardownAfterFailureTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 173, column 24]}]}
dummy: false
class org.junit.internal.requests.ClassRequest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.validation.FailedConstructionTest$CantConstruct
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FailedConstructionTest$CantConstruct.foo() 
            FailedConstructionTest$CantConstruct.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 24]}]}
dummy: false
class org.junit.rules.Timeout
fields: {
           _Bool lookForStuckThread <_final> 
           long timeout <_final> 
           java.util.concurrent.TimeUnit* timeUnit <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement Timeout.createFailOnTimeoutStatement(Statement) 
            long Timeout.getTimeout(TimeUnit) 
            Timeout Timeout.millis(long) 
            Timeout.<init>(Timeout$Builder) 
            boolean Timeout.getLookingForStuckThread() 
            Statement Timeout.apply(Statement,Description) 
            Timeout$Builder Timeout.builder() 
            Timeout.<init>(long,TimeUnit) 
            Timeout.<init>(int) 
            Timeout Timeout.seconds(long)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 40, column 13]}]}
dummy: false
class org.junit.internal.matchers.ThrowableCauseMatcherTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ThrowableCauseMatcherTest.shouldAllowCauseOfDifferentClassFromRoot() 
            ThrowableCauseMatcherTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.internal.builders.SuiteMethodBuilder
fields: {
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.RunnerBuilder
         }
objc_protocols: {}
methods: {
            SuiteMethodBuilder.<init>() 
            boolean SuiteMethodBuilder.hasSuiteMethod(Class) 
            Runner SuiteMethodBuilder.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithIgnoredTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithIgnoredTest.<init>() 
            void ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithIgnoredTest.test() 
            void ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithIgnoredTest.beforeClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 24]}]}
dummy: false

class org.junit.tests.running.methods.TimeoutTest$InfiniteLoopMultithreaded$ThreadTest
fields: {
           _Bool fStall <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.lang.Runnable
         }
objc_protocols: {}
methods: {
            void TimeoutTest$InfiniteLoopMultithreaded$ThreadTest.run() 
            TimeoutTest$InfiniteLoopMultithreaded$ThreadTest.<init>(boolean)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 168, column 29]}]}
dummy: false
class org.junit.rules.MethodRule
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            Statement MethodRule.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.tests.deprecated.JUnit4ClassRunnerTest$Example
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnit4ClassRunnerTest$Example.<init>() 
            void JUnit4ClassRunnerTest$Example.failure() 
            void JUnit4ClassRunnerTest$Example.success()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.internal.runners.JUnit4ClassRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 24]}]}
dummy: false
class org.junit.experimental.results.ResultMatchers$2
fields: {
           java.lang.String* val$string <_final>
         }
statics: {}
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            boolean ResultMatchers$2.matches(Object) 
            ResultMatchers$2.<init>(String) 
            void ResultMatchers$2.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 53, column 41]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$SuiteOrderedReverseAlphanumerically
fields: {}
statics: {}
supers: {
           class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite
         }
objc_protocols: {}
methods: {
            OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$SuiteOrderedReverseAlphanumerically.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.OrderWith(value="org.junit.tests.manipulation.ReverseAlphanumericOrdering")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 111, column 28]}]}
dummy: false
class java.lang.Appendable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.experimental.categories.CategoriesAndParameterizedTest$Token
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoriesAndParameterizedTest$Token.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints$TheoryTestClassWithAutogeneratedParameterValues
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithAutoGeneratedDataPoints$TheoryTestClassWithAutogeneratedParameterValues.theory(boolean) 
            WithAutoGeneratedDataPoints$TheoryTestClassWithAutogeneratedParameterValues.<init>() 
            void WithAutoGeneratedDataPoints$TheoryTestClassWithAutogeneratedParameterValues.theory(WithAutoGeneratedDataPoints$ENUM)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false
class org.junit.experimental.categories.IncludeCategories$IncludesAny
fields: {
           _Bool includedAny <_final> 
           java.util.Set* included <_final> 
           _Bool excludedAny <_final> 
           java.util.Set* excluded <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.experimental.categories.Categories$CategoryFilter
         }
objc_protocols: {}
methods: {
            IncludeCategories$IncludesAny.<init>(List) 
            IncludeCategories$IncludesAny.<init>(Set) 
            String IncludeCategories$IncludesAny.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 25]}]}
dummy: false
class org.junit.runners.model.TestClass$2
fields: {
           org.junit.runners.model.TestClass* this$0 <_final> 
           java.util.List* val$results <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.model.MemberValueConsumer
         }
objc_protocols: {}
methods: {
            void TestClass$2.accept(FrameworkMember,Object) 
            TestClass$2.<init>(TestClass,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 264, column 45]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerTest$CountingRunListener
fields: {
           int testAssumptionFailure <> 
           int testSuiteAssumptionFailure <> 
           int testFinished <> 
           int testSuiteFinished <> 
           int testFailure <> 
           int testSuiteFailure <> 
           int testStarted <> 
           int testSuiteStarted <> 
           int testIgnored <>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            int ParentRunnerTest$CountingRunListener.access$400(ParentRunnerTest$CountingRunListener) 
            void ParentRunnerTest$CountingRunListener.testAssumptionFailure(Failure) 
            int ParentRunnerTest$CountingRunListener.access$800(ParentRunnerTest$CountingRunListener) 
            int ParentRunnerTest$CountingRunListener.access$000(ParentRunnerTest$CountingRunListener) 
            int ParentRunnerTest$CountingRunListener.access$600(ParentRunnerTest$CountingRunListener) 
            ParentRunnerTest$CountingRunListener.<init>() 
            void ParentRunnerTest$CountingRunListener.testFinished(Description) 
            int ParentRunnerTest$CountingRunListener.access$200(ParentRunnerTest$CountingRunListener) 
            void ParentRunnerTest$CountingRunListener.testSuiteFinished(Description) 
            int ParentRunnerTest$CountingRunListener.access$500(ParentRunnerTest$CountingRunListener) 
            void ParentRunnerTest$CountingRunListener.testIgnored(Description) 
            ParentRunnerTest$CountingRunListener.<init>(ParentRunnerTest$1) 
            void ParentRunnerTest$CountingRunListener.testStarted(Description) 
            int ParentRunnerTest$CountingRunListener.access$100(ParentRunnerTest$CountingRunListener) 
            void ParentRunnerTest$CountingRunListener.testSuiteStarted(Description) 
            int ParentRunnerTest$CountingRunListener.access$700(ParentRunnerTest$CountingRunListener) 
            void ParentRunnerTest$CountingRunListener.testFailure(Failure) 
            int ParentRunnerTest$CountingRunListener.access$300(ParentRunnerTest$CountingRunListener)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 255, column 25]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Skipped
fields: {
           org.junit.rules.TestRule* watcher <_final _org.junit.Rule>
         }
statics: {
            org.junit.AssumptionViolatedException* catchedException <> 
            org.junit.runner.Description* catchedDescription <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AssumptionViolatedException TestWatcherTest$CallbackArguments$Skipped.access$702(AssumptionViolatedException) 
            TestWatcherTest$CallbackArguments$Skipped.<init>() 
            AssumptionViolatedException TestWatcherTest$CallbackArguments$Skipped.access$700() 
            Description TestWatcherTest$CallbackArguments$Skipped.access$602(Description) 
            Description TestWatcherTest$CallbackArguments$Skipped.access$600() 
            void TestWatcherTest$CallbackArguments$Skipped.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 242, column 28]}]}
dummy: false
class org.junit.experimental.max.MaxCore
fields: {
           org.junit.experimental.max.MaxHistory* history <_final>
         }
statics: {
            java.lang.String* MALFORMED_JUNIT_3_TEST_CLASS_PREFIX <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MaxCore MaxCore.storedLocally(File) 
            MaxCore.<init>(File) 
            List MaxCore.sortedLeavesForTest(Request) 
            Result MaxCore.run(Request) 
            Runner MaxCore.buildRunner(Description) 
            MaxCore MaxCore.forFolder(String) 
            void MaxCore.findLeaves(Description,Description,List) 
            Request MaxCore.constructLeafRequest(List) 
            Request MaxCore.sortRequest(Request) 
            Class MaxCore.getMalformedTestClass(Description) 
            Result MaxCore.run(Request,JUnitCore) 
            Result MaxCore.run(Class) 
            List MaxCore.findLeaves(Request)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithParameterSupplier$SupplierWithUnknownConstructor
fields: {}
statics: {}
supers: {
           class org.junit.experimental.theories.ParameterSupplier
         }
objc_protocols: {}
methods: {
            WithParameterSupplier$SupplierWithUnknownConstructor.<init>(String) 
            List WithParameterSupplier$SupplierWithUnknownConstructor.getValueSources(ParameterSignature)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 85, column 24]}]}
dummy: false
class org.junit.experimental.max.MaxHistory
fields: {
           java.util.Map* fDurations <_final> 
           java.io.File* fHistoryStore <_final> 
           java.util.Map* fFailureTimestamps <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Object 
           class java.io.Serializable
         }
objc_protocols: {}
methods: {
            MaxHistory.<init>(File) 
            Comparator MaxHistory.testComparator() 
            RunListener MaxHistory.listener() 
            void MaxHistory.putTestDuration(Description,long) 
            void MaxHistory.save() 
            Long MaxHistory.getTestDuration(Description) 
            void MaxHistory.access$000(MaxHistory) 
            MaxHistory MaxHistory.readHistory(File) 
            MaxHistory MaxHistory.forFolder(File) 
            void MaxHistory.putTestFailureTimestamp(Description,long) 
            Long MaxHistory.getFailureTimestamp(Description) 
            boolean MaxHistory.isNewTest(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.parameterized.AllParameterizedTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllParameterizedTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersTest, org.junit.runners.parameterized.ParameterizedNamesTest, org.junit.runners.parameterized.TestWithParametersTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class junit.tests.framework.TestListenerTest
fields: {
           int fStartCount <> 
           int fEndCount <> 
           int fErrorCount <> 
           int fFailureCount <> 
           junit.framework.TestResult* fResult <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase 
           class junit.framework.TestListener
         }
objc_protocols: {}
methods: {
            void TestListenerTest.addError(Test,Throwable) 
            void TestListenerTest.addFailure(Test,AssertionFailedError) 
            TestListenerTest.<init>() 
            void TestListenerTest.startTest(Test) 
            void TestListenerTest.endTest(Test) 
            void TestListenerTest.testStartStop() 
            void TestListenerTest.setUp() 
            void TestListenerTest.testError() 
            void TestListenerTest.testFailure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false
class org.junit.rules.TestWatcherTest$Callbacks$NoOpRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement TestWatcherTest$Callbacks$NoOpRule.apply(Statement,Description) 
            TestWatcherTest$Callbacks$NoOpRule.<init>() 
            TestWatcherTest$Callbacks$NoOpRule.<init>(TestWatcherTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 109, column 29]}]}
dummy: false
class java.lang.reflect.TypeVariable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.internal.runners.statements.FailOnTimeoutTest
fields: {
           _Bool lookingForStuckThread <_org.junit.runners.Parameterized$Parameter>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FailOnTimeoutTest.statementThatCanBeInterruptedIsStoppedAfterTimeout() 
            void FailOnTimeoutTest.sendUpExceptionThrownByStatement() 
            void FailOnTimeoutTest.lookingForStuckThread_threadGroupNotLeaked() 
            ThrowingRunnable FailOnTimeoutTest.run(FailOnTimeout) 
            Iterable FailOnTimeoutTest.getParameters() 
            void FailOnTimeoutTest.noExceptionIsThrownWhenWrappedStatementFinishesBeforeTimeoutWithoutThrowingException() 
            FailOnTimeoutTest.<init>() 
            void FailOnTimeoutTest.throwTimeoutExceptionOnSecondCallAlthoughFirstCallThrowsException() 
            void FailOnTimeoutTest.stackTraceContainsRealCauseOfTimeout() 
            FailOnTimeout FailOnTimeoutTest.failAfter50Ms(Statement) 
            void FailOnTimeoutTest.throwExceptionIfTheSecondCallToEvaluateNeedsTooMuchTime() 
            void FailOnTimeoutTest.notLookingForStuckThread_usesSameThreadGroup() 
            void FailOnTimeoutTest.throwsTestTimedOutExceptionWithMeaningfulMessage() 
            void FailOnTimeoutTest.throwsExceptionWithTimeoutValueAndTimeUnitSet()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 39, column 13]}]}
dummy: false
class org.junit.tests.validation.ValidationTest$NonStaticBeforeClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ValidationTest$NonStaticBeforeClass.<init>() 
            void ValidationTest$NonStaticBeforeClass.hereBecauseEveryTestClassNeedsATest() 
            void ValidationTest$NonStaticBeforeClass.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 24]}]}
dummy: false
class java.util.concurrent.locks.Lock
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.TempFolderRuleTest$HasTempFolder
fields: {
           org.junit.rules.TemporaryFolder* folder <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TempFolderRuleTest$HasTempFolder.testTempFolderLocation() 
            TempFolderRuleTest$HasTempFolder.<init>() 
            void TempFolderRuleTest$HasTempFolder.testUsingTempFolder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 24]}]}
dummy: false
class junit.tests.framework.DoublePrecisionAssertTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void DoublePrecisionAssertTest.testAssertNegInfinityEqualsInfinity() 
            void DoublePrecisionAssertTest.testAssertNaNEqualsNaN() 
            void DoublePrecisionAssertTest.testAssertEqualsNaNFails() 
            DoublePrecisionAssertTest.<init>() 
            void DoublePrecisionAssertTest.testAssertPosInfinityNotEquals() 
            void DoublePrecisionAssertTest.testAssertPosInfinityNotEqualsNegInfinity() 
            void DoublePrecisionAssertTest.testAssertNaNEqualsFails() 
            void DoublePrecisionAssertTest.testAssertPosInfinityEqualsInfinity()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 13]}]}
dummy: false
class org.junit.rules.Verifier
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            void Verifier.verify() 
            Verifier.<init>() 
            Statement Verifier.apply(Statement,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryValidatorTest$CategoryTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoryValidatorTest$CategoryTest.methodWithCategoryAndAfterClass() 
            void CategoryValidatorTest$CategoryTest.methodWithCategoryAndAfter() 
            CategoryValidatorTest$CategoryTest.<init>() 
            void CategoryValidatorTest$CategoryTest.methodWithCategoryAndBefore() 
            void CategoryValidatorTest$CategoryTest.methodWithCategory() 
            void CategoryValidatorTest$CategoryTest.methodWithCategoryAndBeforeClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 24]}]}
dummy: false
class org.hamcrest.BaseMatcher
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.hamcrest.Matcher
         }
objc_protocols: {}
methods: {
            void BaseMatcher.describeMismatch(Object,Description) 
            void BaseMatcher._dont_implement_Matcher___instead_extend_BaseMatcher_() 
            BaseMatcher.<init>() 
            String BaseMatcher.toString()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.runner.notification.RunNotifierTest$CorruptListener
fields: {}
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void RunNotifierTest$CorruptListener.testRunFinished(Result) 
            RunNotifierTest$CorruptListener.<init>() 
            RunNotifierTest$CorruptListener.<init>(RunNotifierTest$1) 
            void RunNotifierTest$CorruptListener.testFailure(Failure)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 36, column 25]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$TestOnlySortableClassRunnerIsSortable$SortableRunner
fields: {
           org.junit.runners.BlockJUnit4ClassRunner* delegate <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Runner 
           class org.junit.runner.manipulation.Sortable
         }
objc_protocols: {}
methods: {
            void SortableTest$TestOnlySortableClassRunnerIsSortable$SortableRunner.run(RunNotifier) 
            Description SortableTest$TestOnlySortableClassRunnerIsSortable$SortableRunner.getDescription() 
            SortableTest$TestOnlySortableClassRunnerIsSortable$SortableRunner.<init>(Class) 
            void SortableTest$TestOnlySortableClassRunnerIsSortable$SortableRunner.sort(Sorter)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 237, column 28]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$BadIndexForAnnotatedFieldTest
fields: {
           int fInput <_org.junit.runners.Parameterized$Parameter> 
           int fExpected <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            int ParameterizedTestTest$BadIndexForAnnotatedFieldTest.fib(int) 
            ParameterizedTestTest$BadIndexForAnnotatedFieldTest.<init>() 
            void ParameterizedTestTest$BadIndexForAnnotatedFieldTest.test() 
            Collection ParameterizedTestTest$BadIndexForAnnotatedFieldTest.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 171, column 24]}]}
dummy: false
class org.junit.rules.AllRulesTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllRulesTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.rules.BlockJUnit4ClassRunnerOverrideTest, org.junit.rules.ClassRulesTest, org.junit.rules.DisableOnDebugTest, org.junit.rules.ErrorCollectorTest, org.junit.rules.ExpectedExceptionTest, org.junit.rules.ExternalResourceRuleTest, org.junit.rules.MethodRulesTest, org.junit.rules.NameRulesTest, org.junit.rules.RuleChainTest, org.junit.rules.RuleMemberValidatorTest, org.junit.rules.StopwatchTest, org.junit.rules.TempFolderRuleTest, org.junit.rules.TemporaryFolderRuleAssuredDeletionTest, org.junit.rules.TemporaryFolderUsageTest, org.junit.rules.TestRuleTest, org.junit.rules.TestWatcherTest, org.junit.rules.TestWatchmanTest, org.junit.rules.TestWatchmanTest, org.junit.rules.TimeoutRuleTest, org.junit.rules.VerifierRuleTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 30, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.AllTestsTest$BadSuiteMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTestsTest$BadSuiteMethod.<init>() 
            Test AllTestsTest$BadSuiteMethod.suite()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.AllTests")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 77, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodBothKindsOfRule
fields: {
           int applications <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            Statement TestRuleTest$MethodBothKindsOfRule.apply(Statement,Description) 
            TestRuleTest$MethodBothKindsOfRule.<init>() 
            Statement TestRuleTest$MethodBothKindsOfRule.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 277, column 24]}]}
dummy: false
class junit.runner.TestRunListener
fields: {}
statics: {
            int STATUS_FAILURE <> 
            int STATUS_ERROR <>
          }
supers: {}
objc_protocols: {}
methods: {
            void TestRunListener.testRunStopped(long) 
            void TestRunListener.testRunStarted(String,int) 
            void TestRunListener.testFailed(int,String,String) 
            void TestRunListener.testEnded(String) 
            void TestRunListener.testRunEnded(long) 
            void TestRunListener.testStarted(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [Some line 9, column 17]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodExampleTest
fields: {
           org.junit.rules.TestRule* example <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$MethodExampleTest.nothing() 
            TestRuleTest$MethodExampleTest.<init>() 
            TestRule TestRuleTest$MethodExampleTest.getExample()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 246, column 24]}]}
dummy: false
class java.lang.StackTraceElement
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.experimental.categories.MultiCategoryTest$Z
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.experimental.categories.MultiCategoryTest$A 
           class org.junit.experimental.categories.MultiCategoryTest$B
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$Z.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 102, column 24]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$MethodTestWithMethodRule$1
fields: {
           org.junit.rules.RuleMemberValidatorTest$MethodTestWithMethodRule* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$MethodTestWithMethodRule$1.<init>(RuleMemberValidatorTest$MethodTestWithMethodRule) 
            Statement RuleMemberValidatorTest$MethodTestWithMethodRule$1.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 319, column 36]}]}
dummy: false
class org.junit.tests.running.classes.parent.TestWithClassRule$CustomRule$1
fields: {
           org.junit.tests.running.classes.parent.TestWithClassRule$CustomRule* this$0 <_final> 
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.runner.Description* val$description <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void TestWithClassRule$CustomRule$1.evaluate() 
            TestWithClassRule$CustomRule$1.<init>(TestWithClassRule$CustomRule,Description,Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 35]}]}
dummy: false
class org.junit.experimental.categories.CategoryValidator
fields: {}
statics: {
            java.util.Set* INCOMPATIBLE_ANNOTATIONS <_final> 
            java.util.List* NO_VALIDATION_ERRORS <_final>
          }
supers: {
           class org.junit.validator.AnnotationValidator
         }
objc_protocols: {}
methods: {
            void CategoryValidator.<clinit>() 
            CategoryValidator.<init>() 
            void CategoryValidator.addErrorMessage(List,Class) 
            List CategoryValidator.validateAnnotatedMethod(FrameworkMethod)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 19]}]}
dummy: false
class org.junit.runners.ParentRunner$ClassRuleCollector
fields: {
           java.util.List* entries <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.model.MemberValueConsumer
         }
objc_protocols: {}
methods: {
            void ParentRunner$ClassRuleCollector.accept(FrameworkMember,Object) 
            ParentRunner$ClassRuleCollector.<init>() 
            ParentRunner$ClassRuleCollector.<init>(ParentRunner$1) 
            List ParentRunner$ClassRuleCollector.getOrderedRules() 
            void ParentRunner$ClassRuleCollector.accept(FrameworkMember,TestRule)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 564, column 25]}]}
dummy: false
class org.junit.rules.LoggingStatement
fields: {
           java.lang.String* name <_final> 
           org.junit.runners.model.Statement* base <_final> 
           java.lang.StringBuilder* log <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            LoggingStatement.<init>(Statement,StringBuilder,String) 
            void LoggingStatement.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithOnlyTestAnnotations$ErrorWhenTestHasParametersDespiteTheories
fields: {}
statics: {
            int ZERO <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithOnlyTestAnnotations$ErrorWhenTestHasParametersDespiteTheories.<clinit>() 
            WithOnlyTestAnnotations$ErrorWhenTestHasParametersDespiteTheories.<init>() 
            void WithOnlyTestAnnotations$ErrorWhenTestHasParametersDespiteTheories.testMethod(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 65, column 24]}]}
dummy: false
class org.junit.tests.experimental.parallel.ParallelMethodTest
fields: {}
statics: {
            java.lang.Thread* fOne <_volatile> 
            java.lang.Thread* fTwo <_volatile> 
            long TIMEOUT <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParallelMethodTest.<clinit>() 
            Thread ParallelMethodTest.access$002(Thread) 
            ParallelMethodTest.<init>() 
            Thread ParallelMethodTest.access$102(Thread) 
            void ParallelMethodTest.testsRunInParallel() 
            void ParallelMethodTest.init()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class org.junit.rules.TestRuleTest$SonOfWrongTypedField
fields: {
           int x <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.rules.TestRuleTest$WrongTypedField
         }
objc_protocols: {}
methods: {
            TestRuleTest$SonOfWrongTypedField.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 192, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$Callbacks$SuccessfulTest
fields: {
           org.junit.rules.TestRule* watcher <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWatcherTest$Callbacks$SuccessfulTest.<init>() 
            void TestWatcherTest$Callbacks$SuccessfulTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 169, column 28]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodMultipleRuleTest
fields: {
           org.junit.rules.TestRule* incrementor2 <> 
           org.junit.rules.TestRule* incrementor1 <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$MethodMultipleRuleTest.nothing() 
            TestRule TestRuleTest$MethodMultipleRuleTest.getIncrementor1() 
            TestRuleTest$MethodMultipleRuleTest.<init>() 
            TestRule TestRuleTest$MethodMultipleRuleTest.getIncrementor2()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 323, column 24]}]}
dummy: false
class org.junit.internal.TextListener
fields: {
           java.io.PrintStream* writer <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void TextListener.testRunFinished(Result) 
            void TextListener.printFailure(Failure,String) 
            void TextListener.printHeader(long) 
            void TextListener.testFailure(Failure) 
            PrintStream TextListener.getWriter() 
            void TextListener.printFooter(Result) 
            TextListener.<init>(PrintStream) 
            void TextListener.testIgnored(Description) 
            String TextListener.elapsedTimeAsString(long) 
            void TextListener.printFailures(Result) 
            TextListener.<init>(JUnitSystem) 
            void TextListener.testStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.MethodRulesTest$Increment
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            MethodRulesTest$Increment.<init>() 
            Statement MethodRulesTest$Increment.apply(Statement,FrameworkMethod,Object) 
            MethodRulesTest$Increment.<init>(MethodRulesTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 87, column 25]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner
fields: {}
statics: {}
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner.run(RunNotifier) 
            Description OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner.getDescription() 
            OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 240, column 28]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.TheoriesPerformanceTest$UpToTen
fields: {}
statics: {
            int[_*_](*) ints <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TheoriesPerformanceTest$UpToTen.<clinit>() 
            TheoriesPerformanceTest$UpToTen.<init>() 
            void TheoriesPerformanceTest$UpToTen.threeInts(int,int,int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 24]}]}
dummy: false
class org.junit.tests.experimental.MatcherTest
fields: {}
statics: {
            org.junit.experimental.results.PrintableResult* TWO_FAILURES_ONE_CHEESE <_org.junit.experimental.theories.DataPoint> 
            org.hamcrest.Matcher* SINGLE_FAILURE <_org.junit.experimental.theories.DataPoint> 
            org.hamcrest.Matcher* ANY_FAILURE <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MatcherTest.<clinit>() 
            Failure MatcherTest.failure(String) 
            MatcherTest.<init>() 
            void MatcherTest.differentMatchersHaveDifferentDescriptions(Matcher,Matcher,Object)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 13]}]}
dummy: false
class junit.samples.money.Money
fields: {
           java.lang.String* fCurrency <> 
           int fAmount <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.samples.money.IMoney
         }
objc_protocols: {}
methods: {
            IMoney Money.negate() 
            String Money.toString() 
            IMoney Money.add(IMoney) 
            Money.<init>(int,String) 
            void Money.appendTo(MoneyBag) 
            String Money.currency() 
            int Money.amount() 
            IMoney Money.addMoneyBag(MoneyBag) 
            boolean Money.isZero() 
            boolean Money.equals(Object) 
            IMoney Money.subtract(IMoney) 
            int Money.hashCode() 
            IMoney Money.addMoney(Money) 
            IMoney Money.multiply(int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.TempFolderRuleTest$IncorrectUsage
fields: {
           org.junit.rules.TemporaryFolder* folder <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TempFolderRuleTest$IncorrectUsage.<init>() 
            void TempFolderRuleTest$IncorrectUsage.testNewFile() 
            void TempFolderRuleTest$IncorrectUsage.testGetRoot() 
            void TempFolderRuleTest$IncorrectUsage.testNewFolder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 248, column 24]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeoutTest$3
fields: {
           org.junit.internal.runners.statements.FailOnTimeoutTest* this$0 <_final> 
           org.junit.internal.runners.statements.FailOnTimeout* val$failOnTimeout <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.function.ThrowingRunnable
         }
objc_protocols: {}
methods: {
            void FailOnTimeoutTest$3.run() 
            FailOnTimeoutTest$3.<init>(FailOnTimeoutTest,FailOnTimeout)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 238, column 38]}]}
dummy: false
class junit.tests.framework.TestImplementorTest
fields: {
           junit.tests.framework.TestImplementorTest$DoubleTestCase* fTest <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestImplementorTest.<init>() 
            void TestImplementorTest.testSuccessfulRun()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 13]}]}
dummy: false
class org.junit.tests.experimental.AssumptionTest$2
fields: {
           java.util.List* val$failures <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void AssumptionTest$2.testAssumptionFailure(Failure) 
            AssumptionTest$2.<init>(List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 303, column 43]}]}
dummy: false
class org.junit.tests.manipulation.SortableTest$TestClassRunnerIsSortable
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SortableTest$TestClassRunnerIsSortable.<clinit>() 
            void SortableTest$TestClassRunnerIsSortable.sortingForwardWorksOnSuite() 
            void SortableTest$TestClassRunnerIsSortable.sortingBackwardWorksOnTestClassRunner() 
            void SortableTest$TestClassRunnerIsSortable.resetLog() 
            SortableTest$TestClassRunnerIsSortable.<init>() 
            void SortableTest$TestClassRunnerIsSortable.sortingBackwardWorksOnSuite() 
            String SortableTest$TestClassRunnerIsSortable.access$084(Object) 
            void SortableTest$TestClassRunnerIsSortable.sortingForwardWorksOnTestClassRunner() 
            void SortableTest$TestClassRunnerIsSortable.sortingBackwardDoesNothingOnTestClassRunnerWithFixMethodOrder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 35, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryFilterFactory
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runner.FilterFactory
         }
objc_protocols: {}
methods: {
            Filter CategoryFilterFactory.createFilter(List) 
            CategoryFilterFactory.<init>() 
            Filter CategoryFilterFactory.createFilter(FilterFactoryParams) 
            List CategoryFilterFactory.parseCategories(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 14, column 15]}]}
dummy: false
class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$FlipBitRule$1
fields: {
           java.lang.Object* val$target <_final> 
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$FlipBitRule* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerOverrideTest$FlipBitRule$1.<init>(BlockJUnit4ClassRunnerOverrideTest$FlipBitRule,Object,Statement) 
            void BlockJUnit4ClassRunnerOverrideTest$FlipBitRule$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 24, column 35]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$ExcludedTest2
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$ExcludedTest2.<init>() 
            void CategoryTest$ExcludedTest2.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="java.lang.Runnable")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 484, column 24]}]}
dummy: false
class org.junit.tests.assertion.AssertionTest
fields: {}
statics: {
            java.lang.String* ASSERTION_ERROR_EXPECTED <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AssertionTest.assertThrowsDetectsTypeMismatchesViaExplicitTypeHint() 
            void AssertionTest.primitiveArraysConvertedToStringCorrectly() 
            void AssertionTest.objectsNotSame() 
            void AssertionTest.booleansNotEqual() 
            void AssertionTest.arraysDifferAtElement0nullMessage() 
            void AssertionTest.stringNullAndNullWorksToo() 
            void AssertionTest.arraysEqualWithMessage() 
            void AssertionTest.arraysNotEqual() 
            void AssertionTest.nullMessageDisappearsWithAssertEquals() 
            void AssertionTest.floatsNotDoublesInArrays() 
            void AssertionTest.oneDimensionalFloatArraysAreNotEqual() 
            void AssertionTest.assertNotEqualsConsidersDeltaCorrectly() 
            void AssertionTest.assertThrowsUsesCanonicalNameUponTypeMismatch() 
            void AssertionTest.multiDimensionalArraysDifferentLengthNoMessage() 
            void AssertionTest.notSameWithMessage() 
            void AssertionTest.intsNotEqual() 
            void AssertionTest.multiDimensionalArraysAreEqual() 
            void AssertionTest.objectsWithDifferentReferencesAreNotEqual() 
            void AssertionTest.assertArrayEqualsFailure(Object[],Object[],String) 
            void AssertionTest.notEqualsObjectWithNullWithMessage() 
            void AssertionTest.arraysDifferentLengthDifferingAtStartMessage() 
            void AssertionTest.assertThatIncludesDescriptionOfTestedValueInErrorMessage() 
            void AssertionTest.nullNullmessage() 
            void AssertionTest.multiDimensionalArraysDeclaredAsOneDimensionalAreEqual() 
            void AssertionTest.assertThrowsRequiresAnExceptionToBeThrown() 
            void AssertionTest.assertThrowsSuppliesACoherentErrorMessageUponTypeMismatch() 
            void AssertionTest.twoDimensionalArraysDifferentInnerLengthNotEqual() 
            void AssertionTest.sameWithMessage() 
            void AssertionTest.charsNotEqual() 
            void AssertionTest.arraysDifferAtElement0withMessage() 
            void AssertionTest.compareBigDecimalAndInteger() 
            void AssertionTest.fails() 
            void AssertionTest.notEqualsObjectWithNull() 
            void AssertionTest.arraysExpectedNullMessage() 
            void AssertionTest.implicitTypecastEquality() 
            void AssertionTest.doublesNotEqual() 
            void AssertionTest.IntegerDoesNotEqualLong() 
            void AssertionTest.assertNotEqualsIgnoresDeltaOnNaN() 
            AssertionTest.<init>() 
            void AssertionTest.assertThrowsUsesCanonicalNameWhenRequiredExceptionNotThrown() 
            void AssertionTest.stringsDifferWithUserMessage() 
            void AssertionTest.failWithNoMessageToString() 
            void AssertionTest.nullMessage() 
            void AssertionTest.floatsNotEqual() 
            void AssertionTest.oneDimensionalPrimitiveArraysAreEqual() 
            void AssertionTest.assertNotEqualsIncludesTheValueBeingTested() 
            void AssertionTest.objectsNotEquals() 
            void AssertionTest.arraysDifferentLengthDifferingAtEndAndExpectedArrayLongerMessage() 
            void AssertionTest.assertThatDescriptionCanBeElided() 
            void AssertionTest.same() 
            void AssertionTest.multiDimensionalArraysAreNotEqualNoMessage() 
            void AssertionTest.assertThrowsIncludesTheSpecifiedMessage() 
            void AssertionTest.assertThrowsWrapsAndPropagatesUnexpectedExceptions() 
            void AssertionTest.twoDimensionalArraysConvertedToStringCorrectly() 
            ThrowingRunnable AssertionTest.nonThrowingRunnable() 
            void AssertionTest.objectsAreSame() 
            void AssertionTest.bytesNotEqual() 
            void AssertionTest.arraysDifferAtElement1nullMessage() 
            void AssertionTest.nullToString() 
            void AssertionTest.equals() 
            void AssertionTest.arraysNotEqualWithMessage() 
            void AssertionTest.arraysDeclaredAsObjectAreComparedAsObjects() 
            void AssertionTest.bigDecimalsNotEqual() 
            void AssertionTest.oneDimensionalBooleanArraysAreNotEqual() 
            void AssertionTest.assertNotEqualsConsidersFloatDeltaCorrectly() 
            void AssertionTest.assertThrowsUsesNameUponTypeMismatchWithAnonymousClass() 
            void AssertionTest.arraysWithNullElementEqual() 
            void AssertionTest.notSameNullMessage() 
            void AssertionTest.longsNotEqual() 
            void AssertionTest.multiDimensionalIntArraysAreEqual() 
            void AssertionTest.assertNotEqualsIncludesCorrectMessage() 
            void AssertionTest.assertArrayEqualsFailure(String,Object[],Object[],String) 
            void AssertionTest.notEqualsNullWithObjectWithMessage() 
            void AssertionTest.arraysDifferentLengthDifferingAtEndMessage() 
            void AssertionTest.assertThatIncludesAdvancedMismatch() 
            void AssertionTest.nullWithMessage() 
            void AssertionTest.multiDimensionalArraysAreNotEqual() 
            void AssertionTest.assertThrowsIncludesAnInformativeDefaultMessage() 
            void AssertionTest.assertThrowsSuppliesTheSpecifiedMessageUponTypeMismatch() 
            void AssertionTest.multiDimensionalArraysDifferentLengthMessage() 
            ThrowingRunnable AssertionTest.throwingRunnable(Throwable) 
            void AssertionTest.sameNullMessage() 
            void AssertionTest.shortsNotEqual() 
            void AssertionTest.arraysDifferAtElement1withMessage() 
            void AssertionTest.sameObjectIsNotEqual() 
            void AssertionTest.notEqualsNullWithObject() 
            void AssertionTest.arraysActualNullMessage() 
            void AssertionTest.errorMessageDistinguishesDifferentValuesWithSameToString() 
            void AssertionTest.naNsAreEqual() 
            void AssertionTest.intsEqualLongs() 
            void AssertionTest.assertNotEqualsIgnoresFloatDeltaOnNaN() 
            void AssertionTest.arraysEqual() 
            void AssertionTest.failWithMessageToString() 
            void AssertionTest.nullMessageDisappearsWithStringAssertEquals() 
            void AssertionTest.floatsNotEqualWithoutDelta() 
            void AssertionTest.oneDimensionalDoubleArraysAreNotEqual() 
            void AssertionTest.assertNotEqualsWorksWithPrimitiveTypes() 
            void AssertionTest.stringsNotEqual() 
            void AssertionTest.arraysElementsDiffer() 
            void AssertionTest.nullAndStringNullPrintCorrectError() 
            void AssertionTest.notSame() 
            void AssertionTest.twoDimensionalArraysDifferentOuterLengthNotEqual() 
            void AssertionTest.assertThrowsReturnsTheSameObjectThrown()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 13]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$B
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$B.c() 
            OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$B.<init>() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$B.b() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$B.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 88, column 32]}]}
dummy: false
class org.junit.rules.LoggingTestWatcher
fields: {
           java.lang.StringBuilder* log <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            void LoggingTestWatcher.skipped(AssumptionViolatedException,Description) 
            void LoggingTestWatcher.failed(Throwable,Description) 
            LoggingTestWatcher.<init>(StringBuilder) 
            void LoggingTestWatcher.finished(Description) 
            void LoggingTestWatcher.succeeded(Description) 
            void LoggingTestWatcher.starting(Description) 
            void LoggingTestWatcher.skipped(AssumptionViolatedException,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 6]}]}
dummy: false
class org.junit.tests.experimental.theories.runner.AllTheoriesRunnerTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTheoriesRunnerTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.experimental.theories.runner.FailingDataPointMethods, org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields, org.junit.tests.experimental.theories.runner.TheoriesPerformanceTest, org.junit.tests.experimental.theories.runner.TypeMatchingBetweenMultiDataPointsMethod, org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields, org.junit.tests.experimental.theories.runner.WhenNoParametersMatch, org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints, org.junit.tests.experimental.theories.runner.WithDataPointMethod, org.junit.tests.experimental.theories.runner.WithExtendedParameterSources, org.junit.tests.experimental.theories.runner.WithNamedDataPoints, org.junit.tests.experimental.theories.runner.WithOnlyTestAnnotations, org.junit.tests.experimental.theories.runner.WithParameterSupplier, org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.rules.TemporaryFolder$Builder
fields: {
           java.io.File* parentFolder <> 
           _Bool assureDeletion <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            File TemporaryFolder$Builder.access$000(TemporaryFolder$Builder) 
            TemporaryFolder$Builder TemporaryFolder$Builder.parentFolder(File) 
            TemporaryFolder TemporaryFolder$Builder.build() 
            TemporaryFolder$Builder.<init>() 
            boolean TemporaryFolder$Builder.access$100(TemporaryFolder$Builder) 
            TemporaryFolder$Builder TemporaryFolder$Builder.assureDeletion()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 96, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$Category2
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$Category2.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 118, column 24]}]}
dummy: false

class org.junit.runner.notification.ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest$1
fields: {
           java.util.concurrent.CountDownLatch* val$latch <_final> 
           java.util.concurrent.CyclicBarrier* val$trigger <_final> 
           org.junit.runner.notification.ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest* this$1 <_final> 
           java.util.concurrent.atomic.AtomicBoolean* val$condition <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            Object ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest$1.call() 
            ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest$1.<init>(ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest,CyclicBarrier,AtomicBoolean,CountDownLatch) 
            Void ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest$1.call()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 109, column 58]}]}
dummy: false
class java.lang.StringBuilder
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.framework.JUnit4TestAdapterCache
fields: {}
statics: {
            junit.framework.JUnit4TestAdapterCache* fInstance <_final> 
            long serialVersionUID <_final>
          }
supers: {
           class java.util.HashMap
         }
objc_protocols: {}
methods: {
            void JUnit4TestAdapterCache.<clinit>() 
            List JUnit4TestAdapterCache.asTestList(Description) 
            JUnit4TestAdapterCache.<init>() 
            JUnit4TestAdapterCache JUnit4TestAdapterCache.getDefault() 
            Test JUnit4TestAdapterCache.asTest(Description) 
            RunNotifier JUnit4TestAdapterCache.getNotifier(TestResult,JUnit4TestAdapter) 
            Test JUnit4TestAdapterCache.createTest(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.MethodRulesTest$SonOfWrongTypedField
fields: {
           int x <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.rules.MethodRulesTest$WrongTypedField
         }
objc_protocols: {}
methods: {
            MethodRulesTest$SonOfWrongTypedField.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 253, column 24]}]}
dummy: false
class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerOverrideTest.overrideCreateTestMethod() 
            void BlockJUnit4ClassRunnerOverrideTest.overrideRulesMethod() 
            BlockJUnit4ClassRunnerOverrideTest.<init>() 
            void BlockJUnit4ClassRunnerOverrideTest.createTestDefersToNoArgCreateTest() 
            void BlockJUnit4ClassRunnerOverrideTest.overrideTestRulesMethod()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 13]}]}
dummy: false
class org.junit.internal.SerializableMatcherDescription
fields: {
           java.lang.String* matcherDescription <_final>
         }
statics: {}
supers: {
           class org.hamcrest.BaseMatcher 
           class java.io.Serializable
         }
objc_protocols: {}
methods: {
            boolean SerializableMatcherDescription.matches(Object) 
            SerializableMatcherDescription.<init>(Matcher) 
            Matcher SerializableMatcherDescription.asSerializableMatcher(Matcher) 
            void SerializableMatcherDescription.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.listening.RunnerTest$NewExample
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RunnerTest$NewExample.<init>() 
            void RunnerTest$NewExample.empty()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 55, column 24]}]}
dummy: false
class java.lang.Error
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.internal.runners.model.MultipleFailureException
fields: {
           java.util.List* fErrors <_final>
         }
statics: {
            long serialVersionUID <_final> 
            long serialVersionUID <_final>
          }
supers: {
           class org.junit.runners.model.MultipleFailureException
         }
objc_protocols: {}
methods: {
            MultipleFailureException.<init>(List)
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.TestSystem
fields: {
           int fCode <> 
           java.io.PrintStream* out <> 
           java.io.ByteArrayOutputStream* fOutContents <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.JUnitSystem
         }
objc_protocols: {}
methods: {
            TestSystem.<init>() 
            void TestSystem.exit(int) 
            PrintStream TestSystem.out() 
            OutputStream TestSystem.outContents()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.lang.reflect.Constructor
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.classes.EnclosedTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void EnclosedTest.enclosedRunnerPlansConcreteEnclosedClasses() 
            void EnclosedTest.enclosedRunnerIsNamedForEnclosingClass() 
            EnclosedTest.<init>() 
            void EnclosedTest.enclosedRunnerRunsConcreteEnclosedClasses()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.experimental.theories.FromDataPoints
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            String FromDataPoints.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.PARAMETER") _org.junit.experimental.theories.ParametersSuppliedBy(value="org.junit.experimental.theories.internal.SpecificDataPointsSupplier")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 52, column 18]}]}
dummy: false

class org.junit.tests.assertion.MultipleFailureExceptionTest$ExpectedException
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.RuntimeException
         }
objc_protocols: {}
methods: {
            MultipleFailureExceptionTest$ExpectedException.<init>(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 111, column 25]}]}
dummy: false
class org.junit.internal.runners.statements.ExpectExceptionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectExceptionTest.whenExpectingAssumptionViolatedExceptionStatementsThrowingSubclassShouldPass() 
            ExpectExceptionTest.<init>() 
            void ExpectExceptionTest.whenExpectingAssumptionViolatedExceptionStatementsPassingShouldFail() 
            void ExpectExceptionTest.whenExpectingAssumptionViolatedExceptionStatementsThrowingDifferentExceptionShouldFail() 
            void ExpectExceptionTest.whenExpectingAssumptionViolatedExceptionStatementsThrowingItShouldPass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariablesAbound
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariablesAbound.forItem(Object,Collection,Map,List,Object[],Collection[]) 
            WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariablesAbound.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 173, column 24]}]}
dummy: false
class org.junit.internal.management.ManagementFactory
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ManagementFactory.<init>() 
            ThreadMXBean ManagementFactory.getThreadMXBean() 
            RuntimeMXBean ManagementFactory.getRuntimeMXBean()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.manipulation.NoTestsRemainException
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            NoTestsRemainException.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.util.concurrent.TimeUnit
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.manipulation.OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod.<clinit>() 
            String OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod.access$284(Object) 
            void OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod.orderingBackwardWorksOnTestClassRunner() 
            void OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod.resetLog() 
            OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod.<init>() 
            void OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod.orderingForwardWorksOnTestClassRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 225, column 24]}]}
dummy: false
class java.lang.reflect.Field
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.rules.ErrorCollectorTest$CheckCallableThatThrowsInternalAssumptionViolatedException
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckCallableThatThrowsInternalAssumptionViolatedException.<init>() 
            void ErrorCollectorTest$CheckCallableThatThrowsInternalAssumptionViolatedException.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 224, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest$BrokenRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement ClassLevelMethodsWithIgnoredTestsTest$BrokenRule.apply(Statement,Description) 
            ClassLevelMethodsWithIgnoredTestsTest$BrokenRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 122, column 24]}]}
dummy: false
class org.junit.tests.assertion.ComparisonFailureTest
fields: {
           java.lang.String* message <> 
           java.lang.String* expected <> 
           java.lang.String* actual <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ComparisonFailureTest.<init>(String,String,String) 
            void ComparisonFailureTest.compactFailureMessage() 
            Collection ComparisonFailureTest.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false
class java.util.concurrent.ConcurrentMap
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest$HasUnfilteredTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ClassLevelMethodsWithIgnoredTestsTest$HasUnfilteredTest.<init>() 
            void ClassLevelMethodsWithIgnoredTestsTest$HasUnfilteredTest.unfilteredTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 105, column 24]}]}
dummy: false
class org.junit.experimental.categories.Categories$CategoryFilter
fields: {
           _Bool includedAny <_final> 
           java.util.Set* included <_final> 
           _Bool excludedAny <_final> 
           java.util.Set* excluded <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            Categories$CategoryFilter.<init>(boolean,Set,boolean,Set) 
            Categories$CategoryFilter Categories$CategoryFilter.include(Class[]) 
            boolean Categories$CategoryFilter.matchesAnyParentCategories(Set,Set) 
            boolean Categories$CategoryFilter.hasCorrectCategoryAnnotation(Description) 
            Set Categories$CategoryFilter.copyAndRefine(Set) 
            Categories$CategoryFilter Categories$CategoryFilter.exclude(Class[]) 
            boolean Categories$CategoryFilter.shouldRun(Description) 
            Categories$CategoryFilter Categories$CategoryFilter.include(boolean,Class[]) 
            Categories$CategoryFilter Categories$CategoryFilter.exclude(Class) 
            String Categories$CategoryFilter.toString() 
            boolean Categories$CategoryFilter.matchesAllParentCategories(Set,Set) 
            Categories$CategoryFilter Categories$CategoryFilter.categoryFilter(boolean,Set,boolean,Set) 
            Description Categories$CategoryFilter.parentDescription(Description) 
            Categories$CategoryFilter.<init>(boolean,Class[],boolean,Class[]) 
            Categories$CategoryFilter.<init>(Class,Class) 
            Class[] Categories$CategoryFilter.directCategories(Description) 
            Set Categories$CategoryFilter.categories(Description) 
            Categories$CategoryFilter Categories$CategoryFilter.exclude(boolean,Class[]) 
            Categories$CategoryFilter Categories$CategoryFilter.include(Class) 
            String Categories$CategoryFilter.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 115, column 24]}]}
dummy: false
class org.junit.runners.model.TestClassTest$OuterClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$OuterClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 54, column 24]}]}
dummy: false

class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$NoExceptionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityTest$NoExceptionTest.<init>() 
            void ForwardCompatibilityTest$NoExceptionTest.succeed()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 103, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.extendingwithstubs.MethodCall
fields: {
           java.lang.Object*[_*_](*) args <_final> 
           java.lang.reflect.Method* method <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Class MethodCall.getReturnType() 
            String MethodCall.toString() 
            MethodCall.<init>(Method,Object[]) 
            String MethodCall.argListString() 
            boolean MethodCall.equals(Object) 
            int MethodCall.hashCode() 
            Object MethodCall.stringableObject(Object) 
            List MethodCall.argList()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$TestWithStaticTestRule
fields: {}
statics: {
            org.junit.rules.TestRule* temporaryFolder <_org.junit.Rule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleMemberValidatorTest$TestWithStaticTestRule.<clinit>() 
            RuleMemberValidatorTest$TestWithStaticTestRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 180, column 24]}]}
dummy: false
class org.junit.rules.ClassRulesTest$MethodExampleTestWithCustomClassRule
fields: {}
statics: {
            org.junit.rules.ClassRulesTest$CustomCounter* counter <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$MethodExampleTestWithCustomClassRule.<clinit>() 
            void ClassRulesTest$MethodExampleTestWithCustomClassRule.secondTest() 
            ClassRulesTest$MethodExampleTestWithCustomClassRule.<init>() 
            ClassRulesTest$CustomCounter ClassRulesTest$MethodExampleTestWithCustomClassRule.access$300() 
            ClassRulesTest$CustomCounter ClassRulesTest$MethodExampleTestWithCustomClassRule.getCounter() 
            void ClassRulesTest$MethodExampleTestWithCustomClassRule.firstTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 193, column 24]}]}
dummy: false
class java.util.Set
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.AssumptionViolatedExceptionTest$SerializableIsThreeMatcher
fields: {}
statics: {}
supers: {
           class org.hamcrest.BaseMatcher 
           class java.io.Serializable
         }
objc_protocols: {}
methods: {
            boolean AssumptionViolatedExceptionTest$SerializableIsThreeMatcher.matches(Object) 
            AssumptionViolatedExceptionTest$SerializableIsThreeMatcher.<init>() 
            AssumptionViolatedExceptionTest$SerializableIsThreeMatcher.<init>(AssumptionViolatedExceptionTest$1) 
            void AssumptionViolatedExceptionTest$SerializableIsThreeMatcher.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 190, column 25]}]}
dummy: false
class org.junit.internal.runners.rules.RuleMemberValidator
fields: {
           java.util.List* validatorStrategies <_final> 
           _Bool methods <_final> 
           java.lang.Class* annotation <_final>
         }
statics: {
            org.junit.internal.runners.rules.RuleMemberValidator* RULE_METHOD_VALIDATOR <_final> 
            org.junit.internal.runners.rules.RuleMemberValidator* RULE_VALIDATOR <_final> 
            org.junit.internal.runners.rules.RuleMemberValidator* CLASS_RULE_VALIDATOR <_final> 
            org.junit.internal.runners.rules.RuleMemberValidator* CLASS_RULE_METHOD_VALIDATOR <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleMemberValidator.<clinit>() 
            RuleMemberValidator$Builder RuleMemberValidator.classRuleValidatorBuilder() 
            void RuleMemberValidator.validateMember(FrameworkMember,List) 
            boolean RuleMemberValidator.access$1200(FrameworkMember) 
            RuleMemberValidator$Builder RuleMemberValidator.testRuleValidatorBuilder() 
            boolean RuleMemberValidator.isTestRule(FrameworkMember) 
            void RuleMemberValidator.validate(TestClass,List) 
            boolean RuleMemberValidator.access$1300(FrameworkMember) 
            boolean RuleMemberValidator.isMethodRule(FrameworkMember) 
            boolean RuleMemberValidator.isRuleType(FrameworkMember) 
            RuleMemberValidator.<init>(RuleMemberValidator$Builder) 
            boolean RuleMemberValidator.access$1400(FrameworkMember)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasDataPointsMethodWithNullValue
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllMembersSupplierTest$HasDataPointsMethodWithNullValue.<init>(Integer) 
            Integer[] AllMembersSupplierTest$HasDataPointsMethodWithNullValue.getObjects()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 115, column 24]}]}
dummy: false
class java.text.NumberFormat
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.framework.TestResult
fields: {
           java.util.List* fListeners <> 
           _Bool fStop <> 
           java.util.List* fFailures <> 
           int fRunTests <> 
           java.util.List* fErrors <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            int TestResult.failureCount() 
            void TestResult.addFailure(Test,AssertionFailedError) 
            boolean TestResult.wasSuccessful() 
            void TestResult.addListener(TestListener) 
            void TestResult.startTest(Test) 
            int TestResult.runCount() 
            void TestResult.endTest(Test) 
            TestResult.<init>() 
            void TestResult.stop() 
            void TestResult.runProtected(Test,Protectable) 
            int TestResult.errorCount() 
            Enumeration TestResult.errors() 
            void TestResult.removeListener(TestListener) 
            List TestResult.cloneListeners() 
            Enumeration TestResult.failures() 
            void TestResult.run(TestCase) 
            void TestResult.addError(Test,Throwable) 
            boolean TestResult.shouldStop()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.framework.NotPublicTestCase
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            NotPublicTestCase.<init>() 
            void NotPublicTestCase.testPublic() 
            void NotPublicTestCase.testNotPublic()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class org.junit.runner.FilterOptionIntegrationTest$DummyTestClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FilterOptionIntegrationTest$DummyTestClass.<init>() 
            void FilterOptionIntegrationTest$DummyTestClass.dummyTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 150, column 24]}]}
dummy: false
class org.junit.rules.NameRulesTest$TestNames
fields: {
           org.junit.rules.TestName* name <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void NameRulesTest$TestNames.testB() 
            void NameRulesTest$TestNames.testA() 
            NameRulesTest$TestNames.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 24]}]}
dummy: false
class org.junit.tests.junit3compatibility.SuiteMethodTest$CompatibilityTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuiteMethodTest$CompatibilityTest.ignored() 
            SuiteMethodTest$CompatibilityTest.<init>() 
            Test SuiteMethodTest$CompatibilityTest.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 63, column 24]}]}
dummy: false
class junit.tests.framework.Failure
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            Failure.<init>() 
            void Failure.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class java.util.Map$Entry
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.running.classes.ParameterizedTestTest$SingleArgumentTestWithIterable
fields: {}
statics: {
            java.util.concurrent.atomic.AtomicBoolean* dataCalled <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$SingleArgumentTestWithIterable.<clinit>() 
            void ParameterizedTestTest$SingleArgumentTestWithIterable.aTest() 
            Iterable ParameterizedTestTest$SingleArgumentTestWithIterable.data() 
            ParameterizedTestTest$SingleArgumentTestWithIterable.<init>(Object)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 637, column 24]}]}
dummy: false
class org.junit.tests.manipulation.ReverseAlphanumericSorter
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runner.manipulation.Ordering$Factory
         }
objc_protocols: {}
methods: {
            ReverseAlphanumericSorter.<init>() 
            Ordering ReverseAlphanumericSorter.create(Ordering$Context)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 19]}]}
dummy: false
class org.junit.runner.notification.RunNotifier$9
fields: {
           org.junit.runner.Description* val$description <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier$SafeNotifier
         }
objc_protocols: {}
methods: {
            void RunNotifier$9.notifyListener(RunListener) 
            RunNotifier$9.<init>(RunNotifier,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 222, column 27]}]}
dummy: false
class junit.tests.runner.TextFeedbackTest$1
fields: {
           junit.tests.runner.TextFeedbackTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TextFeedbackTest$1.<init>(TextFeedbackTest) 
            void TextFeedbackTest$1.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 51, column 37]}]}
dummy: false
class java.nio.channels.FileChannel
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.experimental.theories.runner.WithNamedDataPoints
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            WithNamedDataPoints.<init>() 
            void WithNamedDataPoints.onlyUseSpecificDataPointsIfSpecified()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class org.junit.rules.StopwatchTest$AbstractStopwatchTest$2
fields: {
           org.junit.rules.StopwatchTest$AbstractStopwatchTest* this$0 <_final> 
           org.junit.rules.Stopwatch$Clock* clock <_final> 
           long endNanos <_volatile> 
           long startNanos <_volatile>
         }
statics: {}
supers: {
           class org.junit.rules.Stopwatch
         }
objc_protocols: {}
methods: {
            StopwatchTest$AbstractStopwatchTest$2.<init>(StopwatchTest$AbstractStopwatchTest,Stopwatch$Clock) 
            void StopwatchTest$AbstractStopwatchTest$2.skipped(long,AssumptionViolatedException,Description) 
            void StopwatchTest$AbstractStopwatchTest$2.succeeded(long,Description) 
            void StopwatchTest$AbstractStopwatchTest$2.finished(long,Description) 
            void StopwatchTest$AbstractStopwatchTest$2.failed(long,Throwable,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 65, column 71]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WhenNoParametersMatch$AssumptionsFail
fields: {}
statics: {
            int DATA <_org.junit.experimental.theories.DataPoint> 
            org.hamcrest.Matcher* MATCHER <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WhenNoParametersMatch$AssumptionsFail.<clinit>() 
            WhenNoParametersMatch$AssumptionsFail.<init>() 
            void WhenNoParametersMatch$AssumptionsFail.nonZeroIntsAreFun(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 24]}]}
dummy: false
class org.junit.tests.junit3compatibility.AllTestsTest$AllJUnit4
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTestsTest$AllJUnit4.<init>() 
            Test AllTestsTest$AllJUnit4.suite()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.AllTests")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 62, column 24]}]}
dummy: false

class org.junit.experimental.categories.CategoriesAndParameterizedTest$ParameterizedTestWithMethodWithCategory
fields: {
           java.lang.String* value <_org.junit.runners.Parameterized$Parameter>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoriesAndParameterizedTest$ParameterizedTestWithMethodWithCategory.testThatIsNotExecuted() 
            Iterable CategoriesAndParameterizedTest$ParameterizedTestWithMethodWithCategory.getParameters() 
            CategoriesAndParameterizedTest$ParameterizedTestWithMethodWithCategory.<init>() 
            void CategoriesAndParameterizedTest$ParameterizedTestWithMethodWithCategory.testSomething()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 93, column 24]}]}
dummy: false
class org.junit.runners.Parameterized$Parameters
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            String Parameterized$Parameters.name()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.METHOD")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 213, column 22]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit4TestAdapterTest$TestSuiteFor3
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnit4TestAdapterTest$TestSuiteFor3.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.junit3compatibility.JUnit4TestAdapterTest$Test3")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 59, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$DeprecatedSkipped
fields: {
           org.junit.rules.TestRule* watcher <_final _org.junit.Rule>
         }
statics: {
            org.junit.runner.Description* catchedDescription <> 
            org.junit.internal.AssumptionViolatedException* catchedException <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AssumptionViolatedException TestWatcherTest$CallbackArguments$DeprecatedSkipped.access$900() 
            Description TestWatcherTest$CallbackArguments$DeprecatedSkipped.access$802(Description) 
            TestWatcherTest$CallbackArguments$DeprecatedSkipped.<init>() 
            Description TestWatcherTest$CallbackArguments$DeprecatedSkipped.access$800() 
            AssumptionViolatedException TestWatcherTest$CallbackArguments$DeprecatedSkipped.access$902(AssumptionViolatedException) 
            void TestWatcherTest$CallbackArguments$DeprecatedSkipped.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 270, column 28]}]}
dummy: false

class org.junit.experimental.categories.CategoriesAndParameterizedTest$SuiteWithParameterizedTestWithoutCategory
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoriesAndParameterizedTest$SuiteWithParameterizedTestWithoutCategory.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoriesAndParameterizedTest$Token") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoriesAndParameterizedTest$TestThatAvoidsNoTestRemainsException, org.junit.experimental.categories.CategoriesAndParameterizedTest$ParameterizedTestWithoutCategory")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 24]}]}
dummy: false
class org.junit.runners.CustomBlockJUnit4ClassRunnerTest$TrackingRunListener
fields: {
           java.util.concurrent.atomic.AtomicInteger* testFinishedCount <_final> 
           java.util.concurrent.atomic.AtomicInteger* testStartedCount <_final> 
           java.util.concurrent.atomic.AtomicInteger* testFailureCount <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            CustomBlockJUnit4ClassRunnerTest$TrackingRunListener.<init>(CustomBlockJUnit4ClassRunnerTest$1) 
            CustomBlockJUnit4ClassRunnerTest$TrackingRunListener.<init>() 
            void CustomBlockJUnit4ClassRunnerTest$TrackingRunListener.testFinished(Description) 
            void CustomBlockJUnit4ClassRunnerTest$TrackingRunListener.testStarted(Description) 
            void CustomBlockJUnit4ClassRunnerTest$TrackingRunListener.testFailure(Failure)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 67, column 22]}]}
dummy: false
class java.util.concurrent.ExecutionException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.framework.Test
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void Test.run(TestResult) 
            int Test.countTestCases()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$Q
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.experimental.categories.MultiCategoryTest$A 
           class org.junit.experimental.categories.MultiCategoryTest$C
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$Q.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 104, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$OneFast
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$OneFast.<init>() 
            void CategoryTest$OneFast.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 249, column 24]}]}
dummy: false
class junit.tests.extensions.AllTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTests.<init>() 
            void AllTests.main(String[]) 
            Test AllTests.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.ComparisonFailure
fields: {
           java.lang.String* fActual <> 
           java.lang.String* fExpected <>
         }
statics: {
            long serialVersionUID <_final> 
            int MAX_CONTEXT_LENGTH <_final>
          }
supers: {
           class java.lang.AssertionError
         }
objc_protocols: {}
methods: {
            ComparisonFailure.<init>(String,String,String) 
            String ComparisonFailure.getMessage() 
            String ComparisonFailure.getExpected() 
            String ComparisonFailure.getActual()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ExpectedMessageMatcherFails
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ExpectedMessageMatcherFails.throwsMore() 
            ExpectedExceptionTest$ExpectedMessageMatcherFails.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 223, column 24]}]}
dummy: false
class org.junit.validator.PublicClassValidator
fields: {}
statics: {
            java.util.List* NO_VALIDATION_ERRORS <_final>
          }
supers: {
           class java.lang.Object 
           class org.junit.validator.TestClassValidator
         }
objc_protocols: {}
methods: {
            void PublicClassValidator.<clinit>() 
            List PublicClassValidator.validateTestClass(TestClass) 
            PublicClassValidator.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.ExternalResourceRuleTest
fields: {}
statics: {
            java.lang.String* callSequence <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExternalResourceRuleTest.shouldThrowMultipleFailureExceptionWhenTestFailsAndTwoClosingResourcesFail() 
            Matcher ExternalResourceRuleTest.hasItems(Matcher,Matcher) 
            void ExternalResourceRuleTest.shouldThrowMultipleFailureExceptionWhenTestFailsAndClosingResourceFails() 
            ExternalResourceRuleTest.<init>() 
            void ExternalResourceRuleTest.shouldWrapAssumptionFailuresWhenClosingResourceFails() 
            void ExternalResourceRuleTest.externalResourceGeneratesCorrectSequence() 
            String ExternalResourceRuleTest.access$084(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 13]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeout$Builder
fields: {
           _Bool lookForStuckThread <> 
           long timeout <> 
           java.util.concurrent.TimeUnit* unit <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeUnit FailOnTimeout$Builder.access$200(FailOnTimeout$Builder) 
            FailOnTimeout$Builder FailOnTimeout$Builder.withTimeout(long,TimeUnit) 
            FailOnTimeout$Builder.<init>(FailOnTimeout$1) 
            FailOnTimeout$Builder.<init>() 
            boolean FailOnTimeout$Builder.access$300(FailOnTimeout$Builder) 
            FailOnTimeout FailOnTimeout$Builder.build(Statement) 
            FailOnTimeout$Builder FailOnTimeout$Builder.withLookingForStuckThread(boolean) 
            long FailOnTimeout$Builder.access$100(FailOnTimeout$Builder)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.IncludeCategories
fields: {}
statics: {}
supers: {
           class org.junit.experimental.categories.CategoryFilterFactory
         }
objc_protocols: {}
methods: {
            Filter IncludeCategories.createFilter(List) 
            IncludeCategories.<init>() 
            Filter IncludeCategories.createFilter(FilterFactoryParams)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 19]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SubStaticMethodShadowing
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.AnnotationTest$SuperStaticMethodShadowing
         }
objc_protocols: {}
methods: {
            AnnotationTest$SubStaticMethodShadowing.<init>() 
            TestRule AnnotationTest$SubStaticMethodShadowing.rule() 
            void AnnotationTest$SubStaticMethodShadowing.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 566, column 24]}]}
dummy: false
class org.junit.rules.ClassRulesTest
fields: {}
statics: {
            java.util.List* orderList <_final> 
            java.lang.StringBuilder* log <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRulesTest.<clinit>() 
            void ClassRulesTest.methodRuleIsIntroducedAndEvaluatedOnSubclass() 
            void ClassRulesTest.classRuleOrderingDefault() 
            void ClassRulesTest.ruleIsIntroducedAndEvaluatedOnSubclass() 
            void ClassRulesTest.testCallMethodOnlyOnceRule() 
            List ClassRulesTest.access$100() 
            StringBuilder ClassRulesTest.access$500() 
            ClassRulesTest.<init>() 
            void ClassRulesTest.classRulesModifiableList() 
            void ClassRulesTest.usesFieldAndMethodRule() 
            void ClassRulesTest.methodCustomRuleIsAppliedOnce() 
            void ClassRulesTest.classRulesModifiableListEmpty() 
            void ClassRulesTest.customRuleIsAppliedOnce() 
            void ClassRulesTest.classRuleOrdering() 
            void ClassRulesTest.ruleIsAppliedOnce() 
            void ClassRulesTest.methodRuleIsAppliedOnce()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 30, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$BeforeAndAfterEachTime
fields: {}
statics: {
            java.lang.String* A <_org.junit.experimental.theories.DataPoint> 
            java.lang.String* B <_org.junit.experimental.theories.DataPoint> 
            int befores <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuccessfulWithDataPointFields$BeforeAndAfterEachTime.<clinit>() 
            void SuccessfulWithDataPointFields$BeforeAndAfterEachTime.stringsAreOK(String) 
            SuccessfulWithDataPointFields$BeforeAndAfterEachTime.<init>() 
            void SuccessfulWithDataPointFields$BeforeAndAfterEachTime.incrementBefore() 
            void SuccessfulWithDataPointFields$BeforeAndAfterEachTime.calledTwice() 
            void SuccessfulWithDataPointFields$BeforeAndAfterEachTime.resetCalls()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 144, column 24]}]}
dummy: false
class org.junit.tests.manipulation.FilterableTest$FilteredRunner$1
fields: {
           org.junit.tests.manipulation.FilterableTest$FilteredRunner* this$0 <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            boolean FilterableTest$FilteredRunner$1.shouldRun(Description) 
            String FilterableTest$FilteredRunner$1.describe() 
            FilterableTest$FilteredRunner$1.<init>(FilterableTest$FilteredRunner)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 32]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$SomeAreSlowSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$SomeAreSlowSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$ExcludeCategory(value="org.junit.experimental.categories.CategoryTest$Category1") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$SomeAreSlow")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 150, column 24]}]}
dummy: false
class org.junit.experimental.theories.Theories$TheoryAnchor$1$1
fields: {
           org.junit.experimental.theories.Theories$TheoryAnchor$1* this$1 <_final> 
           org.junit.runners.model.Statement* val$statement <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            Theories$TheoryAnchor$1$1.<init>(Theories$TheoryAnchor$1,Statement) 
            void Theories$TheoryAnchor$1$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 233, column 43]}]}
dummy: false
class org.junit.rules.TestRuleTest$CallMethodOnlyOnceRule$Dummy$1
fields: {
           org.junit.rules.TestRuleTest$CallMethodOnlyOnceRule$Dummy* this$0 <_final> 
           org.junit.runners.model.Statement* val$base <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void TestRuleTest$CallMethodOnlyOnceRule$Dummy$1.evaluate() 
            TestRuleTest$CallMethodOnlyOnceRule$Dummy$1.<init>(TestRuleTest$CallMethodOnlyOnceRule$Dummy,Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 518, column 39]}]}
dummy: false
class org.junit.runners.model.TestClass
fields: {
           java.lang.Class* clazz <_final> 
           java.util.Map* fieldsForAnnotations <_final> 
           java.util.Map* methodsForAnnotations <_final>
         }
statics: {
            org.junit.runners.model.TestClass$MethodComparator* METHOD_COMPARATOR <_final> 
            org.junit.runners.model.TestClass$FieldComparator* FIELD_COMPARATOR <_final>
          }
supers: {
           class java.lang.Object 
           class org.junit.runners.model.Annotatable
         }
objc_protocols: {}
methods: {
            void TestClass.<clinit>() 
            void TestClass.scanAnnotatedMembers(Map,Map) 
            void TestClass.collectAnnotatedFieldValues(Object,Class,Class,MemberValueConsumer) 
            List TestClass.getSuperClasses(Class) 
            List TestClass.getAnnotatedFieldValues(Object,Class,Class) 
            List TestClass.getAnnotatedMethods(Class) 
            List TestClass.getAnnotatedMethods() 
            Annotation TestClass.getAnnotation(Class) 
            String TestClass.getName() 
            Field[] TestClass.getSortedDeclaredFields(Class) 
            Map TestClass.makeDeeplyUnmodifiable(Map) 
            boolean TestClass.equals(Object) 
            List TestClass.getAnnotatedMembers(Map,Class,boolean) 
            boolean TestClass.isPublic() 
            void TestClass.addToAnnotationLists(FrameworkMember,Map) 
            List TestClass.getAnnotatedFields() 
            TestClass.<init>(Class) 
            int TestClass.hashCode() 
            List TestClass.getAnnotatedMethodValues(Object,Class,Class) 
            List TestClass.getAnnotatedFields(Class) 
            boolean TestClass.runsTopToBottom(Class) 
            boolean TestClass.isANonStaticInnerClass() 
            List TestClass.collectValues(Map) 
            void TestClass.collectAnnotatedMethodValues(Object,Class,Class,MemberValueConsumer) 
            Constructor TestClass.getOnlyConstructor() 
            Annotation[] TestClass.getAnnotations() 
            Class TestClass.getJavaClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.description.AnnotatedDescriptionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotatedDescriptionTest.descriptionOfTestClassHasValuedAnnotation() 
            void AnnotatedDescriptionTest.characterizeCreatingMyOwnAnnotation() 
            AnnotatedDescriptionTest.<init>() 
            void AnnotatedDescriptionTest.getAnnotationsReturnsAllAnnotations() 
            void AnnotatedDescriptionTest.childlessCopyOfDescriptionStillHasAnnotations() 
            void AnnotatedDescriptionTest.annotationsExistOnDescriptionsOfClasses() 
            void AnnotatedDescriptionTest.annotationsExistOnDescriptionsOfIgnoredClass() 
            Description AnnotatedDescriptionTest.describe(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false
class org.junit.tests.experimental.theories.extendingwithstubs.GuesserQueue
fields: {
           org.junit.tests.experimental.theories.extendingwithstubs.ReguessableValue* lastRemoved <>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.util.ArrayList
         }
objc_protocols: {}
methods: {
            ReguessableValue GuesserQueue.remove(int) 
            GuesserQueue.<init>() 
            Object GuesserQueue.remove(int) 
            GuesserQueue GuesserQueue.forSingleValues(List) 
            void GuesserQueue.update(AssumptionViolatedException)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false
class org.junit.rules.TestWatchmanTest$FailingTest
fields: {
           org.junit.rules.TestWatchmanTest$LoggingTestWatchman* watchman <_org.junit.Rule>
         }
statics: {
            java.lang.StringBuilder* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestWatchmanTest$FailingTest.initLog() 
            TestWatchmanTest$FailingTest.<init>() 
            void TestWatchmanTest$FailingTest.succeeds()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 39, column 24]}]}
dummy: false
class java.lang.Thread
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runners.model.RunnerBuilderStub
fields: {
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.RunnerBuilder
         }
objc_protocols: {}
methods: {
            RunnerBuilderStub.<init>() 
            Runner RunnerBuilderStub.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.manipulation.OrderableTest$TestOrderableClassRunnerIsSortable$OrderMe
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestOrderableClassRunnerIsSortable$OrderMe.c() 
            OrderableTest$TestOrderableClassRunnerIsSortable$OrderMe.<init>() 
            void OrderableTest$TestOrderableClassRunnerIsSortable$OrderMe.b() 
            void OrderableTest$TestOrderableClassRunnerIsSortable$OrderMe.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.manipulation.OrderableTest$TestOrderableClassRunnerIsSortable$OrderableRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 184, column 28]}]}
dummy: false
class org.junit.internal.Classes
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Class Classes.getClass(String) 
            Classes.<init>() 
            Class Classes.getClass(String,Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.framework.OverrideTestCase
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.tests.framework.OneTestCase
         }
objc_protocols: {}
methods: {
            OverrideTestCase.<init>() 
            void OverrideTestCase.testCase()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 13]}]}
dummy: false
class org.junit.experimental.results.FailureList
fields: {
           java.util.List* failures <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FailureList.<init>(List) 
            Result FailureList.result()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 6]}]}
dummy: false

class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersTest$ClassWithParameterizedAnnotation
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerWithParametersTest$ClassWithParameterizedAnnotation.<init>() 
            void BlockJUnit4ClassRunnerWithParametersTest$ClassWithParameterizedAnnotation.dummyTest()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized") _org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersTest$DummyAnnotation>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 24]}]}
dummy: false
class org.junit.tests.description.SuiteDescriptionTest
fields: {
           org.junit.runner.Description* anotherTwoKids <> 
           org.junit.runner.Description* childless <> 
           org.junit.runner.Description* namedB <> 
           org.junit.runner.Description* anotherChildless <> 
           org.junit.runner.Description* twoKids <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuiteDescriptionTest.equalsIsCorrect() 
            Description SuiteDescriptionTest.descriptionWithTwoKids(String,String) 
            SuiteDescriptionTest.<init>() 
            void SuiteDescriptionTest.hashCodeIsReasonable()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.rules.DisableOnDebugTest$PreJava5DebugArgumentsTest
fields: {
           org.junit.rules.TestRule* failOnExecution <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.rules.DisableOnDebugTest$AbstractDisableOnDebugTest
         }
objc_protocols: {}
methods: {
            DisableOnDebugTest$PreJava5DebugArgumentsTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 66, column 24]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit4TestAdapterTest$TestSuite3
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnit4TestAdapterTest$TestSuite3.<init>() 
            Test JUnit4TestAdapterTest$TestSuite3.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 67, column 24]}]}
dummy: false
class org.junit.tests.experimental.AssumptionTest$HasPassingAssumption
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AssumptionTest$HasPassingAssumption.<init>() 
            void AssumptionTest$HasPassingAssumption.assumptionsFail()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 64, column 24]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$AddInternalAssumptionViolatedException
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$AddInternalAssumptionViolatedException.<init>() 
            void ErrorCollectorTest$AddInternalAssumptionViolatedException.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 130, column 24]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckMatcherThatDoesNotFailWithoutProvidedReason
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckMatcherThatDoesNotFailWithoutProvidedReason.<init>() 
            void ErrorCollectorTest$CheckMatcherThatDoesNotFailWithoutProvidedReason.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 150, column 24]}]}
dummy: false
class org.junit.rules.NameRulesTest$BeforeAndAfterTest
fields: {
           java.lang.String* expectedName <_final> 
           org.junit.rules.TestName* name <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            NameRulesTest$BeforeAndAfterTest.<init>() 
            void NameRulesTest$BeforeAndAfterTest.setUp() 
            void NameRulesTest$BeforeAndAfterTest.tearDown() 
            void NameRulesTest$BeforeAndAfterTest.x()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.ParameterizedAssertionErrorTest
fields: {}
statics: {
            org.junit.experimental.theories.internal.ParameterizedAssertionError* A <_org.junit.experimental.theories.DataPoint> 
            org.junit.experimental.theories.internal.ParameterizedAssertionError* B2 <_org.junit.experimental.theories.DataPoint> 
            java.lang.NullPointerException* NULL_POINTER_EXCEPTION <_final _org.junit.experimental.theories.DataPoint> 
            org.junit.experimental.theories.internal.ParameterizedAssertionError* B <_org.junit.experimental.theories.DataPoint> 
            java.lang.String* METHOD_NAME <_final _org.junit.experimental.theories.DataPoint> 
            java.lang.Object*[_*_](*) NO_OBJECTS <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedAssertionErrorTest.<clinit>() 
            void ParameterizedAssertionErrorTest.sameHashCodeWhenEquals(Throwable,String,Object[]) 
            void ParameterizedAssertionErrorTest.differentParameterizedAssertionErrorsHaveDifferentToStrings(ParameterizedAssertionError,ParameterizedAssertionError) 
            ParameterizedAssertionErrorTest.<init>() 
            void ParameterizedAssertionErrorTest.isNotEqualToNull(ParameterizedAssertionError) 
            void ParameterizedAssertionErrorTest.equalParameterizedAssertionErrorsHaveSameToString(ParameterizedAssertionError,ParameterizedAssertionError) 
            void ParameterizedAssertionErrorTest.canJoinWhenToStringFails() 
            void ParameterizedAssertionErrorTest.buildParameterizedAssertionError(String,String) 
            void ParameterizedAssertionErrorTest.equalsReturnsTrue(Throwable,String,Object[])
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.validator.AnnotationValidatorFactoryTest$Validator
fields: {}
statics: {
            java.util.List* NO_VALIDATION_ERRORS <_final>
          }
supers: {
           class org.junit.validator.AnnotationValidator
         }
objc_protocols: {}
methods: {
            AnnotationValidatorFactoryTest$Validator.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 24]}]}
dummy: false
class org.junit.Assume
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void Assume.assumeNotNull(Object[]) 
            void Assume.assumeThat(String,Object,Matcher) 
            void Assume.assumeNoException(Throwable) 
            void Assume.assumeFalse(boolean) 
            Assume.<init>() 
            void Assume.assumeTrue(String,boolean) 
            void Assume.assumeThat(Object,Matcher) 
            void Assume.assumeNoException(String,Throwable) 
            void Assume.assumeFalse(String,boolean) 
            void Assume.assumeTrue(boolean)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.methods.TestMethodTest$SubWrong
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.TestMethodTest$SuperWrong
         }
objc_protocols: {}
methods: {
            void TestMethodTest$SubWrong.justFine() 
            TestMethodTest$SubWrong.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 148, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$BothKindsOfRule
fields: {
           int applications <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            Statement TestRuleTest$BothKindsOfRule.apply(Statement,Description) 
            TestRuleTest$BothKindsOfRule.<init>() 
            Statement TestRuleTest$BothKindsOfRule.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 54, column 24]}]}
dummy: false
class java.lang.ThreadGroup
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runner.manipulation.Ordering
fields: {}
statics: {
            java.lang.String* CONSTRUCTOR_ERROR_FORMAT <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            boolean Ordering.validateOrderingIsCorrect() 
            void Ordering.apply(Object) 
            String Ordering.getClassName(Class) 
            Ordering.<init>() 
            Ordering Ordering.definedBy(Ordering$Factory,Description) 
            Ordering Ordering.shuffledBy(Random) 
            Ordering Ordering.definedBy(Class,Description) 
            List Ordering.orderItems(Collection)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.Rule
fields: {}
statics: {
            int DEFAULT_ORDER <>
          }
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            int Rule.order()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD")>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$FailBeforeExpectingException
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$FailBeforeExpectingException.fails() 
            ExpectedExceptionTest$FailBeforeExpectingException.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 268, column 24]}]}
dummy: false

class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesTest
fields: {
           _Bool flipBit <>
         }
statics: {}
supers: {
           class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideRulesTest
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesTest.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 84, column 24]}]}
dummy: false
class java.lang.annotation.AnnotationFormatError
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.tests.framework.NotVoidTestCase
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void NotVoidTestCase.testVoid() 
            NotVoidTestCase.<init>() 
            int NotVoidTestCase.testNotVoid()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class org.junit.ComparisonFailure$ComparisonCompactor$DiffExtractor
fields: {
           org.junit.ComparisonFailure$ComparisonCompactor* this$0 <_final> 
           java.lang.String* sharedSuffix <_final> 
           java.lang.String* sharedPrefix <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String ComparisonFailure$ComparisonCompactor$DiffExtractor.extractDiff(String) 
            String ComparisonFailure$ComparisonCompactor$DiffExtractor.expectedDiff() 
            ComparisonFailure$ComparisonCompactor$DiffExtractor.<init>(ComparisonFailure$ComparisonCompactor) 
            String ComparisonFailure$ComparisonCompactor$DiffExtractor.compactPrefix() 
            String ComparisonFailure$ComparisonCompactor$DiffExtractor.actualDiff() 
            ComparisonFailure$ComparisonCompactor$DiffExtractor.<init>(ComparisonFailure$ComparisonCompactor,ComparisonFailure$1) 
            String ComparisonFailure$ComparisonCompactor$DiffExtractor.compactSuffix()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 131, column 22]}]}
dummy: false
class org.junit.rules.EventCollector$3
fields: {
           org.hamcrest.Matcher* val$messageMatcher <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            EventCollector$3.<init>(Matcher) 
            boolean EventCollector$3.matchesSafely(Object) 
            void EventCollector$3.describeMismatchSafely(EventCollector,Description) 
            void EventCollector$3.describeTo(Description) 
            void EventCollector$3.describeMismatchSafely(Object,Description) 
            boolean EventCollector$3.matchesSafely(EventCollector)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 82, column 53]}]}
dummy: false
class junit.tests.extensions.ExtensionTest$4
fields: {
           junit.tests.extensions.ExtensionTest* this$0 <_final> 
           _Bool fTornDown <> 
           junit.framework.Test* fTest <>
         }
statics: {}
supers: {
           class junit.tests.extensions.ExtensionTest$TornDown
         }
objc_protocols: {}
methods: {
            void ExtensionTest$4.setUp() 
            ExtensionTest$4.<init>(ExtensionTest,Test)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 73, column 46]}]}
dummy: false
class org.junit.tests.running.classes.ThreadsTest$1
fields: {
           org.junit.tests.running.classes.ThreadsTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void ThreadsTest$1.testFinished(Description) 
            ThreadsTest$1.<init>(ThreadsTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 43]}]}
dummy: false
class org.junit.runners.parameterized.TestWithParameters
fields: {
           java.lang.String* name <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* parameters <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String TestWithParameters.getName() 
            List TestWithParameters.getParameters() 
            TestClass TestWithParameters.getTestClass() 
            boolean TestWithParameters.equals(Object) 
            String TestWithParameters.toString() 
            int TestWithParameters.hashCode() 
            TestWithParameters.<init>(String,TestClass,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.methods.TestMethodTest$IgnoredTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestMethodTest$IgnoredTest.ignored() 
            void TestMethodTest$IgnoredTest.withReason() 
            TestMethodTest$IgnoredTest.<init>() 
            void TestMethodTest$IgnoredTest.valid()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 182, column 24]}]}
dummy: false
class junit.tests.framework.ThreeTestCases
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            ThreeTestCases.<init>() 
            void ThreeTestCases.testCase2() 
            void ThreeTestCases.testCase() 
            void ThreeTestCases.testCase3thisTimeItsPersonal()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsSortableViaOrderWith$SortedReverseAlphanumerically
fields: {}
statics: {}
supers: {
           class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsSortableViaOrderWith$Unordered
         }
objc_protocols: {}
methods: {
            OrderWithTest$TestClassRunnerIsSortableViaOrderWith$SortedReverseAlphanumerically.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.OrderWith(value="org.junit.tests.manipulation.ReverseAlphanumericSorter")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 161, column 28]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$C
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$C.<init>() 
            void CategoryTest$C.d()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 86, column 24]}]}
dummy: false

class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest$RejectAllTestsFilter
fields: {}
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            boolean JUnit38ClassRunnerTest$RejectAllTestsFilter.shouldRun(Description) 
            JUnit38ClassRunnerTest$RejectAllTestsFilter.<init>() 
            String JUnit38ClassRunnerTest$RejectAllTestsFilter.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 135, column 24]}]}
dummy: false
class org.junit.tests.manipulation.SingleMethodTest$1
fields: {
           org.junit.tests.manipulation.SingleMethodTest* this$0 <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            boolean SingleMethodTest$1.shouldRun(Description) 
            String SingleMethodTest$1.describe() 
            SingleMethodTest$1.<init>(SingleMethodTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 124, column 35]}]}
dummy: false
class java.lang.annotation.Annotation
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.experimental.AssumptionTest$1
fields: {
           org.junit.tests.experimental.AssumptionTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void AssumptionTest$1.testAssumptionFailure(Failure) 
            AssumptionTest$1.<init>(AssumptionTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 53, column 43]}]}
dummy: false
class org.junit.rules.TestRuleTest$MultipleRuleTest$Increment
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement TestRuleTest$MultipleRuleTest$Increment.apply(Statement,Description) 
            TestRuleTest$MultipleRuleTest$Increment.<init>() 
            TestRuleTest$MultipleRuleTest$Increment.<init>(TestRuleTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 99, column 29]}]}
dummy: false
class org.junit.tests.validation.BadlyFormedClassesTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void BadlyFormedClassesTest.constructorException() 
            void BadlyFormedClassesTest.badBeforeMethodWithLegacyRunner() 
            BadlyFormedClassesTest.<init>() 
            String BadlyFormedClassesTest.exceptionMessageFrom(Class) 
            void BadlyFormedClassesTest.noRunnableMethods()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryOnly
fields: {}
statics: {
            java.util.List* strings <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryOnly.<clinit>() 
            WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryOnly.<init>() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryOnly.forItems(Collection)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 24]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$TestClassRunnerIsSortable$DoNotSortMe
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SortableTest$TestClassRunnerIsSortable$DoNotSortMe.c() 
            SortableTest$TestClassRunnerIsSortable$DoNotSortMe.<init>() 
            void SortableTest$TestClassRunnerIsSortable$DoNotSortMe.b() 
            void SortableTest$TestClassRunnerIsSortable$DoNotSortMe.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.NAME_ASCENDING")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 56, column 28]}]}
dummy: false
class org.junit.tests.running.classes.UseSuiteAsASuperclassTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UseSuiteAsASuperclassTest.ensureTestsAreRun() 
            UseSuiteAsASuperclassTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.tests.assertion.AllAssertionTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllAssertionTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.assertion.AssertionTest, org.junit.tests.assertion.ComparisonFailureTest, org.junit.tests.assertion.MultipleFailureExceptionTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$TestA
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuiteTest$TestA.pass() 
            SuiteTest$TestA.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$B
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoryTest$B.c() 
            CategoryTest$B.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="org.junit.experimental.categories.CategoryTest$SlowTests")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 79, column 24]}]}
dummy: false

class org.junit.rules.ExpectedExceptionTest$ThrowNoExceptionButExpectExceptionWithType
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$ThrowNoExceptionButExpectExceptionWithType.<init>() 
            void ExpectedExceptionTest$ThrowNoExceptionButExpectExceptionWithType.doesntThrowNullPointerException()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 169, column 24]}]}
dummy: false
class org.junit.rules.NameRulesTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            NameRulesTest.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$1
fields: {
           java.lang.StringBuffer* val$log <_final> 
           org.junit.tests.junit3compatibility.ForwardCompatibilityTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.TestListener
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityTest$1.<init>(ForwardCompatibilityTest,StringBuffer) 
            void ForwardCompatibilityTest$1.addError(Test,Throwable) 
            void ForwardCompatibilityTest$1.addFailure(Test,AssertionFailedError) 
            void ForwardCompatibilityTest$1.startTest(Test) 
            void ForwardCompatibilityTest$1.endTest(Test)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 79, column 46]}]}
dummy: false
class org.junit.runner.notification.RunNotifier$7
fields: {
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           org.junit.runner.notification.Failure* val$failure <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier$SafeNotifier
         }
objc_protocols: {}
methods: {
            RunNotifier$7.<init>(RunNotifier,Failure) 
            void RunNotifier$7.notifyListener(RunListener)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 192, column 27]}]}
dummy: false
class org.junit.runner.manipulation.Filter$2
fields: {
           org.junit.runner.Description* val$desiredDescription <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            boolean Filter$2.shouldRun(Description) 
            Filter$2.<init>(Description) 
            String Filter$2.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 48, column 28]}]}
dummy: false
class junit.tests.AllTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTests.<init>() 
            void AllTests.main(String[]) 
            Test AllTests.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeout$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.builders.AnnotatedBuilder
fields: {
           org.junit.runners.model.RunnerBuilder* suiteBuilder <_final> 
           java.util.Set* parents <_final>
         }
statics: {
            java.lang.String* CONSTRUCTOR_ERROR_FORMAT <_final>
          }
supers: {
           class org.junit.runners.model.RunnerBuilder
         }
objc_protocols: {}
methods: {
            AnnotatedBuilder.<init>(RunnerBuilder) 
            Runner AnnotatedBuilder.buildRunner(Class,Class) 
            Class AnnotatedBuilder.getEnclosingClassForNonStaticMemberClass(Class) 
            Runner AnnotatedBuilder.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.experimental.max.AllMaxTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllMaxTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.experimental.max.DescriptionTest, org.junit.tests.experimental.max.JUnit38SortingTest, org.junit.tests.experimental.max.MaxStarterTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.runner.notification.RunNotifier$SafeNotifier
fields: {
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RunNotifier$SafeNotifier.run() 
            RunNotifier$SafeNotifier.<init>(RunNotifier,List) 
            RunNotifier$SafeNotifier.<init>(RunNotifier) 
            void RunNotifier$SafeNotifier.notifyListener(RunListener)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 55, column 27]}]}
dummy: false
class org.junit.ComparisonFailure$ComparisonCompactor
fields: {
           java.lang.String* actual <_final> 
           java.lang.String* expected <_final> 
           int contextLength <_final>
         }
statics: {
            java.lang.String* DIFF_START <_final> 
            java.lang.String* ELLIPSIS <_final> 
            java.lang.String* DIFF_END <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String ComparisonFailure$ComparisonCompactor.sharedPrefix() 
            ComparisonFailure$ComparisonCompactor.<init>(int,String,String) 
            int ComparisonFailure$ComparisonCompactor.access$500(ComparisonFailure$ComparisonCompactor) 
            String ComparisonFailure$ComparisonCompactor.access$200(ComparisonFailure$ComparisonCompactor,String) 
            String ComparisonFailure$ComparisonCompactor.access$400(ComparisonFailure$ComparisonCompactor) 
            String ComparisonFailure$ComparisonCompactor.access$100(ComparisonFailure$ComparisonCompactor) 
            String ComparisonFailure$ComparisonCompactor.compact(String) 
            String ComparisonFailure$ComparisonCompactor.sharedSuffix(String) 
            String ComparisonFailure$ComparisonCompactor.access$300(ComparisonFailure$ComparisonCompactor)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 70, column 25]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest
fields: {
           java.util.List* errors <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleMemberValidatorTest.rejectNonStaticClassRule() 
            void RuleMemberValidatorTest.rejectMethodStaticTestRule() 
            void RuleMemberValidatorTest.rejectStaticTestRule() 
            void RuleMemberValidatorTest.rejectClassRuleThatReturnsImplementationOfMethodRule() 
            void RuleMemberValidatorTest.methodRejectProtectedClassRule() 
            void RuleMemberValidatorTest.rejectClassRuleInNonPublicClass() 
            void RuleMemberValidatorTest.methodAcceptMethodRuleMethod() 
            void RuleMemberValidatorTest.assertOneErrorWithMessage(String) 
            void RuleMemberValidatorTest.acceptMethodRule() 
            RuleMemberValidatorTest.<init>() 
            void RuleMemberValidatorTest.rejectClassRuleMethodReturnsAnArbitraryObject() 
            void RuleMemberValidatorTest.acceptMethodStaticTestRuleThatIsAlsoClassRule() 
            void RuleMemberValidatorTest.acceptStaticTestRuleThatIsAlsoClassRule() 
            void RuleMemberValidatorTest.rejectMethodStaticMethodRule() 
            void RuleMemberValidatorTest.rejectStaticMethodRule() 
            void RuleMemberValidatorTest.rejectClassRuleIsAnArbitraryObject() 
            void RuleMemberValidatorTest.methodRejectNonStaticClassRule() 
            void RuleMemberValidatorTest.rejectClassRuleThatIsImplementationOfMethodRule() 
            void RuleMemberValidatorTest.methodRejectArbitraryObjectWithRuleAnnotation() 
            void RuleMemberValidatorTest.assertNumberOfErrors(int) 
            void RuleMemberValidatorTest.rejectArbitraryObjectWithRuleAnnotation() 
            void RuleMemberValidatorTest.acceptNonStaticTestRule() 
            void RuleMemberValidatorTest.acceptMethodNonStaticTestRule() 
            void RuleMemberValidatorTest.rejectProtectedClassRule()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class org.junit.runner.notification.RunNotifier$4
fields: {
           org.junit.runner.Description* val$description <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier$SafeNotifier
         }
objc_protocols: {}
methods: {
            void RunNotifier$4.notifyListener(RunListener) 
            RunNotifier$4.<init>(RunNotifier,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 135, column 27]}]}
dummy: false
class org.junit.AssumptionViolatedException
fields: {
           org.hamcrest.Matcher* fMatcher <_final> 
           java.lang.String* fAssumption <_final> 
           _Bool fValueMatcher <_final> 
           java.lang.Object* fValue <_final>
         }
statics: {
            long serialVersionUID <_final> 
            long serialVersionUID <_final>
          }
supers: {
           class org.junit.internal.AssumptionViolatedException
         }
objc_protocols: {}
methods: {
            AssumptionViolatedException.<init>(String) 
            AssumptionViolatedException.<init>(String,Throwable) 
            AssumptionViolatedException.<init>(String,Object,Matcher) 
            AssumptionViolatedException.<init>(Object,Matcher)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$RunClassAsCategory
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$RunClassAsCategory.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoryTest$ClassAsCategory") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$OneMoreTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 405, column 24]}]}
dummy: false
class junit.extensions.RepeatedTest
fields: {
           int fTimesRepeat <> 
           junit.framework.Test* fTest <>
         }
statics: {}
supers: {
           class junit.extensions.TestDecorator
         }
objc_protocols: {}
methods: {
            void RepeatedTest.run(TestResult) 
            RepeatedTest.<init>(Test,int) 
            int RepeatedTest.countTestCases() 
            String RepeatedTest.toString()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.runners.model.NoGenericTypeParametersValidator
fields: {
           java.lang.reflect.Method* method <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void NoGenericTypeParametersValidator.validateNoTypeParameterOnParameterizedType(ParameterizedType,List) 
            NoGenericTypeParametersValidator.<init>(Method) 
            void NoGenericTypeParametersValidator.validateNoTypeParameterOnGenericArrayType(GenericArrayType,List) 
            void NoGenericTypeParametersValidator.validateNoTypeParameterOnWildcardType(WildcardType,List) 
            void NoGenericTypeParametersValidator.validateNoTypeParameterOnType(Type,List) 
            void NoGenericTypeParametersValidator.validate(List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.ExpectedException
fields: {
           org.junit.rules.ExpectedExceptionMatcherBuilder* matcherBuilder <_final> 
           java.lang.String* missingExceptionMessage <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            void ExpectedException.handleException(Throwable) 
            ExpectedException ExpectedException.none() 
            void ExpectedException.expect(Matcher) 
            void ExpectedException.expect(Class) 
            void ExpectedException.access$000(ExpectedException,Throwable) 
            ExpectedException ExpectedException.handleAssumptionViolatedExceptions() 
            ExpectedException.<init>() 
            void ExpectedException.expectCause(Matcher) 
            void ExpectedException.access$100(ExpectedException) 
            Statement ExpectedException.apply(Statement,Description) 
            ExpectedException ExpectedException.handleAssertionErrors() 
            void ExpectedException.expectMessage(Matcher) 
            void ExpectedException.expectMessage(String) 
            boolean ExpectedException.isAnyExceptionExpected() 
            String ExpectedException.missingExceptionMessage() 
            ExpectedException ExpectedException.reportMissingExceptionWithMessage(String) 
            void ExpectedException.failDueToMissingException()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 111, column 13]}]}
dummy: false
class java.net.URL
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.junit3compatibility.SuiteMethodTest
fields: {}
statics: {
            _Bool wasRun <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuiteMethodTest.makeSureSuiteWorksWithJUnit4Classes() 
            void SuiteMethodTest.suiteIsUsedWithJUnit4Classes() 
            SuiteMethodTest.<init>() 
            void SuiteMethodTest.descriptionAndRunNotificationsAreConsistent() 
            void SuiteMethodTest.makeSureSuiteNotUsedWithJUnit4Classes2() 
            void SuiteMethodTest.makeSureSuiteIsCalled()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.internal.runners.JUnit4ClassRunner$1
fields: {
           org.junit.runner.notification.RunNotifier* val$notifier <_final> 
           org.junit.internal.runners.JUnit4ClassRunner* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.lang.Runnable
         }
objc_protocols: {}
methods: {
            JUnit4ClassRunner$1.<init>(JUnit4ClassRunner,RunNotifier) 
            void JUnit4ClassRunner$1.run()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 78]}]}
dummy: false
class java.util.SortedSet
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.ExpectedExceptionMatcherBuilder
fields: {
           java.util.List* matchers <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            boolean ExpectedExceptionMatcherBuilder.expectsThrowable() 
            void ExpectedExceptionMatcherBuilder.add(Matcher) 
            ExpectedExceptionMatcherBuilder.<init>() 
            Matcher ExpectedExceptionMatcherBuilder.cast(Matcher) 
            Matcher ExpectedExceptionMatcherBuilder.build() 
            Matcher ExpectedExceptionMatcherBuilder.allOfTheMatchers() 
            List ExpectedExceptionMatcherBuilder.castedMatchers()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters$RunBeforeParams
fields: {
           org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters* this$0 <_final> 
           java.util.List* befores <_final> 
           java.lang.Object* target <_final> 
           org.junit.runners.model.Statement* next <_final>
         }
statics: {}
supers: {
           class org.junit.internal.runners.statements.RunBefores
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerWithParameters$RunBeforeParams.invokeMethod(FrameworkMethod) 
            BlockJUnit4ClassRunnerWithParameters$RunBeforeParams.<init>(BlockJUnit4ClassRunnerWithParameters,Statement,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 160, column 18]}]}
dummy: false
class org.junit.experimental.theories.PotentialAssignment
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String PotentialAssignment.getDescription() 
            PotentialAssignment PotentialAssignment.forValue(String,Object) 
            PotentialAssignment.<init>() 
            Object PotentialAssignment.getValue()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.runners.ParentRunner$3
fields: {
           org.junit.runners.ParentRunner* this$0 <_final> 
           org.junit.runners.model.Statement* val$statement <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            ParentRunner$3.<init>(ParentRunner,Statement) 
            void ParentRunner$3.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 302, column 31]}]}
dummy: false
class org.junit.tests.running.classes.parent.ParentRunnerClassLoaderTest
fields: {}
statics: {
            _Bool $assertionsDisabled <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParentRunnerClassLoaderTest.<clinit>() 
            Class ParentRunnerClassLoaderTest.wrapToClassLoader(Class) 
            void ParentRunnerClassLoaderTest.testDescriptionContainCorrectTestClass() 
            ParentRunnerClassLoaderTest.<init>() 
            void ParentRunnerClassLoaderTest.runTestWithParentRunner(Class) 
            void ParentRunnerClassLoaderTest.testClassRuleAccessToClassInAnotherClassLoader() 
            void ParentRunnerClassLoaderTest.testBackwardCompatibilityWithOverrideGetName()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class org.junit.runners.RuleContainerTest$Rule
fields: {}
statics: {
            org.junit.runners.RuleContainerTest$Rule* A <_final> 
            org.junit.runners.RuleContainerTest$Rule* C <_final> 
            org.junit.runners.RuleContainerTest$Rule* B <_final> 
            org.junit.runners.RuleContainerTest$Rule*[_*_](*) $VALUES <_final>
          }
supers: {
           class java.lang.Enum 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            void RuleContainerTest$Rule.<clinit>() 
            Statement RuleContainerTest$Rule.apply(Statement,Description) 
            RuleContainerTest$Rule[] RuleContainerTest$Rule.$values() 
            RuleContainerTest$Rule RuleContainerTest$Rule.valueOf(String) 
            RuleContainerTest$Rule[] RuleContainerTest$Rule.values() 
            RuleContainerTest$Rule.<init>(String,int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 17]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields$DataPointFieldsMustBePublic
fields: {}
statics: {
            int FIVE <_org.junit.experimental.theories.DataPoint> 
            int THREE <_org.junit.experimental.theories.DataPoint> 
            int[_*_](*) THREES <_org.junit.experimental.theories.DataPoints> 
            int[_*_](*) FIVES <_org.junit.experimental.theories.DataPoints> 
            int[_*_](*) FOURS <_org.junit.experimental.theories.DataPoints> 
            int FOUR <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UnsuccessfulWithDataPointFields$DataPointFieldsMustBePublic.<clinit>() 
            void UnsuccessfulWithDataPointFields$DataPointFieldsMustBePublic.numbers(int) 
            UnsuccessfulWithDataPointFields$DataPointFieldsMustBePublic.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 155, column 24]}]}
dummy: false

class org.junit.rules.ExpectedExceptionTest$UseCustomMessageWithoutPlaceHolder
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$UseCustomMessageWithoutPlaceHolder.<init>() 
            void ExpectedExceptionTest$UseCustomMessageWithoutPlaceHolder.noThrow()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 359, column 24]}]}
dummy: false
class junit.tests.runner.ResultTest$ResultWithFixedRunTime
fields: {
           org.junit.runner.Result* delegate <_final> 
           java.util.concurrent.atomic.AtomicInteger* ignoreCount <_final> 
           java.util.concurrent.atomic.AtomicLong* startTime <_final> 
           java.util.concurrent.atomic.AtomicInteger* count <_final> 
           java.util.concurrent.CopyOnWriteArrayList* failures <_final> 
           org.junit.runner.Result$SerializedForm* serializedForm <> 
           java.util.concurrent.atomic.AtomicInteger* assumptionFailureCount <_final> 
           java.util.concurrent.atomic.AtomicLong* runTime <_final>
         }
statics: {
            long serialVersionUID <_final> 
            java.io.ObjectStreamField*[_*_](*) serialPersistentFields <_final> 
            long serialVersionUID <_final>
          }
supers: {
           class org.junit.runner.Result
         }
objc_protocols: {}
methods: {
            int ResultTest$ResultWithFixedRunTime.getFailureCount() 
            int ResultTest$ResultWithFixedRunTime.getRunCount() 
            int ResultTest$ResultWithFixedRunTime.getIgnoreCount() 
            long ResultTest$ResultWithFixedRunTime.getRunTime() 
            List ResultTest$ResultWithFixedRunTime.getFailures() 
            int ResultTest$ResultWithFixedRunTime.getAssumptionFailureCount() 
            ResultTest$ResultWithFixedRunTime.<init>(Result)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 110, column 25]}]}
dummy: false
class org.junit.tests.experimental.theories.PotentialAssignmentTest$2
fields: {
           org.junit.tests.experimental.theories.PotentialAssignmentTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String PotentialAssignmentTest$2.toString() 
            PotentialAssignmentTest$2.<init>(PotentialAssignmentTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 36]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$TestMethodWithNonStaticTestRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestMethodWithNonStaticTestRule.<init>() 
            TestRule RuleMemberValidatorTest$TestMethodWithNonStaticTestRule.getTemporaryFolder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 276, column 24]}]}
dummy: false

class org.junit.validator.AnnotationsValidatorTest$AnnotationValidatorMethodTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationsValidatorTest$AnnotationValidatorMethodTest.<init>() 
            void AnnotationsValidatorTest$AnnotationValidatorMethodTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 48, column 24]}]}
dummy: false
class org.junit.rules.MethodRulesTest$HasMethodReturningMethodRule$1$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.MethodRulesTest$HasMethodReturningMethodRule$1* this$1 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$HasMethodReturningMethodRule$1$1.evaluate() 
            MethodRulesTest$HasMethodReturningMethodRule$1$1.<init>(MethodRulesTest$HasMethodReturningMethodRule$1,Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 310, column 39]}]}
dummy: false
class org.junit.tests.manipulation.SingleMethodTest$OneTimeSetup
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SingleMethodTest$OneTimeSetup.<init>() 
            void SingleMethodTest$OneTimeSetup.two() 
            void SingleMethodTest$OneTimeSetup.one() 
            void SingleMethodTest$OneTimeSetup.once()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 30, column 24]}]}
dummy: false
class org.junit.internal.StackTracesTest
fields: {}
statics: {
            java.lang.String* EOL <_final> 
            java.util.concurrent.ExecutorService* executorService <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void StackTracesTest.<clinit>() 
            StackTracesTest$StringMatcher StackTracesTest.framesTrimmed() 
            void StackTracesTest.shutDownExecutorService() 
            void StackTracesTest.getTrimmedStackForJUnit4TestFailingInMethodRule() 
            void StackTracesTest.getTrimmedStackForJUnit3TestFailingInTestMethod() 
            void StackTracesTest.assertHasTrimmedTrace(Failure,StackTracesTest$StringMatcher[]) 
            void StackTracesTest.getTrimmedStackForJUnit4TestFailingInTestMethodWithCause() 
            StackTracesTest$StringMatcher StackTracesTest.message(String) 
            StackTracesTest.<init>() 
            void StackTracesTest.getTrimmedStackForJUnit4TestFailingInTestRule() 
            StackTracesTest$StringMatcher StackTracesTest.framesInCommon() 
            void StackTracesTest.getTrimmedStackForJUnit4TestFailingInTestMethod() 
            void StackTracesTest.getTrimmedStackWithSuppressedExceptions() 
            Result StackTracesTest.runTest(Class) 
            void StackTracesTest.getTrimmedStackForJUnit3TestFailingInSetupMethod() 
            void StackTracesTest.getTrimmedStackForJUnit4TestFailingInBeforeMethod() 
            StackTracesTest$StringMatcher StackTracesTest.at(String) 
            void StackTracesTest.getTrimmedStackForJUnit4TestFailingInClassRule() 
            void StackTracesTest.startExecutorService()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 30, column 13]}]}
dummy: false
class org.junit.rules.TestWatcher$1
fields: {
           org.junit.runner.Description* val$description <_final> 
           org.junit.rules.TestWatcher* this$0 <_final> 
           org.junit.runners.model.Statement* val$base <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            TestWatcher$1.<init>(TestWatcher,Description,Statement) 
            void TestWatcher$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 54, column 31]}]}
dummy: false

class org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest$ClassRuleWithIgnoredTest
fields: {}
statics: {
            org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest$BrokenRule* brokenRule <_org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassLevelMethodsWithIgnoredTestsTest$ClassRuleWithIgnoredTest.<clinit>() 
            ClassLevelMethodsWithIgnoredTestsTest$ClassRuleWithIgnoredTest.<init>() 
            void ClassLevelMethodsWithIgnoredTestsTest$ClassRuleWithIgnoredTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 128, column 24]}]}
dummy: false
class org.junit.tests.running.methods.TestMethodTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            List TestMethodTest.validateAllMethods(Class) 
            void TestMethodTest.overloaded() 
            void TestMethodTest.validateInheritedMethods() 
            void TestMethodTest.onlyIgnoredMethodsIsStillFineTestClass() 
            TestMethodTest.<init>() 
            void TestMethodTest.ignoreRunner() 
            void TestMethodTest.constructorParameter() 
            void TestMethodTest.testFailures() 
            void TestMethodTest.dontValidateShadowedMethods() 
            void TestMethodTest.compatibility()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 13]}]}
dummy: false
class org.junit.tests.experimental.parallel.ParallelMethodTest$Example
fields: {}
statics: {
            java.util.concurrent.CountDownLatch* fSynchronizer <_volatile>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParallelMethodTest$Example.<init>() 
            void ParallelMethodTest$Example.two() 
            void ParallelMethodTest$Example.one() 
            void ParallelMethodTest$Example.init()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 24, column 24]}]}
dummy: false
class java.util.IdentityHashMap
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.hamcrest.core.StringContains
fields: {
           java.lang.String* substring <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.core.SubstringMatcher
         }
objc_protocols: {}
methods: {
            Matcher StringContains.containsString(String) 
            StringContains.<init>(String) 
            String StringContains.relationship() 
            boolean StringContains.evalSubstringOf(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.description.TestDescriptionMethodNameTest
fields: {
           java.lang.String* methodName <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Collection TestDescriptionMethodNameTest.getMethodNames() 
            TestDescriptionMethodNameTest.<init>(String) 
            void TestDescriptionMethodNameTest.methodNameTest()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class org.junit.tests.experimental.results.PrintableResultTest$1
fields: {
           java.lang.String* val$stackTraceClassName <_final> 
           org.junit.tests.experimental.results.PrintableResultTest* this$0 <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Throwable
         }
objc_protocols: {}
methods: {
            StackTraceElement[] PrintableResultTest$1.getStackTrace() 
            PrintableResultTest$1.<init>(PrintableResultTest,String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 24, column 74]}]}
dummy: false
class org.junit.validator.AnnotationValidatorFactory
fields: {}
statics: {
            java.util.concurrent.ConcurrentHashMap* VALIDATORS_FOR_ANNOTATION_TYPES <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationValidatorFactory.<clinit>() 
            AnnotationValidatorFactory.<init>() 
            AnnotationValidator AnnotationValidatorFactory.createAnnotationValidator(ValidateWith)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false
class org.junit.tests.running.classes.ParameterizedTestTest$EmptyTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParameterizedTestTest$EmptyTest.<init>() 
            void ParameterizedTestTest$EmptyTest.after() 
            void ParameterizedTestTest$EmptyTest.before()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 490, column 24]}]}
dummy: false

class org.junit.tests.manipulation.SingleMethodTest$ParameterizedOneTimeBeforeClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            List SingleMethodTest$ParameterizedOneTimeBeforeClass.params() 
            void SingleMethodTest$ParameterizedOneTimeBeforeClass.one() 
            SingleMethodTest$ParameterizedOneTimeBeforeClass.<init>(int) 
            void SingleMethodTest$ParameterizedOneTimeBeforeClass.once()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 81, column 24]}]}
dummy: false
class org.junit.runners.Parameterized
fields: {
           java.util.List* runners <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.Suite
         }
objc_protocols: {}
methods: {
            void Parameterized.validateBeforeParamAndAfterParamMethods(Integer) 
            void Parameterized.validatePublicStaticVoidMethods(Class,Integer,List) 
            Parameterized.<init>(Class,Parameterized$RunnersFactory) 
            Parameterized.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 205, column 13]}]}
dummy: false

class org.junit.runners.CustomBlockJUnit4ClassRunnerTest$CustomBlockJUnit4ClassRunner
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            Statement CustomBlockJUnit4ClassRunnerTest$CustomBlockJUnit4ClassRunner.methodBlock(FrameworkMethod) 
            CustomBlockJUnit4ClassRunnerTest$CustomBlockJUnit4ClassRunner.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 48, column 22]}]}
dummy: false

class org.junit.internal.runners.statements.ExpectExceptionTest$AssumptionViolatedExceptionSubclass
fields: {
           org.hamcrest.Matcher* fMatcher <_final> 
           java.lang.String* fAssumption <_final> 
           _Bool fValueMatcher <_final> 
           java.lang.Object* fValue <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class org.junit.internal.AssumptionViolatedException
         }
objc_protocols: {}
methods: {
            ExpectExceptionTest$AssumptionViolatedExceptionSubclass.<init>(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 83, column 25]}]}
dummy: false
class java.io.ByteArrayInputStream
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.ClassRulesTest$ClassRuleOrdering
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$ClassRuleOrdering.foo() 
            void ClassRulesTest$ClassRuleOrdering.bar() 
            TestRule ClassRulesTest$ClassRuleOrdering.a() 
            ClassRulesTest$ClassRuleOrdering.<init>() 
            TestRule ClassRulesTest$ClassRuleOrdering.z()
          }
exported_obj_methods: {}
annots: {<_org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.NAME_ASCENDING")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 256, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$BeforeParamAndAfterParamError
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParameterizedTestTest$BeforeParamAndAfterParamError.<init>(String) 
            void ParameterizedTestTest$BeforeParamAndAfterParamError.afterParam() 
            void ParameterizedTestTest$BeforeParamAndAfterParamError.beforeParam(String) 
            void ParameterizedTestTest$BeforeParamAndAfterParamError.test() 
            Collection ParameterizedTestTest$BeforeParamAndAfterParamError.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 422, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$BeforesAndAfters
fields: {
           org.junit.rules.TestRule* watcher <_org.junit.Rule>
         }
statics: {
            java.lang.StringBuilder* watchedLog <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$BeforesAndAfters.<clinit>() 
            StringBuilder TestRuleTest$BeforesAndAfters.access$300() 
            TestRuleTest$BeforesAndAfters.<init>() 
            void TestRuleTest$BeforesAndAfters.after() 
            void TestRuleTest$BeforesAndAfters.before() 
            void TestRuleTest$BeforesAndAfters.succeeds() 
            StringBuilder TestRuleTest$BeforesAndAfters.access$302(StringBuilder)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 147, column 24]}]}
dummy: false
class java.util.LinkedList
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.Exception
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.TestRuleTest$SonOfExampleTest
fields: {
           org.junit.rules.TestRule* example <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.rules.TestRuleTest$ExampleTest
         }
objc_protocols: {}
methods: {
            TestRuleTest$SonOfExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 85, column 24]}]}
dummy: false
class org.junit.rules.ErrorCollector
fields: {
           java.util.List* errors <>
         }
statics: {}
supers: {
           class org.junit.rules.Verifier
         }
objc_protocols: {}
methods: {
            void ErrorCollector.addError(Throwable) 
            void ErrorCollector.checkThat(String,Object,Matcher) 
            void ErrorCollector.checkThrows(Class,ThrowingRunnable) 
            void ErrorCollector.verify() 
            ErrorCollector.<init>() 
            Object ErrorCollector.checkSucceeds(Callable) 
            void ErrorCollector.checkThat(Object,Matcher)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 13]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$AdditionTestWithArray
fields: {
           int firstSummand <_org.junit.runners.Parameterized$Parameter> 
           int sum <_org.junit.runners.Parameterized$Parameter> 
           int secondSummand <_org.junit.runners.Parameterized$Parameter>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Object[][] ParameterizedTestTest$AdditionTestWithArray.data() 
            ParameterizedTestTest$AdditionTestWithArray.<init>() 
            void ParameterizedTestTest$AdditionTestWithArray.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 587, column 24]}]}
dummy: false

class org.junit.rules.TestWatcherTest$Callbacks$InternalViolatedAssumptionTest
fields: {
           org.junit.rules.TestRule* watcher <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWatcherTest$Callbacks$InternalViolatedAssumptionTest.<init>() 
            void TestWatcherTest$Callbacks$InternalViolatedAssumptionTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 158, column 28]}]}
dummy: false
class org.junit.runner.notification.RunNotifier
fields: {
           java.util.List* listeners <_final> 
           _Bool pleaseStop <_volatile>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RunNotifier.fireTestFailures(List,List) 
            void RunNotifier.fireTestStarted(Description) 
            void RunNotifier.fireTestRunStarted(Description) 
            void RunNotifier.fireTestSuiteFinished(Description) 
            void RunNotifier.pleaseStop() 
            void RunNotifier.fireTestAssumptionFailed(Failure) 
            RunNotifier.<init>() 
            void RunNotifier.removeListener(RunListener) 
            RunListener RunNotifier.wrapIfNotThreadSafe(RunListener) 
            List RunNotifier.access$000(RunNotifier) 
            void RunNotifier.addListener(RunListener) 
            void RunNotifier.fireTestFailure(Failure) 
            void RunNotifier.fireTestRunFinished(Result) 
            void RunNotifier.access$100(RunNotifier,List,List) 
            void RunNotifier.fireTestFinished(Description) 
            void RunNotifier.addFirstListener(RunListener) 
            void RunNotifier.fireTestSuiteStarted(Description) 
            void RunNotifier.fireTestIgnored(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.MethodSorter$1
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int MethodSorter$1.compare(Object,Object) 
            MethodSorter$1.<init>() 
            int MethodSorter$1.compare(Method,Method)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 78]}]}
dummy: false
class org.junit.runner.RunnerSpy
fields: {
           java.lang.Class* invokedTestClass <> 
           org.junit.runners.model.RunnerBuilder* invokedRunnerBuilder <>
         }
statics: {
            org.junit.runner.Description* DESCRIPTION <_final>
          }
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void RunnerSpy.<clinit>() 
            void RunnerSpy.run(RunNotifier) 
            Description RunnerSpy.getDescription() 
            RunnerSpy.<init>(Class) 
            RunnerBuilder RunnerSpy.getInvokedRunnerBuilder() 
            Class RunnerSpy.getInvokedTestClass() 
            RunnerSpy.<init>(Class,RunnerBuilder)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.TestWatcher
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            void TestWatcher.access$200(TestWatcher,AssumptionViolatedException,Description,List) 
            void TestWatcher.succeeded(Description) 
            void TestWatcher.skippedQuietly(AssumptionViolatedException,Description,List) 
            void TestWatcher.starting(Description) 
            void TestWatcher.finishedQuietly(Description,List) 
            void TestWatcher.skipped(AssumptionViolatedException,Description) 
            TestWatcher.<init>() 
            void TestWatcher.startingQuietly(Description,List) 
            void TestWatcher.access$100(TestWatcher,Description,List) 
            void TestWatcher.access$300(TestWatcher,Throwable,Description,List) 
            Statement TestWatcher.apply(Statement,Description) 
            void TestWatcher.failed(Throwable,Description) 
            void TestWatcher.succeededQuietly(Description,List) 
            void TestWatcher.access$000(TestWatcher,Description,List) 
            void TestWatcher.finished(Description) 
            void TestWatcher.failedQuietly(Throwable,Description,List) 
            void TestWatcher.skipped(AssumptionViolatedException,Description) 
            void TestWatcher.access$400(TestWatcher,Description,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.internal.runners.model.ReflectiveCallable
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Object ReflectiveCallable.runReflectiveCall() 
            ReflectiveCallable.<init>() 
            Object ReflectiveCallable.run()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryClass
fields: {}
statics: {
            java.lang.String* item <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryClass.<clinit>() 
            WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryClass.<init>() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryClass.forItem(Object)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 150, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.TheoryTestUtils
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            List TheoryTestUtils.potentialAssignments(Method) 
            Result TheoryTestUtils.runTheoryClass(Class) 
            TheoryTestUtils.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$TestWithOneThrowingTestMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SampleJUnit4Tests$TestWithOneThrowingTestMethod.<init>() 
            void SampleJUnit4Tests$TestWithOneThrowingTestMethod.alwaysThrows()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$Callbacks$ErroneousTestWatcher
fields: {}
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            void TestWatcherTest$Callbacks$ErroneousTestWatcher.skipped(AssumptionViolatedException,Description) 
            void TestWatcherTest$Callbacks$ErroneousTestWatcher.failed(Throwable,Description) 
            TestWatcherTest$Callbacks$ErroneousTestWatcher.<init>() 
            void TestWatcherTest$Callbacks$ErroneousTestWatcher.finished(Description) 
            void TestWatcherTest$Callbacks$ErroneousTestWatcher.succeeded(Description) 
            void TestWatcherTest$Callbacks$ErroneousTestWatcher.starting(Description) 
            TestWatcherTest$Callbacks$ErroneousTestWatcher.<init>(TestWatcherTest$1) 
            void TestWatcherTest$Callbacks$ErroneousTestWatcher.skipped(AssumptionViolatedException,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 115, column 29]}]}
dummy: false
class junit.framework.TestCase
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.Assert 
           class junit.framework.Test
         }
objc_protocols: {}
methods: {
            void TestCase.assertEquals(String,long,long) 
            void TestCase.run(TestResult) 
            void TestCase.setUp() 
            void TestCase.assertEquals(String,short,short) 
            void TestCase.setName(String) 
            void TestCase.assertEquals(byte,byte) 
            void TestCase.assertTrue(String,boolean) 
            void TestCase.assertEquals(String,byte,byte) 
            void TestCase.fail(String) 
            void TestCase.assertEquals(double,double,double) 
            void TestCase.failNotSame(String,Object,Object) 
            TestCase.<init>(String) 
            void TestCase.assertNotNull(Object) 
            void TestCase.assertEquals(String,boolean,boolean) 
            void TestCase.assertEquals(Object,Object) 
            void TestCase.runBare() 
            void TestCase.tearDown() 
            void TestCase.assertNotNull(String,Object) 
            void TestCase.assertEquals(String,double,double,double) 
            String TestCase.getName() 
            void TestCase.assertEquals(short,short) 
            TestCase.<init>() 
            void TestCase.assertFalse(String,boolean) 
            TestResult TestCase.createResult() 
            void TestCase.assertEquals(String,char,char) 
            void TestCase.assertEquals(String,Object,Object) 
            void TestCase.assertEquals(long,long) 
            int TestCase.countTestCases() 
            void TestCase.failSame(String) 
            void TestCase.assertEquals(String,float,float,float) 
            void TestCase.assertSame(Object,Object) 
            String TestCase.toString() 
            void TestCase.fail() 
            String TestCase.format(String,Object,Object) 
            void TestCase.runTest() 
            void TestCase.assertEquals(String,int,int) 
            void TestCase.assertEquals(char,char) 
            TestResult TestCase.run() 
            void TestCase.assertFalse(boolean) 
            void TestCase.failNotEquals(String,Object,Object) 
            void TestCase.assertEquals(float,float,float) 
            void TestCase.assertSame(String,Object,Object) 
            void TestCase.assertNull(Object) 
            void TestCase.assertTrue(boolean) 
            void TestCase.assertEquals(String,String) 
            void TestCase.assertNull(String,Object) 
            void TestCase.assertEquals(int,int) 
            void TestCase.assertEquals(String,String,String) 
            void TestCase.assertEquals(boolean,boolean) 
            void TestCase.assertNotSame(String,Object,Object) 
            void TestCase.assertNotSame(Object,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$MethodTestWithMethodRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MethodRule RuleMemberValidatorTest$MethodTestWithMethodRule.getTemporaryFolder() 
            RuleMemberValidatorTest$MethodTestWithMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 316, column 24]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$UnsortableRunnersAreHandledWithoutCrashing$Unsortable
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SortableTest$UnsortableRunnersAreHandledWithoutCrashing$Unsortable.<init>() 
            void SortableTest$UnsortableRunnersAreHandledWithoutCrashing$Unsortable.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.manipulation.SortableTest$UnsortableRunnersAreHandledWithoutCrashing$UnsortableRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 218, column 28]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.TypeMatchingBetweenMultiDataPointsMethod$WithCorrectlyTypedDataPointsMethod
fields: {}
statics: {
            java.lang.String*[_*_](*) correctlyTyped <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TypeMatchingBetweenMultiDataPointsMethod$WithCorrectlyTypedDataPointsMethod.<clinit>() 
            TypeMatchingBetweenMultiDataPointsMethod$WithCorrectlyTypedDataPointsMethod.<init>() 
            void TypeMatchingBetweenMultiDataPointsMethod$WithCorrectlyTypedDataPointsMethod.testTheory(String[]) 
            String[][] TypeMatchingBetweenMultiDataPointsMethod$WithCorrectlyTypedDataPointsMethod.anotherCorrectlyTyped()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 24]}]}
dummy: false
class org.junit.experimental.categories.JavadocTest$SlowTestSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JavadocTest$SlowTestSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.JavadocTest$SlowTests") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.JavadocTest$A, org.junit.experimental.categories.JavadocTest$B")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 24]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$WillTimeOut
fields: {}
statics: {
            _Bool afterWasCalled <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TimeoutTest$WillTimeOut.<clinit>() 
            TimeoutTest$WillTimeOut.<init>() 
            void TimeoutTest$WillTimeOut.after() 
            void TimeoutTest$WillTimeOut.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 258, column 24]}]}
dummy: false
class java.util.AbstractList
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.experimental.categories.CategoryFilterFactoryTest
fields: {
           org.junit.rules.ExpectedException* expectedException <_org.junit.Rule> 
           org.junit.experimental.categories.CategoryFilterFactory* categoryFilterFactory <_final> 
           org.junit.rules.TestName* testName <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoryFilterFactoryTest.shouldThrowException() 
            CategoryFilterFactoryTest.<init>() 
            void CategoryFilterFactoryTest.shouldCreateFilter()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.tests.experimental.results.ResultMatchersTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ResultMatchersTest.hasFailuresHasGoodDescription() 
            ResultMatchersTest.<init>() 
            void ResultMatchersTest.hasFailureContaining_givenResultWithNoFailures() 
            void ResultMatchersTest.hasFailuresDescriptionReflectsInput(int) 
            void ResultMatchersTest.hasFailureContaining_givenResultWithOneFailure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class org.junit.tests.running.classes.ParameterizedTestTest
fields: {}
statics: {
            java.lang.String* fLog <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest.plansNamedCorrectly() 
            void ParameterizedTestTest.meaningfulFailureWhenParametersAreNotAnIterable() 
            void ParameterizedTestTest.beforeParamAndAfterParamAreRun() 
            void ParameterizedTestTest.testsAreExecutedWhenAssumptionInParametersMethodDoesNotFail() 
            void ParameterizedTestTest.providesDataByAnnotatedFields() 
            void ParameterizedTestTest.runsForEverySingleArgumentOfIterable() 
            void ParameterizedTestTest.beforeParamAndAfterParamValidationNumberOfParameters() 
            void ParameterizedTestTest.failuresNamedCorrectly() 
            void ParameterizedTestTest.runsEveryTestOfArray() 
            void ParameterizedTestTest.multipleParametersBeforeParamAndAfterParamAreRun() 
            ParameterizedTestTest.<init>() 
            void ParameterizedTestTest.numberOfFieldsAndParametersShouldMatch() 
            void ParameterizedTestTest.usesParametersRunnerFactoryThatWasSpecifiedByAnnotation() 
            void ParameterizedTestTest.failuresAddedForBadTestMethod() 
            void ParameterizedTestTest.countsRuns() 
            void ParameterizedTestTest.countsFailures() 
            void ParameterizedTestTest.exceptionWhenPrivateConstructor() 
            void ParameterizedTestTest.assertTestCreatesSingleFailureWithMessage(Class,String) 
            void ParameterizedTestTest.multipleBeforeParamAndAfterParamAreRun() 
            void ParameterizedTestTest.testsAreNotExecutedWhenAssumptionInParametersMethodFails() 
            void ParameterizedTestTest.failureOnInitialization() 
            void ParameterizedTestTest.runsForEverySingleArgumentOfCollection() 
            void ParameterizedTestTest.validateClassCatchesNoParameters() 
            void ParameterizedTestTest.usesIndexAsTestName() 
            void ParameterizedTestTest.runsForEverySingleArgumentOfArray() 
            void ParameterizedTestTest.beforeParamAndAfterParamValidation() 
            void ParameterizedTestTest.beforeAndAfterClassAreRun() 
            void ParameterizedTestTest.usesParametersRunnerFactoryThatWasSpecifiedByAnnotationInSuperClass() 
            void ParameterizedTestTest.meaningfulFailureWhenParametersNotPublic() 
            String ParameterizedTestTest.access$084(Object) 
            void ParameterizedTestTest.countBeforeRun()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 40, column 13]}]}
dummy: false
class org.junit.tests.experimental.parallel.AllParallelTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllParallelTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.experimental.parallel.ParallelClassTest, org.junit.tests.experimental.parallel.ParallelMethodTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SuperFieldShadowing$1
fields: {
           org.junit.tests.running.methods.AnnotationTest$SuperFieldShadowing* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            void AnnotationTest$SuperFieldShadowing$1.after() 
            void AnnotationTest$SuperFieldShadowing$1.before() 
            AnnotationTest$SuperFieldShadowing$1.<init>(AnnotationTest$SuperFieldShadowing)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 602, column 60]}]}
dummy: false
class org.junit.tests.running.classes.ThreadsTest
fields: {
           org.junit.runner.JUnitCore* core <> 
           java.util.List* interruptedFlags <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ThreadsTest.currentThreadInterruptedStatusIsClearedAfterEachTestExecution() 
            ThreadsTest.<init>() 
            void ThreadsTest.currentThreadInterruptStatusIsClearedAfterSuiteExecution() 
            List ThreadsTest.access$000(ThreadsTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 13]}]}
dummy: false
class org.junit.runner.notification.StoppedByUserException
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.RuntimeException
         }
objc_protocols: {}
methods: {
            StoppedByUserException.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$ProtectedParametersTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$ProtectedParametersTest.aTest() 
            ParameterizedTestTest$ProtectedParametersTest.<init>() 
            Collection ParameterizedTestTest$ProtectedParametersTest.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 528, column 24]}]}
dummy: false
class org.junit.experimental.results.ResultMatchers
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ResultMatchers.<init>() 
            Matcher ResultMatchers.hasSingleFailureContaining(String) 
            Matcher ResultMatchers.hasFailureContaining(String) 
            Matcher ResultMatchers.hasSingleFailureMatching(Matcher) 
            Matcher ResultMatchers.failureCountIs(int) 
            Matcher ResultMatchers.isSuccessful()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false
class java.util.HashMap
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.hamcrest.core.Is
fields: {
           org.hamcrest.Matcher* matcher <_final>
         }
statics: {}
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            Matcher Is.is(Class) 
            Is.<init>(Matcher) 
            void Is.describeMismatch(Object,Description) 
            boolean Is.matches(Object) 
            Matcher Is.is(Matcher) 
            void Is.describeTo(Description) 
            Matcher Is.isA(Class) 
            Matcher Is.is(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$A
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$A.<init>() 
            void CategoryTest$A.b() 
            void CategoryTest$A.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 66, column 24]}]}
dummy: false
class junit.runner.Version
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Version.<init>() 
            void Version.main(String[]) 
            String Version.id()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.runner.BaseTestRunner
fields: {
           _Bool fLoading <>
         }
statics: {
            _Bool fgFilterStack <> 
            java.lang.String* SUITE_METHODNAME <_final> 
            int fgMaxMessageLength <> 
            java.util.Properties* fPreferences <>
          }
supers: {
           class java.lang.Object 
           class junit.framework.TestListener
         }
objc_protocols: {}
methods: {
            void BaseTestRunner.<clinit>() 
            void BaseTestRunner.readPreferences() 
            void BaseTestRunner.addFailure(Test,AssertionFailedError) 
            void BaseTestRunner.setLoading(boolean) 
            void BaseTestRunner.testFailed(int,Test,Throwable) 
            String BaseTestRunner.processArguments(String[]) 
            void BaseTestRunner.startTest(Test) 
            void BaseTestRunner.setPreferences(Properties) 
            Properties BaseTestRunner.getPreferences() 
            void BaseTestRunner.savePreferences() 
            void BaseTestRunner.endTest(Test) 
            BaseTestRunner.<init>() 
            Class BaseTestRunner.loadSuiteClass(String) 
            String BaseTestRunner.elapsedTimeAsString(long) 
            boolean BaseTestRunner.useReloadingTestSuiteLoader() 
            boolean BaseTestRunner.showStackRaw() 
            int BaseTestRunner.getPreference(String,int) 
            File BaseTestRunner.getPreferencesFile() 
            String BaseTestRunner.getFilteredTrace(String) 
            String BaseTestRunner.extractClassName(String) 
            void BaseTestRunner.clearStatus() 
            Test BaseTestRunner.getTest(String) 
            String BaseTestRunner.truncate(String) 
            void BaseTestRunner.testEnded(String) 
            void BaseTestRunner.setPreference(String,String) 
            String BaseTestRunner.getPreference(String) 
            void BaseTestRunner.addError(Test,Throwable) 
            void BaseTestRunner.runFailed(String) 
            String BaseTestRunner.getFilteredTrace(Throwable) 
            void BaseTestRunner.testStarted(String) 
            boolean BaseTestRunner.filterLine(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 29, column 22]}]}
dummy: false
class junit.extensions.ActiveTestSuite
fields: {
           int fActiveTestDeathCount <_volatile> 
           java.util.Vector* fTests <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestSuite
         }
objc_protocols: {}
methods: {
            void ActiveTestSuite.run(TestResult) 
            ActiveTestSuite.<init>(Class,String) 
            ActiveTestSuite.<init>(String) 
            ActiveTestSuite.<init>() 
            void ActiveTestSuite.waitUntilFinished() 
            ActiveTestSuite.<init>(Class) 
            void ActiveTestSuite.runTest(Test,TestResult) 
            void ActiveTestSuite.runFinished()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.experimental.theories.Theories
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            void Theories.validateTestMethods(List) 
            void Theories.validateDataPointMethods(List) 
            List Theories.computeTestMethods() 
            void Theories.validateParameterSupplier(Class,List) 
            Theories.<init>(TestClass) 
            void Theories.collectInitializationErrors(List) 
            Theories.<init>(Class) 
            void Theories.validateDataPointFields(List) 
            void Theories.validateConstructor(List) 
            Statement Theories.methodBlock(FrameworkMethod)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 71, column 13]}]}
dummy: false
class org.junit.experimental.results.PrintableResult
fields: {
           org.junit.runner.Result* result <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            PrintableResult.<init>(List) 
            int PrintableResult.failureCount() 
            List PrintableResult.failures() 
            PrintableResult PrintableResult.testResult(Class) 
            String PrintableResult.toString() 
            PrintableResult PrintableResult.testResult(Request) 
            PrintableResult.<init>(Result)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 13]}]}
dummy: false
class org.junit.internal.runners.MethodRoadie$1
fields: {
           org.junit.internal.runners.MethodRoadie* this$0 <_final> 
           long val$timeout <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.lang.Runnable
         }
objc_protocols: {}
methods: {
            void MethodRoadie$1.run() 
            MethodRoadie$1.<init>(MethodRoadie,long)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 58, column 52]}]}
dummy: false
class org.junit.experimental.theories.internal.BooleanSupplier
fields: {}
statics: {}
supers: {
           class org.junit.experimental.theories.ParameterSupplier
         }
objc_protocols: {}
methods: {
            List BooleanSupplier.getValueSources(ParameterSignature) 
            BooleanSupplier.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.notification.RunNotifier$1
fields: {
           org.junit.runner.Description* val$description <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier$SafeNotifier
         }
objc_protocols: {}
methods: {
            void RunNotifier$1.notifyListener(RunListener) 
            RunNotifier$1.<init>(RunNotifier,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 88, column 27]}]}
dummy: false
class junit.tests.runner.BaseTestRunnerTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            BaseTestRunnerTest.<init>() 
            void BaseTestRunnerTest.testInvokeSuiteOnNonSubclassOfTestCase() 
            void BaseTestRunnerTest.testInvokeNonStaticSuite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class org.junit.validator.AnnotationsValidator$MethodValidator
fields: {}
statics: {
            org.junit.validator.AnnotationValidatorFactory* ANNOTATION_VALIDATOR_FACTORY <_final>
          }
supers: {
           class org.junit.validator.AnnotationsValidator$AnnotatableValidator
         }
objc_protocols: {}
methods: {
            List AnnotationsValidator$MethodValidator.validateAnnotatable(AnnotationValidator,FrameworkMethod) 
            AnnotationsValidator$MethodValidator.<init>() 
            List AnnotationsValidator$MethodValidator.validateAnnotatable(AnnotationValidator,Annotatable) 
            Iterable AnnotationsValidator$MethodValidator.getAnnotatablesForTestClass(TestClass) 
            AnnotationsValidator$MethodValidator.<init>(AnnotationsValidator$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 92, column 25]}]}
dummy: false
class org.junit.tests.running.methods.TestMethodTest$Confused
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestMethodTest$Confused.a(Object) 
            TestMethodTest$Confused.<init>() 
            void TestMethodTest$Confused.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 213, column 24]}]}
dummy: false
class org.junit.runner.FilterFactoriesTest$DummyFilter
fields: {
           org.junit.runner.Description* fTopLevelDescription <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            Description FilterFactoriesTest$DummyFilter.getTopLevelDescription() 
            boolean FilterFactoriesTest$DummyFilter.shouldRun(Description) 
            String FilterFactoriesTest$DummyFilter.describe() 
            FilterFactoriesTest$DummyFilter.<init>(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 102, column 25]}]}
dummy: false
class org.junit.tests.running.core.SystemExitTest
fields: {}
statics: {
            int EXIT_CODE <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SystemExitTest.failureCausesExitCodeOf1() 
            SystemExitTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 13]}]}
dummy: false
class org.junit.tests.running.classes.RunWithTest$Empty
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RunWithTest$Empty.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.running.classes.RunWithTest$BadRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 78, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$TestRuleOrderingWithMethodRule
fields: {
           org.junit.rules.TestRule* a <_final _org.junit.Rule> 
           org.junit.rules.MethodRule* z <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$TestRuleOrderingWithMethodRule.foo() 
            TestRuleTest$TestRuleOrderingWithMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 589, column 24]}]}
dummy: false
class org.junit.rules.Timeout$Builder
fields: {
           _Bool lookForStuckThread <> 
           long timeout <> 
           java.util.concurrent.TimeUnit* timeUnit <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeUnit Timeout$Builder.getTimeUnit() 
            Timeout$Builder Timeout$Builder.withTimeout(long,TimeUnit) 
            Timeout Timeout$Builder.build() 
            Timeout$Builder.<init>() 
            boolean Timeout$Builder.getLookingForStuckThread() 
            Timeout$Builder Timeout$Builder.withLookingForStuckThread(boolean) 
            long Timeout$Builder.getTimeout()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 170, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithOnlyTestAnnotations$HonorExpectedExceptionPasses
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            WithOnlyTestAnnotations$HonorExpectedExceptionPasses.<init>() 
            void WithOnlyTestAnnotations$HonorExpectedExceptionPasses.shouldThrow()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 33, column 24]}]}
dummy: false
class org.junit.experimental.categories.Categories
fields: {
           java.util.List* runners <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.Suite
         }
objc_protocols: {}
methods: {
            boolean Categories.isAnyExcluded(Class) 
            Categories.<init>(Class,RunnerBuilder) 
            Set Categories.createSet(Class[]) 
            boolean Categories.access$200(Set,Class) 
            Set Categories.getExcludedCategory(Class) 
            Set Categories.access$000(Class) 
            boolean Categories.hasAssignableTo(Set,Class) 
            Set Categories.getIncludedCategory(Class) 
            Set Categories.access$100(Class[]) 
            Set Categories.nullableClassToSet(Class) 
            boolean Categories.isAnyIncluded(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 83, column 13]}]}
dummy: false
class org.junit.runners.Parameterized$Parameter
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            int Parameterized$Parameter.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.FIELD")>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.tests.assertion.AssertionTest$3
fields: {
           java.lang.Throwable* val$t <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.function.ThrowingRunnable
         }
objc_protocols: {}
methods: {
            void AssertionTest$3.run() 
            AssertionTest$3.<init>(Throwable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 999, column 38]}]}
dummy: false

class org.junit.runner.notification.ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest
fields: {
           org.junit.runner.notification.ConcurrentRunNotifierTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest.addListener(ConcurrentRunNotifierTest$ExaminedListener) 
            ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest.<init>(ConcurrentRunNotifierTest) 
            ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest.<init>(ConcurrentRunNotifierTest,ConcurrentRunNotifierTest$1) 
            void ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 87, column 27]}]}
dummy: false
class org.junit.tests.running.core.SystemExitTest$Exit
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SystemExitTest$Exit.<init>() 
            void SystemExitTest$Exit.main(String[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false
class java.lang.Long
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.io.RandomAccessFile
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.rules.RuleMemberValidatorTest$TestWithClassRuleIsImplementationOfMethodRule$1
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestWithClassRuleIsImplementationOfMethodRule$1.<init>() 
            Statement RuleMemberValidatorTest$TestWithClassRuleIsImplementationOfMethodRule$1.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 87, column 62]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ExpectsSubstring
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ExpectsSubstring.throwsMore() 
            ExpectedExceptionTest$ExpectsSubstring.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 189, column 24]}]}
dummy: false
class org.junit.rules.ErrorCollectorTest$CheckCallableThatThrowsAnException
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckCallableThatThrowsAnException.<init>() 
            void ErrorCollectorTest$CheckCallableThatThrowsAnException.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 191, column 24]}]}
dummy: false
class junit.framework.TestSuite$1
fields: {
           java.lang.String* val$message <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestSuite$1.<init>(String,String) 
            void TestSuite$1.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 93, column 39]}]}
dummy: false
class org.junit.runner.manipulation.InvalidOrderingException
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            InvalidOrderingException.<init>(String) 
            InvalidOrderingException.<init>(String,Throwable) 
            InvalidOrderingException.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class org.junit.rules.MethodRulesTest$WatchmanTest$1
fields: {
           org.junit.rules.MethodRulesTest$WatchmanTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatchman
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$WatchmanTest$1.failed(Throwable,FrameworkMethod) 
            void MethodRulesTest$WatchmanTest$1.succeeded(FrameworkMethod) 
            MethodRulesTest$WatchmanTest$1.<init>(MethodRulesTest$WatchmanTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 163, column 56]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields$DataPointMethodsMustBeStatic
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UnsuccessfulWithDataPointFields$DataPointMethodsMustBeStatic.numbers(int) 
            int UnsuccessfulWithDataPointFields$DataPointMethodsMustBeStatic.singleDataPointMethod() 
            UnsuccessfulWithDataPointFields$DataPointMethodsMustBeStatic.<init>() 
            int[] UnsuccessfulWithDataPointFields$DataPointMethodsMustBeStatic.dataPointArrayMethod()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 127, column 24]}]}
dummy: false
class org.junit.FixMethodOrder
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            MethodSorters FixMethodOrder.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.TYPE")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 36, column 18]}]}
dummy: false
class org.junit.runner.RunWith
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            Class RunWith.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.TYPE") _java.lang.annotation.Inherited>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$TestMethodWithStaticMethodRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestMethodWithStaticMethodRule.<init>() 
            MethodRule RuleMemberValidatorTest$TestMethodWithStaticMethodRule.getSomeMethodRule()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 304, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$Unordered
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$Unordered.c() 
            OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$Unordered.<init>() 
            void OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$Unordered.b() 
            void OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$Unordered.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 184, column 28]}]}
dummy: false
class org.junit.runners.model.RunnerBuilder
fields: {
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RunnerBuilder.configureRunner(Runner) 
            Runner RunnerBuilder.safeRunnerForClass(Class) 
            List RunnerBuilder.runners(Class,List) 
            Class RunnerBuilder.addParent(Class) 
            RunnerBuilder.<init>() 
            void RunnerBuilder.removeParent(Class) 
            List RunnerBuilder.runners(Class[]) 
            List RunnerBuilder.runners(Class,Class[]) 
            Runner RunnerBuilder.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithExtendedParameterSources$DataPointArrayToBeUsedForWholeParameter
fields: {}
statics: {
            java.lang.String*[_*_](*) STRINGS <_org.junit.experimental.theories.DataPoint> 
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithExtendedParameterSources$DataPointArrayToBeUsedForWholeParameter.<clinit>() 
            WithExtendedParameterSources$DataPointArrayToBeUsedForWholeParameter.<init>() 
            void WithExtendedParameterSources$DataPointArrayToBeUsedForWholeParameter.addToLog(String[])
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 162, column 24]}]}
dummy: false
class org.junit.rules.TempFolderRuleTest$NameClashes
fields: {
           org.junit.rules.TemporaryFolder* folder <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TempFolderRuleTest$NameClashes.fileWithFileClash() 
            TempFolderRuleTest$NameClashes.<init>() 
            void TempFolderRuleTest$NameClashes.fileWithFolderTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 220, column 24]}]}
dummy: false
class org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest$3
fields: {
           org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest* this$0 <_final> 
           java.io.PrintStream* fWriter <> 
           int fColumn <>
         }
statics: {}
supers: {
           class org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest$TestResultPrinter
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityPrintingTest$3.<init>(ForwardCompatibilityPrintingTest,PrintStream) 
            void ForwardCompatibilityPrintingTest$3.printErrors(TestResult)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$UnsortableRunnersAreHandledWithoutCrashing$UnsortableRunner
fields: {}
statics: {}
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void SortableTest$UnsortableRunnersAreHandledWithoutCrashing$UnsortableRunner.run(RunNotifier) 
            Description SortableTest$UnsortableRunnersAreHandledWithoutCrashing$UnsortableRunner.getDescription() 
            SortableTest$UnsortableRunnersAreHandledWithoutCrashing$UnsortableRunner.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 203, column 28]}]}
dummy: false
class org.junit.validator.AnnotationValidatorFactoryTest
fields: {
           org.junit.rules.ExpectedException* exception <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationValidatorFactoryTest.createAnnotationValidator() 
            AnnotationValidatorFactoryTest.<init>() 
            void AnnotationValidatorFactoryTest.exceptionWhenAnnotationValidatorCantBeCreated()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false
class java.net.URLClassLoader
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.validation.BadlyFormedClassesTest$FaultyConstructor
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void BadlyFormedClassesTest$FaultyConstructor.someTest() 
            BadlyFormedClassesTest$FaultyConstructor.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$BeforeParamAndAfterParam
fields: {
           java.lang.String* x <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$BeforeParamAndAfterParam.second() 
            ParameterizedTestTest$BeforeParamAndAfterParam.<init>(String) 
            void ParameterizedTestTest$BeforeParamAndAfterParam.afterParam() 
            void ParameterizedTestTest$BeforeParamAndAfterParam.after() 
            void ParameterizedTestTest$BeforeParamAndAfterParam.beforeParam(String) 
            void ParameterizedTestTest$BeforeParamAndAfterParam.before() 
            Collection ParameterizedTestTest$BeforeParamAndAfterParam.data() 
            void ParameterizedTestTest$BeforeParamAndAfterParam.first()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized") _org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.NAME_ASCENDING")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 269, column 24]}]}
dummy: false
class org.junit.runners.Parameterized$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.manipulation.SingleMethodTest
fields: {}
statics: {
            int count <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SingleMethodTest.nonexistentMethodCreatesFailure() 
            void SingleMethodTest.oneTimeSetup() 
            void SingleMethodTest.filteringAwayEverythingThrowsException() 
            void SingleMethodTest.classesWithSuiteMethodsAreFiltered() 
            SingleMethodTest.<init>() 
            void SingleMethodTest.parameterizedBeforeClass() 
            void SingleMethodTest.eliminateUnnecessaryTreeBranches() 
            void SingleMethodTest.parameterizedFilterToSingleMethod() 
            void SingleMethodTest.filteringAffectsPlan()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 13]}]}
dummy: false
class junit.samples.AllTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTests.<init>() 
            void AllTests.main(String[]) 
            Test AllTests.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 70, column 28]}]}
dummy: false
class org.junit.rules.Stopwatch$InternalWatcher
fields: {
           org.junit.rules.Stopwatch* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            void Stopwatch$InternalWatcher.succeeded(Description) 
            void Stopwatch$InternalWatcher.starting(Description) 
            Stopwatch$InternalWatcher.<init>(Stopwatch,Stopwatch$1) 
            void Stopwatch$InternalWatcher.skipped(AssumptionViolatedException,Description) 
            Stopwatch$InternalWatcher.<init>(Stopwatch) 
            void Stopwatch$InternalWatcher.failed(Throwable,Description) 
            void Stopwatch$InternalWatcher.finished(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 151, column 18]}]}
dummy: false
class junit.tests.framework.InheritedTestCase
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.tests.framework.OneTestCase
         }
objc_protocols: {}
methods: {
            InheritedTestCase.<init>() 
            void InheritedTestCase.test2()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 13]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodWrongTypedField
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$MethodWrongTypedField.foo() 
            int TestRuleTest$MethodWrongTypedField.getX() 
            TestRuleTest$MethodWrongTypedField.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 408, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$Callbacks$FailingTest
fields: {
           org.junit.rules.TestRule* rule <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWatcherTest$Callbacks$FailingTest.<init>() 
            void TestWatcherTest$Callbacks$FailingTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 148, column 28]}]}
dummy: false
class org.junit.runners.model.Statement
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Statement.<init>() 
            void Statement.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.FailingDataPointMethods$HasWronglyIgnoredFailingMultipleDataPointMethod
fields: {}
statics: {
            int num <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FailingDataPointMethods$HasWronglyIgnoredFailingMultipleDataPointMethod.<clinit>() 
            void FailingDataPointMethods$HasWronglyIgnoredFailingMultipleDataPointMethod.theory(int) 
            FailingDataPointMethods$HasWronglyIgnoredFailingMultipleDataPointMethod.<init>() 
            int FailingDataPointMethods$HasWronglyIgnoredFailingMultipleDataPointMethod.failingDataPoint()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 117, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderedAlphanumerically
fields: {}
statics: {}
supers: {
           class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$Unordered
         }
objc_protocols: {}
methods: {
            OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderedAlphanumerically.<init>() 
            Test OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderedAlphanumerically.suite()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.OrderWith(value="org.junit.tests.manipulation.AlphanumericOrdering")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 202, column 28]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$TestWithUseParametersRunnerFactoryAnnotation
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$TestWithUseParametersRunnerFactoryAnnotation.aTest() 
            Iterable ParameterizedTestTest$TestWithUseParametersRunnerFactoryAnnotation.data() 
            ParameterizedTestTest$TestWithUseParametersRunnerFactoryAnnotation.<init>(Object)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized") _org.junit.runners.Parameterized$UseParametersRunnerFactory(value="org.junit.tests.running.classes.ParameterizedTestTest$ExceptionThrowingRunnerFactory")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 713, column 24]}]}
dummy: false
class junit.tests.runner.TextFeedbackTest$3
fields: {
           junit.tests.runner.TextFeedbackTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TextFeedbackTest$3.<init>(TextFeedbackTest) 
            void TextFeedbackTest$3.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 68, column 37]}]}
dummy: false
class java.lang.AssertionError
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.methods.AnnotationTest$TwoTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$TwoTests.<init>() 
            void AnnotationTest$TwoTests.two() 
            void AnnotationTest$TwoTests.one()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 194, column 24]}]}
dummy: false
class org.junit.runner.notification.RunNotifierTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.methods.ExpectedTest$ExpectSuperclass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedTest$ExpectSuperclass.<init>() 
            void ExpectedTest$ExpectSuperclass.throwsSubclass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 60, column 24]}]}
dummy: false
class org.junit.runners.model.TestClassTest$MethodsAnnotated
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            int TestClassTest$MethodsAnnotated.methodC() 
            TestClassTest$MethodsAnnotated.<init>() 
            int TestClassTest$MethodsAnnotated.methodB() 
            String TestClassTest$MethodsAnnotated.methodA() 
            int TestClassTest$MethodsAnnotated.methodWithoutAnnotation()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 117, column 24]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit4TestAdapterTest$Test4
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JUnit4TestAdapterTest$Test4.pass() 
            JUnit4TestAdapterTest$Test4.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 34, column 24]}]}
dummy: false
class org.junit.runners.model.FrameworkMember
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.model.Annotatable
         }
objc_protocols: {}
methods: {
            Class FrameworkMember.getDeclaringClass() 
            int FrameworkMember.getModifiers() 
            boolean FrameworkMember.isShadowedBy(FrameworkMember) 
            FrameworkMember FrameworkMember.handlePossibleBridgeMethod(List) 
            String FrameworkMember.getName() 
            FrameworkMember.<init>() 
            boolean FrameworkMember.isPublic() 
            boolean FrameworkMember.isStatic() 
            boolean FrameworkMember.isBridgeMethod() 
            Class FrameworkMember.getType()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithParameterSupplier$SupplierWithTwoConstructors
fields: {}
statics: {}
supers: {
           class org.junit.experimental.theories.ParameterSupplier
         }
objc_protocols: {}
methods: {
            WithParameterSupplier$SupplierWithTwoConstructors.<init>(String) 
            List WithParameterSupplier$SupplierWithTwoConstructors.getValueSources(ParameterSignature)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 112, column 24]}]}
dummy: false
class org.junit.runners.RuleContainer$RuleEntry
fields: {
           java.lang.Object* rule <_final> 
           int order <_final> 
           int type <_final>
         }
statics: {
            int TYPE_TEST_RULE <_final> 
            int TYPE_METHOD_RULE <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleContainer$RuleEntry.<init>(Object,int,Integer)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.RequestTest$FooTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RequestTest$FooTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 45, column 25]}]}
dummy: false

class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest$DerivedAnnotatedMethod
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest$JUnit3ClassWithAnnotatedMethod
         }
objc_protocols: {}
methods: {
            JUnit38ClassRunnerTest$DerivedAnnotatedMethod.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 108, column 24]}]}
dummy: false
class junit.tests.SampleJUnit3Tests$FakeClassUnderTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SampleJUnit3Tests$FakeClassUnderTest.<init>(SampleJUnit3Tests$1) 
            void SampleJUnit3Tests$FakeClassUnderTest.throwsExceptionWithCause() 
            SampleJUnit3Tests$FakeClassUnderTest.<init>() 
            void SampleJUnit3Tests$FakeClassUnderTest.doThrowExceptionWithoutCause() 
            void SampleJUnit3Tests$FakeClassUnderTest.throwsExceptionWithoutCause() 
            void SampleJUnit3Tests$FakeClassUnderTest.doThrowExceptionWithCause()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 25]}]}
dummy: false
class org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityPrintingTest.<init>() 
            void ForwardCompatibilityPrintingTest.testErrorAdapted() 
            void ForwardCompatibilityPrintingTest.testError() 
            String ForwardCompatibilityPrintingTest.expected(String[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.ParameterizedAssertionErrorTest$1
fields: {
           org.junit.tests.experimental.theories.internal.ParameterizedAssertionErrorTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String ParameterizedAssertionErrorTest$1.toString() 
            ParameterizedAssertionErrorTest$1.<init>(ParameterizedAssertionErrorTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 88, column 70]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields$HasAFailingTheory
fields: {}
statics: {
            int ONE <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UnsuccessfulWithDataPointFields$HasAFailingTheory.<clinit>() 
            UnsuccessfulWithDataPointFields$HasAFailingTheory.<init>() 
            void UnsuccessfulWithDataPointFields$HasAFailingTheory.everythingIsZero(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 24]}]}
dummy: false
class org.junit.rules.TempFolderRuleTest$CreatesRandomSubFolders
fields: {
           org.junit.rules.TemporaryFolder* folder <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TempFolderRuleTest$CreatesRandomSubFolders.<init>() 
            void TempFolderRuleTest$CreatesRandomSubFolders.testUsingRandomTempFolders()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 117, column 24]}]}
dummy: false
class org.junit.tests.running.methods.TestMethodTest$ConstructorParameter
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestMethodTest$ConstructorParameter.<init>(Object) 
            void TestMethodTest$ConstructorParameter.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 228, column 24]}]}
dummy: false
class org.junit.tests.experimental.max.MaxStarterTest$TwoUnEqualTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MaxStarterTest$TwoUnEqualTests.fast() 
            MaxStarterTest$TwoUnEqualTests.<init>() 
            void MaxStarterTest$TwoUnEqualTests.slow()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 125, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Skipped$1
fields: {
           org.junit.rules.TestWatcherTest$CallbackArguments$Skipped* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            void TestWatcherTest$CallbackArguments$Skipped$1.skipped(AssumptionViolatedException,Description) 
            TestWatcherTest$CallbackArguments$Skipped$1.<init>(TestWatcherTest$CallbackArguments$Skipped)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 247, column 62]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest$MyTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void JUnit38ClassRunnerTest$MyTest.testA() 
            JUnit38ClassRunnerTest$MyTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 24]}]}
dummy: false
class org.junit.runner.JUnitCommandLineParseResultTest$DummyTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnitCommandLineParseResultTest$DummyTest.<init>() 
            void JUnitCommandLineParseResultTest$DummyTest.dummyTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 141, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$ExampleTest$1$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.TestRuleTest$ExampleTest$1* this$1 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void TestRuleTest$ExampleTest$1$1.evaluate() 
            TestRuleTest$ExampleTest$1$1.<init>(TestRuleTest$ExampleTest$1,Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 39]}]}
dummy: false
class org.junit.experimental.categories.Categories$IncludeCategory
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            Class[] Categories$IncludeCategory.value() 
            boolean Categories$IncludeCategory.matchAny()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 86, column 22]}]}
dummy: false
class org.junit.internal.MethodSorterTest$Super
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodSorterTest$Super.superMario() 
            MethodSorterTest$Super.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 47, column 17]}]}
dummy: false
class org.hamcrest.Description
fields: {}
statics: {
            org.hamcrest.Description* NONE <>
          }
supers: {}
objc_protocols: {}
methods: {
            void Description.<clinit>() 
            Description Description.appendValue(Object) 
            Description Description.appendValueList(String,String,String,Object[]) 
            Description Description.appendDescriptionOf(SelfDescribing) 
            Description Description.appendValueList(String,String,String,Iterable) 
            Description Description.appendList(String,String,String,Iterable) 
            Description Description.appendText(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class junit.tests.extensions.ExtensionTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void ExtensionTest.testSetupErrorDontTearDown() 
            ExtensionTest.<init>() 
            void ExtensionTest.testRunningErrorsInTestSetup() 
            void ExtensionTest.testSetupErrorInTestSetup() 
            void ExtensionTest.testRunningErrorInTestSetup()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$AssumptionInParametersMethod
fields: {}
statics: {
            _Bool assumptionFails <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$AssumptionInParametersMethod.test1() 
            Iterable ParameterizedTestTest$AssumptionInParametersMethod.data() 
            ParameterizedTestTest$AssumptionInParametersMethod.<init>(String) 
            void ParameterizedTestTest$AssumptionInParametersMethod.test2()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 769, column 24]}]}
dummy: false
class org.junit.internal.Throwables
fields: {}
statics: {
            java.lang.String*[_*_](*) TEST_FRAMEWORK_METHOD_NAME_PREFIXES <_final> 
            java.lang.String*[_*_](*) REFLECTION_METHOD_NAME_PREFIXES <_final> 
            java.lang.String*[_*_](*) TEST_FRAMEWORK_TEST_METHOD_NAME_PREFIXES <_final> 
            java.lang.reflect.Method* getSuppressed <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void Throwables.<clinit>() 
            List Throwables.getTrimmedStackTraceLines(Throwable) 
            boolean Throwables.access$100(String) 
            boolean Throwables.isMatchingMethod(String,String[]) 
            String Throwables.getStacktrace(Throwable) 
            List Throwables.asReversedList(List) 
            String Throwables.getTrimmedStackTrace(Throwable) 
            boolean Throwables.isReflectionMethod(String) 
            void Throwables.appendStackTraceLines(List,StringBuilder) 
            Exception Throwables.rethrowAsException(Throwable) 
            Throwables.<init>() 
            boolean Throwables.hasSuppressed(Throwable) 
            void Throwables.rethrow(Throwable) 
            String Throwables.getFullStackTrace(Throwable) 
            boolean Throwables.access$200(String) 
            Method Throwables.initGetSuppressed() 
            boolean Throwables.isTestFrameworkMethod(String) 
            List Throwables.getCauseStackTraceLines(Throwable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.ErrorCollector$1
fields: {
           org.hamcrest.Matcher* val$matcher <_final> 
           org.junit.rules.ErrorCollector* this$0 <_final> 
           java.lang.Object* val$value <_final> 
           java.lang.String* val$reason <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            ErrorCollector$1.<init>(ErrorCollector,String,Object,Matcher) 
            Object ErrorCollector$1.call()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 75, column 45]}]}
dummy: false

class org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest$TestResultPrinter
fields: {
           java.io.PrintStream* fWriter <> 
           int fColumn <>
         }
statics: {}
supers: {
           class junit.textui.ResultPrinter
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityPrintingTest$TestResultPrinter.<init>(PrintStream) 
            String ForwardCompatibilityPrintingTest$TestResultPrinter.elapsedTimeAsString(long)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 17]}]}
dummy: false
class org.junit.experimental.theories.ParameterSupplier
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            List ParameterSupplier.getValueSources(ParameterSignature) 
            ParameterSupplier.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.rules.ClassRulesTest$ClassRulesModifiableList
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ClassRulesTest$ClassRulesModifiableList.<init>() 
            TestRule ClassRulesTest$ClassRulesModifiableList.classRule() 
            void ClassRulesTest$ClassRulesModifiableList.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.rules.ClassRulesTest$RunnerWithClassRuleAddedProgrammatically")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 347, column 24]}]}
dummy: false
class org.junit.rules.TemporaryFolderRuleAssuredDeletionTest$TestClass
fields: {
           org.junit.rules.TemporaryFolder* folder <_org.junit.Rule>
         }
statics: {
            org.junit.rules.TemporaryFolder* injectedRule <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TemporaryFolderRuleAssuredDeletionTest$TestClass.alwaysPassesButDeletesRootFolder() 
            TemporaryFolderRuleAssuredDeletionTest$TestClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false
class org.junit.internal.builders.AnnotatedBuilderTest$OuterClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotatedBuilderTest$OuterClass.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runner.RunnerSpy")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 69, column 24]}]}
dummy: false
class junit.tests.runner.BaseTestRunnerTest$MockRunner
fields: {
           _Bool fRunFailed <> 
           _Bool fLoading <>
         }
statics: {
            _Bool fgFilterStack <> 
            java.lang.String* SUITE_METHODNAME <_final> 
            int fgMaxMessageLength <> 
            java.util.Properties* fPreferences <>
          }
supers: {
           class junit.runner.BaseTestRunner
         }
objc_protocols: {}
methods: {
            boolean BaseTestRunnerTest$MockRunner.access$000(BaseTestRunnerTest$MockRunner) 
            void BaseTestRunnerTest$MockRunner.testEnded(String) 
            BaseTestRunnerTest$MockRunner.<init>() 
            void BaseTestRunnerTest$MockRunner.testStarted(String) 
            void BaseTestRunnerTest$MockRunner.testFailed(int,Test,Throwable) 
            void BaseTestRunnerTest$MockRunner.runFailed(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 24]}]}
dummy: false
class org.junit.rules.ClassRulesTest$Counter
fields: {
           int count <>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            ClassRulesTest$Counter.<init>() 
            void ClassRulesTest$Counter.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 24]}]}
dummy: false
class org.junit.runner.JUnitCoreTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnitCoreTest.<init>() 
            void JUnitCoreTest.shouldAddFailuresToResult()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false
class org.junit.internal.runners.rules.ValidationError
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            ValidationError.<init>(FrameworkMember,Class,String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.ErrorCollectorTest
fields: {
           org.hamcrest.Matcher* matcher <_org.junit.runners.Parameterized$Parameter> 
           java.lang.Class* classUnderTest <_org.junit.runners.Parameterized$Parameter>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ErrorCollectorTest.runTestClassAndVerifyEvents() 
            ErrorCollectorTest.<init>() 
            Object[][] ErrorCollectorTest.testsWithEventMatcher()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 13]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$MultiCategorySuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$MultiCategorySuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$A, org.junit.experimental.categories.MultiCategoryTest$B") _org.junit.experimental.categories.Categories$ExcludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$C") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.MultiCategoryTest$CategoriesTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 43, column 30]}]}
dummy: false
class junit.tests.framework.TestCaseTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void TestCaseTest.testTearDownFails() 
            void TestCaseTest.testSetupFails() 
            void TestCaseTest.verifyFailure(TestCase) 
            void TestCaseTest.testNoArgTestCasePasses() 
            TestCaseTest.<init>() 
            void TestCaseTest.testRunAndTearDownFails() 
            void TestCaseTest.verifySuccess(TestCase) 
            void TestCaseTest.testTearDownSetupFails() 
            void TestCaseTest.testWasRun() 
            void TestCaseTest.testSuccess() 
            void TestCaseTest.testCaseToString() 
            void TestCaseTest.testNamelessTestCase() 
            void TestCaseTest.testError() 
            void TestCaseTest.testExceptionRunningAndTearDown() 
            void TestCaseTest.testErrorTearingDownDoesntMaskErrorRunning() 
            void TestCaseTest.testFailure() 
            void TestCaseTest.testTearDownAfterError() 
            void TestCaseTest.verifyError(TestCase)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields$DoesntUseParams
fields: {}
statics: {
            int ONE <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UnsuccessfulWithDataPointFields$DoesntUseParams.<clinit>() 
            UnsuccessfulWithDataPointFields$DoesntUseParams.<init>() 
            void UnsuccessfulWithDataPointFields$DoesntUseParams.everythingIsZero(int,int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 24]}]}
dummy: false
class java.util.concurrent.Future
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.TestRuleTest$ExampleTest
fields: {
           org.junit.rules.TestRule* example <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$ExampleTest.nothing() 
            TestRuleTest$ExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 24]}]}
dummy: false
class java.lang.reflect.ParameterizedType
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.manipulation.OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderable
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderable.<init>() 
            void OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderable.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.manipulation.OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 288, column 28]}]}
dummy: false
class junit.tests.runner.ResultTest$AssumptionFailedTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ResultTest$AssumptionFailedTest.<init>() 
            void ResultTest$AssumptionFailedTest.assumptionFailed()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 99, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$UsesCustomMethodRule
fields: {
           org.junit.rules.TestRuleTest$CustomTestName* counter <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$UsesCustomMethodRule.foo() 
            TestRuleTest$UsesCustomMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 231, column 24]}]}
dummy: false
class org.junit.runner.notification.SynchronizedRunListenerTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SynchronizedRunListenerTest.namedListenerCorrectlyImplementsEqualsAndHashCode() 
            SynchronizedRunListener SynchronizedRunListenerTest.wrap(RunListener) 
            void SynchronizedRunListenerTest.equalsDelegates() 
            SynchronizedRunListenerTest.<init>() 
            Set SynchronizedRunListenerTest.getAllDeclaredMethods(Class) 
            void SynchronizedRunListenerTest.toStringDelegates() 
            void SynchronizedRunListenerTest.hashCodeDelegates() 
            void SynchronizedRunListenerTest.overridesAllMethodsInRunListener()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 13]}]}
dummy: false
class org.junit.tests.validation.FailedConstructionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FailedConstructionTest.<init>() 
            void FailedConstructionTest.failedConstructionIsTestFailure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false

class org.junit.tests.running.methods.ParameterizedTestMethodTest$EverythingWrong
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestMethodTest$EverythingWrong.notStaticBC() 
            void ParameterizedTestMethodTest$EverythingWrong.notPublicB() 
            void ParameterizedTestMethodTest$EverythingWrong.argumentsAC(int) 
            void ParameterizedTestMethodTest$EverythingWrong.fineT() 
            void ParameterizedTestMethodTest$EverythingWrong.fineBC() 
            void ParameterizedTestMethodTest$EverythingWrong.staticT() 
            int ParameterizedTestMethodTest$EverythingWrong.nonVoidA() 
            int ParameterizedTestMethodTest$EverythingWrong.nonVoidBC() 
            void ParameterizedTestMethodTest$EverythingWrong.argumentsB(int) 
            void ParameterizedTestMethodTest$EverythingWrong.staticA() 
            ParameterizedTestMethodTest$EverythingWrong.<init>() 
            void ParameterizedTestMethodTest$EverythingWrong.notPublicAC() 
            int ParameterizedTestMethodTest$EverythingWrong.nonVoidT() 
            void ParameterizedTestMethodTest$EverythingWrong.fineA() 
            void ParameterizedTestMethodTest$EverythingWrong.notPublicBC() 
            int ParameterizedTestMethodTest$EverythingWrong.nonVoidB() 
            void ParameterizedTestMethodTest$EverythingWrong.fineAC() 
            void ParameterizedTestMethodTest$EverythingWrong.notStaticAC() 
            void ParameterizedTestMethodTest$EverythingWrong.notPublicT() 
            void ParameterizedTestMethodTest$EverythingWrong.argumentsA(int) 
            void ParameterizedTestMethodTest$EverythingWrong.argumentsBC(int) 
            void ParameterizedTestMethodTest$EverythingWrong.fineB() 
            void ParameterizedTestMethodTest$EverythingWrong.notPublicA() 
            int ParameterizedTestMethodTest$EverythingWrong.nonVoidAC() 
            void ParameterizedTestMethodTest$EverythingWrong.argumentsT(int) 
            void ParameterizedTestMethodTest$EverythingWrong.staticB()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields$DataPointFieldsMustBeStatic
fields: {
           int THREE <_org.junit.experimental.theories.DataPoint> 
           int[_*_](*) FOURS <_org.junit.experimental.theories.DataPoints>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UnsuccessfulWithDataPointFields$DataPointFieldsMustBeStatic.numbers(int) 
            UnsuccessfulWithDataPointFields$DataPointFieldsMustBeStatic.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 105, column 24]}]}
dummy: false
class org.junit.runner.JUnitCommandLineParseResult$CommandLineParserError
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            JUnitCommandLineParseResult$CommandLineParserError.<init>(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 140, column 24]}]}
dummy: false

class org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest$OuterClass$Enclosed
fields: {
           org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest$OuterClass* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerTest$OuterClass$Enclosed.<init>(BlockJUnit4ClassRunnerTest$OuterClass) 
            void BlockJUnit4ClassRunnerTest$OuterClass$Enclosed.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 21]}]}
dummy: false
class org.junit.rules.TestWatchmanTest$ViolatedAssumptionTest
fields: {
           org.junit.rules.TestWatchmanTest$LoggingTestWatchman* watchman <_org.junit.Rule>
         }
statics: {
            java.lang.StringBuilder* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestWatchmanTest$ViolatedAssumptionTest.initLog() 
            TestWatchmanTest$ViolatedAssumptionTest.<init>() 
            void TestWatchmanTest$ViolatedAssumptionTest.succeeds()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false

class org.junit.experimental.categories.CategoryTest$TestSuiteWithNoCategories
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$TestSuiteWithNoCategories.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$A, org.junit.experimental.categories.CategoryTest$B, org.junit.experimental.categories.CategoryTest$C")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 177, column 24]}]}
dummy: false
class junit.tests.framework.TestImplementorTest$DoubleTestCase$1
fields: {
           junit.tests.framework.TestImplementorTest$DoubleTestCase* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.Protectable
         }
objc_protocols: {}
methods: {
            void TestImplementorTest$DoubleTestCase$1.protect() 
            TestImplementorTest$DoubleTestCase$1.<init>(TestImplementorTest$DoubleTestCase)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 46]}]}
dummy: false
class org.junit.rules.DisableOnDebugTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions$1
fields: {
           org.junit.rules.ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            Object ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions$1.call() 
            ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions$1.<init>(ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 211, column 59]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest
fields: {}
statics: {
            int count <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JUnit38ClassRunnerTest.getDescriptionWithAnnotation() 
            void JUnit38ClassRunnerTest.plansDecoratorCorrectly() 
            void JUnit38ClassRunnerTest.filterNoTestsRemain() 
            void JUnit38ClassRunnerTest.assertAnnotationFiltering(JUnit38ClassRunner) 
            JUnit38ClassRunnerTest.<init>() 
            void JUnit38ClassRunnerTest.testListener() 
            void JUnit38ClassRunnerTest.getDescriptionWithAnnotationInSuper() 
            void JUnit38ClassRunnerTest.canUnadaptAnAdapter() 
            void JUnit38ClassRunnerTest.invalidTestMethodReportedCorrectly()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 13]}]}
dummy: false

class org.junit.tests.running.methods.AnnotationTest$RunAllAfterClassesRegardless
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$RunAllAfterClassesRegardless.<init>() 
            void AnnotationTest$RunAllAfterClassesRegardless.two() 
            void AnnotationTest$RunAllAfterClassesRegardless.one() 
            void AnnotationTest$RunAllAfterClassesRegardless.empty()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 816, column 24]}]}
dummy: false
class org.junit.tests.description.TestDescriptionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestDescriptionTest.equalsIsFalseForNonTestDescription() 
            TestDescriptionTest.<init>() 
            void TestDescriptionTest.equalsIsFalseForSameNameAndDifferentUniqueId() 
            void TestDescriptionTest.equalsIsTrueForSameNameAndNoExplicitUniqueId()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false

class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersTest
fields: {
           org.junit.rules.ExpectedException* thrown <_final _org.junit.Rule>
         }
statics: {
            java.util.List* NO_PARAMETERS <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerWithParametersTest.<clinit>() 
            void BlockJUnit4ClassRunnerWithParametersTest.hasAllAnnotationsExceptRunWith() 
            BlockJUnit4ClassRunnerWithParametersTest.<init>() 
            void BlockJUnit4ClassRunnerWithParametersTest.providesHelpfulMessageIfParameterFieldCannotBeSet()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeoutTest$FastStatement
fields: {}
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            FailOnTimeoutTest$FastStatement.<init>(FailOnTimeoutTest$1) 
            FailOnTimeoutTest$FastStatement.<init>() 
            void FailOnTimeoutTest$FastStatement.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 254, column 25]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuccessfulWithDataPointFields.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$TestB
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$TestB.<init>() 
            void SuiteTest$TestB.fail()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 33, column 24]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$B
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [Some line 22, column 21]}]}
dummy: false

class org.junit.experimental.categories.CategoryFilterFactoryTest$CategoryFilterFactoryStub
fields: {}
statics: {}
supers: {
           class org.junit.experimental.categories.CategoryFilterFactory
         }
objc_protocols: {}
methods: {
            CategoryFilterFactoryTest$CategoryFilterFactoryStub.<init>() 
            CategoryFilterFactoryTest$CategoryFilterFactoryStub.<init>(CategoryFilterFactoryTest$1) 
            Filter CategoryFilterFactoryTest$CategoryFilterFactoryStub.createFilter(List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 48, column 25]}]}
dummy: false

class org.junit.experimental.categories.CategoryTest$IncludedExcludedSameSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$IncludedExcludedSameSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="java.lang.Runnable, java.lang.Object") _org.junit.experimental.categories.Categories$ExcludeCategory(value="java.lang.Runnable") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$ExcludedTest1, org.junit.experimental.categories.CategoryTest$ExcludedTest2, org.junit.experimental.categories.CategoryTest$IncludedTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 505, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParentRunnerFilteringTest$ExampleSuiteWithUnmodifiableChildList
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParentRunnerFilteringTest$ExampleSuiteWithUnmodifiableChildList.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.running.classes.ParentRunnerFilteringTest$SuiteWithUnmodifiableChildList") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.ParentRunnerFilteringTest$ExampleTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 114, column 24]}]}
dummy: false
class java.util.concurrent.CopyOnWriteArrayList
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.experimental.categories.MultiCategoryTest$InheritanceAllTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MultiCategoryTest$InheritanceAllTest.t() 
            void MultiCategoryTest$InheritanceAllTest.z() 
            MultiCategoryTest$InheritanceAllTest.<init>() 
            void MultiCategoryTest$InheritanceAllTest.q() 
            void MultiCategoryTest$InheritanceAllTest.w() 
            void MultiCategoryTest$InheritanceAllTest.y() 
            void MultiCategoryTest$InheritanceAllTest.x() 
            void MultiCategoryTest$InheritanceAllTest.runnable()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 140, column 30]}]}
dummy: false
class org.junit.runner.RequestTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$IncludeAndExcludeSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$IncludeAndExcludeSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$ExcludeCategory(value="org.junit.experimental.categories.CategoryTest$Category1") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoryTest$Category2") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$SomeAreSlow")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 165, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasFailingDataPointsArrayMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllMembersSupplierTest$HasFailingDataPointsArrayMethod.<init>(Object) 
            Object[] AllMembersSupplierTest$HasFailingDataPointsArrayMethod.objects()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 132, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodExampleTest$1
fields: {
           org.junit.rules.TestRuleTest$MethodExampleTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement TestRuleTest$MethodExampleTest$1.apply(Statement,Description) 
            TestRuleTest$MethodExampleTest$1.<init>(TestRuleTest$MethodExampleTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 247, column 50]}]}
dummy: false
class org.junit.internal.AssumptionViolatedException
fields: {
           org.hamcrest.Matcher* fMatcher <_final> 
           java.lang.String* fAssumption <_final> 
           _Bool fValueMatcher <_final> 
           java.lang.Object* fValue <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.RuntimeException 
           class org.hamcrest.SelfDescribing
         }
objc_protocols: {}
methods: {
            AssumptionViolatedException.<init>(String) 
            AssumptionViolatedException.<init>(String,Throwable) 
            String AssumptionViolatedException.getMessage() 
            AssumptionViolatedException.<init>(String,Object,Matcher) 
            void AssumptionViolatedException.writeObject(ObjectOutputStream) 
            AssumptionViolatedException.<init>(Object,Matcher) 
            void AssumptionViolatedException.describeTo(Description) 
            AssumptionViolatedException.<init>(String,boolean,Object,Matcher)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.util.Collection
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.methods.ParameterizedTestMethodTest$SuperWrong
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestMethodTest$SuperWrong.notPublic() 
            ParameterizedTestMethodTest$SuperWrong.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 139, column 24]}]}
dummy: false
class junit.tests.runner.TextRunnerTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TextRunnerTest.<init>() 
            void TextRunnerTest.testRunReturnsResult() 
            void TextRunnerTest.testSuccess() 
            void TextRunnerTest.execTest(String,boolean) 
            void TextRunnerTest.testError() 
            void TextRunnerTest.testFailure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TimeoutTest.stalledThreadAppearsInStackTrace() 
            void TimeoutTest.failureWithTimeoutRunTimeException() 
            void TimeoutTest.testZeroTimeoutIsIgnored() 
            String TimeoutTest.stackForException(Throwable) 
            void TimeoutTest.timeoutFailureMultithreadedStuckInMain() 
            void TimeoutTest.infiniteLoop() 
            TimeoutTest.<init>() 
            long TimeoutTest.runAndTime(Class) 
            void TimeoutTest.timeoutFailure() 
            void TimeoutTest.timeoutFailureMultithreaded() 
            void TimeoutTest.successWithTimeout() 
            void TimeoutTest.testGetTimeout() 
            void TimeoutTest.failureWithTimeout() 
            void TimeoutTest.makeSureAfterIsCalledAfterATimeout() 
            void TimeoutTest.compatibility() 
            void TimeoutTest.infiniteLoopRunsForApproximatelyLengthOfTimeout()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 13]}]}
dummy: false
class org.junit.rules.TestRuleTest$ExampleTest$1
fields: {
           org.junit.rules.TestRuleTest$ExampleTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement TestRuleTest$ExampleTest$1.apply(Statement,Description) 
            TestRuleTest$ExampleTest$1.<init>(TestRuleTest$ExampleTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 49]}]}
dummy: false

class org.junit.tests.running.methods.TimeoutTest$InfiniteLoopStuckInMainThreadTest
fields: {
           org.junit.rules.TestRule* globalTimeout <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutTest$InfiniteLoopStuckInMainThreadTest.<init>() 
            void TimeoutTest$InfiniteLoopStuckInMainThreadTest.failure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 213, column 24]}]}
dummy: false
class org.hamcrest.core.SubstringMatcher
fields: {
           java.lang.String* substring <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            boolean SubstringMatcher.matchesSafely(String) 
            SubstringMatcher.<init>(String) 
            String SubstringMatcher.relationship() 
            boolean SubstringMatcher.matchesSafely(Object) 
            boolean SubstringMatcher.evalSubstringOf(String) 
            void SubstringMatcher.describeMismatchSafely(String,Description) 
            void SubstringMatcher.describeTo(Description) 
            void SubstringMatcher.describeMismatchSafely(Object,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.rules.StopwatchTest$DurationAfterTestTest
fields: {
           org.junit.rules.Stopwatch* stopwatch <_final> 
           org.junit.rules.RuleChain* chain <_final _org.junit.Rule> 
           org.junit.rules.TestWatcher* watcher <_final> 
           org.junit.rules.Stopwatch$Clock* fakeClock <_final>
         }
statics: {}
supers: {
           class org.junit.rules.StopwatchTest$AbstractStopwatchTest
         }
objc_protocols: {}
methods: {
            StopwatchTest$DurationAfterTestTest.<init>() 
            void StopwatchTest$DurationAfterTestTest.afterStopwatchRule() 
            void StopwatchTest$DurationAfterTestTest.duration()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 136, column 24]}]}
dummy: false
class org.junit.internal.matchers.ThrowableMessageMatcher
fields: {
           org.hamcrest.Matcher* matcher <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            void ThrowableMessageMatcher.describeMismatchSafely(Throwable,Description) 
            Matcher ThrowableMessageMatcher.hasMessage(Matcher) 
            ThrowableMessageMatcher.<init>(Matcher) 
            void ThrowableMessageMatcher.describeMismatchSafely(Object,Description) 
            boolean ThrowableMessageMatcher.matchesSafely(Throwable) 
            boolean ThrowableMessageMatcher.matchesSafely(Object) 
            void ThrowableMessageMatcher.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnWildcardUpperBoundOnTheoryParm
fields: {}
statics: {
            java.util.List* strings <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnWildcardUpperBoundOnTheoryParm.<clinit>() 
            WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnWildcardUpperBoundOnTheoryParm.<init>() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnWildcardUpperBoundOnTheoryParm.forItems(Collection)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 79, column 24]}]}
dummy: false
class org.junit.rules.StopwatchTest$SkippedTest
fields: {
           org.junit.rules.Stopwatch* stopwatch <_final> 
           org.junit.rules.RuleChain* chain <_final _org.junit.Rule> 
           org.junit.rules.TestWatcher* watcher <_final> 
           org.junit.rules.Stopwatch$Clock* fakeClock <_final>
         }
statics: {}
supers: {
           class org.junit.rules.StopwatchTest$AbstractStopwatchTest
         }
objc_protocols: {}
methods: {
            StopwatchTest$SkippedTest.<init>() 
            void StopwatchTest$SkippedTest.skippedTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 119, column 24]}]}
dummy: false

class org.junit.rules.ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail$2
fields: {
           org.junit.rules.ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            void ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail$2.after() 
            ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail$2.<init>(ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 96, column 71]}]}
dummy: false
class org.junit.runners.model.MemberValueConsumer
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void MemberValueConsumer.accept(FrameworkMember,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.internal.ComparisonCriteria
fields: {}
statics: {
            java.lang.Object* END_OF_ARRAY_SENTINEL <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ComparisonCriteria.<clinit>() 
            String ComparisonCriteria.componentTypeName(Class) 
            void ComparisonCriteria.assertElementsEqual(Object,Object) 
            ComparisonCriteria.<init>() 
            void ComparisonCriteria.arrayEquals(String,Object,Object,boolean) 
            void ComparisonCriteria.arrayEquals(String,Object,Object) 
            Object ComparisonCriteria.objectWithToString(String) 
            Object ComparisonCriteria.getToStringableArrayElement(Object,int,int) 
            boolean ComparisonCriteria.isArray(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.hamcrest.Matcher
fields: {}
statics: {}
supers: {
           class org.hamcrest.SelfDescribing
         }
objc_protocols: {}
methods: {
            void Matcher.describeMismatch(Object,Description) 
            boolean Matcher.matches(Object) 
            void Matcher._dont_implement_Matcher___instead_extend_BaseMatcher_()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.Test$None
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Throwable
         }
objc_protocols: {}
methods: {
            Test$None.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 90, column 17]}]}
dummy: false
class org.junit.internal.runners.JUnit4ClassRunner$2
fields: {
           org.junit.runner.manipulation.Sorter* val$sorter <_final> 
           org.junit.internal.runners.JUnit4ClassRunner* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int JUnit4ClassRunner$2.compare(Object,Object) 
            JUnit4ClassRunner$2.<init>(JUnit4ClassRunner,Sorter) 
            int JUnit4ClassRunner$2.compare(Method,Method)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 137, column 63]}]}
dummy: false
class java.lang.reflect.Method
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runner.manipulation.Sortable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void Sortable.sort(Sorter)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class java.lang.InterruptedException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.experimental.AssumptionTest$HasFailingAssumptionWithMessage
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AssumptionTest$HasFailingAssumptionWithMessage.<init>() 
            void AssumptionTest$HasFailingAssumptionWithMessage.assumptionsFail()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 279, column 24]}]}
dummy: false
class org.junit.rules.TestName
fields: {
           java.lang.String* name <_volatile>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            void TestName.starting(Description) 
            TestName.<init>() 
            String TestName.getMethodName()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 13]}]}
dummy: false
class org.junit.runner.FilterFactories
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Filter FilterFactories.createFilter(Class,FilterFactoryParams) 
            FilterFactory FilterFactories.createFilterFactory(String) 
            FilterFactories.<init>() 
            Filter FilterFactories.createFilterFromFilterSpec(Request,String) 
            FilterFactory FilterFactories.createFilterFactory(Class) 
            Filter FilterFactories.createFilter(String,FilterFactoryParams)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 6]}]}
dummy: false
class org.junit.experimental.theories.Theory
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            boolean Theory.nullsAccepted()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.METHOD")>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$UseCustomMessageWithPlaceHolder
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$UseCustomMessageWithPlaceHolder.<init>() 
            void ExpectedExceptionTest$UseCustomMessageWithPlaceHolder.noThrow()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 346, column 24]}]}
dummy: false

class org.junit.validator.AnnotationsValidatorTest$AnnotationValidatorFieldTest
fields: {
           java.lang.String* field <_org.junit.validator.AnnotationsValidatorTest$ExampleAnnotationWithValidator>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationsValidatorTest$AnnotationValidatorFieldTest.<init>() 
            void AnnotationsValidatorTest$AnnotationValidatorFieldTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 55, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.extendingwithstubs.Guesser$1
fields: {
           java.util.ArrayList* val$returnThis <_final> 
           java.lang.Object* expected <> 
           _Bool expectedSeen <> 
           org.junit.tests.experimental.theories.extendingwithstubs.Guesser* this$0 <_final>
         }
statics: {
            org.hamcrest.Description* NONE <>
          }
supers: {
           class org.hamcrest.BaseDescription
         }
objc_protocols: {}
methods: {
            void Guesser$1.noteValue(Object) 
            void Guesser$1.append(char) 
            Description Guesser$1.appendValue(Object) 
            Guesser$1.<init>(Guesser,ArrayList)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 84, column 43]}]}
dummy: false
class org.junit.experimental.categories.Category
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            Class[] Category.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Inherited _org.junit.validator.ValidateWith(value="org.junit.experimental.categories.CategoryValidator")>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$TestClassRunnerIsSortable$SortMe
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SortableTest$TestClassRunnerIsSortable$SortMe.c() 
            SortableTest$TestClassRunnerIsSortable$SortMe.<init>() 
            void SortableTest$TestClassRunnerIsSortable$SortMe.b() 
            void SortableTest$TestClassRunnerIsSortable$SortMe.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 28]}]}
dummy: false
class org.hamcrest.core.AnyOf
fields: {
           java.lang.Iterable* matchers <_final>
         }
statics: {}
supers: {
           class org.hamcrest.core.ShortcutCombination
         }
objc_protocols: {}
methods: {
            AnyOf AnyOf.anyOf(Iterable) 
            boolean AnyOf.matches(Object) 
            AnyOf AnyOf.anyOf(Matcher,Matcher,Matcher,Matcher,Matcher,Matcher) 
            AnyOf.<init>(Iterable) 
            AnyOf AnyOf.anyOf(Matcher,Matcher,Matcher,Matcher) 
            AnyOf AnyOf.anyOf(Matcher[]) 
            void AnyOf.describeTo(Description,String) 
            AnyOf AnyOf.anyOf(Matcher,Matcher,Matcher) 
            AnyOf AnyOf.anyOf(Matcher,Matcher) 
            AnyOf AnyOf.anyOf(Matcher,Matcher,Matcher,Matcher,Matcher) 
            void AnyOf.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerFilteringTest$1
fields: {
           java.lang.String* val$methodName <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            ParentRunnerFilteringTest$1.<init>(String) 
            boolean ParentRunnerFilteringTest$1.shouldRun(Description) 
            String ParentRunnerFilteringTest$1.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 28]}]}
dummy: false
class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$NewTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityTest$NewTest.<init>() 
            void ForwardCompatibilityTest$NewTest.after() 
            void ForwardCompatibilityTest$NewTest.before() 
            void ForwardCompatibilityTest$NewTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 24]}]}
dummy: false

class org.junit.tests.running.methods.AnnotationTest$SubStaticMethodShadowing$1
fields: {}
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            AnnotationTest$SubStaticMethodShadowing$1.<init>() 
            void AnnotationTest$SubStaticMethodShadowing$1.after() 
            void AnnotationTest$SubStaticMethodShadowing$1.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 570, column 42]}]}
dummy: false
class junit.tests.framework.TestCaseTest$8
fields: {
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           _Bool fTornDown <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.tests.framework.TestCaseTest$TornDown
         }
objc_protocols: {}
methods: {
            TestCaseTest$8.<init>(TestCaseTest) 
            void TestCaseTest$8.tearDown()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 137, column 32]}]}
dummy: false
class org.junit.Ignore
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            String Ignore.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.TYPE")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 35, column 18]}]}
dummy: false
class junit.framework.TestResult$1
fields: {
           junit.framework.TestResult* this$0 <_final> 
           junit.framework.TestCase* val$test <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.Protectable
         }
objc_protocols: {}
methods: {
            TestResult$1.<init>(TestResult,TestCase) 
            void TestResult$1.protect()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 120, column 42]}]}
dummy: false
class java.io.ObjectInputStream$GetField
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.samples.money.MoneyBag
fields: {
           java.util.List* fMonies <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.samples.money.IMoney
         }
objc_protocols: {}
methods: {
            void MoneyBag.appendMoney(Money) 
            IMoney MoneyBag.negate() 
            String MoneyBag.toString() 
            IMoney MoneyBag.add(IMoney) 
            void MoneyBag.appendTo(MoneyBag) 
            void MoneyBag.appendBag(MoneyBag) 
            MoneyBag.<init>() 
            IMoney MoneyBag.addMoneyBag(MoneyBag) 
            boolean MoneyBag.isZero() 
            boolean MoneyBag.equals(Object) 
            boolean MoneyBag.contains(Money) 
            IMoney MoneyBag.subtract(IMoney) 
            IMoney MoneyBag.simplify() 
            int MoneyBag.hashCode() 
            Money MoneyBag.findMoney(String) 
            IMoney MoneyBag.addMoney(Money) 
            IMoney MoneyBag.multiply(int) 
            IMoney MoneyBag.create(IMoney,IMoney)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.lang.NoSuchFieldError
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.TestRuleTest$MethodMultipleRuleTest$Increment$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.TestRuleTest$MethodMultipleRuleTest$Increment* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void TestRuleTest$MethodMultipleRuleTest$Increment$1.evaluate() 
            TestRuleTest$MethodMultipleRuleTest$Increment$1.<init>(TestRuleTest$MethodMultipleRuleTest$Increment,Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 326, column 39]}]}
dummy: false
class org.junit.runner.Describable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            Description Describable.getDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.runners.JUnit4
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            JUnit4.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 19]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithParameterSupplier$SupplierWithTestClassConstructor
fields: {}
statics: {}
supers: {
           class org.junit.experimental.theories.ParameterSupplier
         }
objc_protocols: {}
methods: {
            WithParameterSupplier$SupplierWithTestClassConstructor.<init>(TestClass) 
            List WithParameterSupplier$SupplierWithTestClassConstructor.getValueSources(ParameterSignature)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 139, column 24]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckRunnableThatThrowsNoExceptionAlthoughOneIsExpected$1
fields: {
           org.junit.rules.ErrorCollectorTest$CheckRunnableThatThrowsNoExceptionAlthoughOneIsExpected* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.function.ThrowingRunnable
         }
objc_protocols: {}
methods: {
            void ErrorCollectorTest$CheckRunnableThatThrowsNoExceptionAlthoughOneIsExpected$1.run() 
            ErrorCollectorTest$CheckRunnableThatThrowsNoExceptionAlthoughOneIsExpected$1.<init>(ErrorCollectorTest$CheckRunnableThatThrowsNoExceptionAlthoughOneIsExpected)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 302, column 89]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$TestWithThrowingClassRule
fields: {}
statics: {
            org.junit.rules.TestRule* rule <_final _org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SampleJUnit4Tests$TestWithThrowingClassRule.<clinit>() 
            void SampleJUnit4Tests$TestWithThrowingClassRule.alwaysPasses() 
            SampleJUnit4Tests$TestWithThrowingClassRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 66, column 24]}]}
dummy: false
class org.junit.rules.VerifierRuleTest$UsesVerifier
fields: {
           org.junit.rules.Verifier* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            VerifierRuleTest$UsesVerifier.<init>() 
            void VerifierRuleTest$UsesVerifier.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false
class org.junit.rules.ExpectedException$ExpectedExceptionStatement
fields: {
           org.junit.runners.model.Statement* next <_final> 
           org.junit.rules.ExpectedException* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            ExpectedException$ExpectedExceptionStatement.<init>(ExpectedException,Statement) 
            void ExpectedException$ExpectedExceptionStatement.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 248, column 18]}]}
dummy: false
class org.junit.runner.manipulation.Filterable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void Filterable.filter(Filter)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$OneTestTwoAnnotations
fields: {}
statics: {
            java.lang.String* A <_org.junit.experimental.theories.DataPoint> 
            int tests <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuccessfulWithDataPointFields$OneTestTwoAnnotations.<clinit>() 
            void SuccessfulWithDataPointFields$OneTestTwoAnnotations.stringsAreOK(String) 
            SuccessfulWithDataPointFields$OneTestTwoAnnotations.<init>() 
            void SuccessfulWithDataPointFields$OneTestTwoAnnotations.calledTwice() 
            void SuccessfulWithDataPointFields$OneTestTwoAnnotations.resetCalls()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 174, column 24]}]}
dummy: false
class org.junit.tests.running.methods.TestMethodTest$EverythingWrong
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestMethodTest$EverythingWrong.notStaticBC() 
            void TestMethodTest$EverythingWrong.notPublicB() 
            void TestMethodTest$EverythingWrong.argumentsAC(int) 
            void TestMethodTest$EverythingWrong.fineT() 
            void TestMethodTest$EverythingWrong.fineBC() 
            void TestMethodTest$EverythingWrong.staticT() 
            int TestMethodTest$EverythingWrong.nonVoidA() 
            int TestMethodTest$EverythingWrong.nonVoidBC() 
            void TestMethodTest$EverythingWrong.argumentsB(int) 
            void TestMethodTest$EverythingWrong.staticA() 
            TestMethodTest$EverythingWrong.<init>() 
            void TestMethodTest$EverythingWrong.notPublicAC() 
            int TestMethodTest$EverythingWrong.nonVoidT() 
            void TestMethodTest$EverythingWrong.fineA() 
            void TestMethodTest$EverythingWrong.notPublicBC() 
            int TestMethodTest$EverythingWrong.nonVoidB() 
            void TestMethodTest$EverythingWrong.fineAC() 
            void TestMethodTest$EverythingWrong.notStaticAC() 
            void TestMethodTest$EverythingWrong.notPublicT() 
            void TestMethodTest$EverythingWrong.argumentsA(int) 
            void TestMethodTest$EverythingWrong.argumentsBC(int) 
            void TestMethodTest$EverythingWrong.fineB() 
            void TestMethodTest$EverythingWrong.notPublicA() 
            int TestMethodTest$EverythingWrong.nonVoidAC() 
            void TestMethodTest$EverythingWrong.argumentsT(int) 
            void TestMethodTest$EverythingWrong.staticB()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 24]}]}
dummy: false
class org.junit.internal.runners.MethodRoadie
fields: {
           java.lang.Object* test <_final> 
           org.junit.runner.Description* description <_final> 
           org.junit.internal.runners.TestMethod* testMethod <> 
           org.junit.runner.notification.RunNotifier* notifier <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRoadie.runAfters() 
            void MethodRoadie.run() 
            void MethodRoadie.runBefores() 
            MethodRoadie.<init>(Object,TestMethod,RunNotifier,Description) 
            void MethodRoadie.runWithTimeout(long) 
            void MethodRoadie.runTest() 
            void MethodRoadie.runBeforesThenTestThenAfters(Runnable) 
            void MethodRoadie.runTestMethod() 
            void MethodRoadie.addFailure(Throwable)
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.ClassRulesTest$MethodExampleTestWithClassRule
fields: {}
statics: {
            org.junit.rules.ClassRulesTest$Counter* counter <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$MethodExampleTestWithClassRule.<clinit>() 
            void ClassRulesTest$MethodExampleTestWithClassRule.secondTest() 
            ClassRulesTest$MethodExampleTestWithClassRule.<init>() 
            ClassRulesTest$Counter ClassRulesTest$MethodExampleTestWithClassRule.access$200() 
            ClassRulesTest$Counter ClassRulesTest$MethodExampleTestWithClassRule.getCounter() 
            void ClassRulesTest$MethodExampleTestWithClassRule.firstTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 155, column 24]}]}
dummy: false
class junit.extensions.ActiveTestSuite$1
fields: {
           junit.extensions.ActiveTestSuite* this$0 <_final> 
           junit.framework.TestResult* val$result <_final> 
           junit.framework.Test* val$test <_final>
         }
statics: {}
supers: {
           class java.lang.Thread
         }
objc_protocols: {}
methods: {
            void ActiveTestSuite$1.run() 
            ActiveTestSuite$1.<init>(ActiveTestSuite,Test,TestResult)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 32]}]}
dummy: false
class org.junit.runners.model.TestClassTest$AnotherDummyClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$AnotherDummyClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 207, column 25]}]}
dummy: false
class org.junit.runner.notification.RunNotifier$6
fields: {
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* val$failures <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier$SafeNotifier
         }
objc_protocols: {}
methods: {
            RunNotifier$6.<init>(RunNotifier,List,List) 
            void RunNotifier$6.notifyListener(RunListener)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 173, column 40]}]}
dummy: false
class org.junit.rules.MethodRulesTest$HasMethodReturningMethodRule
fields: {
           org.junit.rules.MethodRule* methodRule <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MethodRule MethodRulesTest$HasMethodReturningMethodRule.methodRule() 
            MethodRulesTest$HasMethodReturningMethodRule.<init>() 
            void MethodRulesTest$HasMethodReturningMethodRule.doNothing()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 307, column 24]}]}
dummy: false
class org.hamcrest.core.CombinableMatcher$CombinableBothMatcher
fields: {
           org.hamcrest.Matcher* first <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CombinableMatcher$CombinableBothMatcher.<init>(Matcher) 
            CombinableMatcher CombinableMatcher$CombinableBothMatcher.and(Matcher)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.methods.TestMethodTest$SuperWrong
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestMethodTest$SuperWrong.notPublic() 
            TestMethodTest$SuperWrong.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 142, column 24]}]}
dummy: false
class java.lang.ClassNotFoundException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.methods.InheritedTestTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void InheritedTestTest.subclassWithOnlyInheritedTestsRuns() 
            InheritedTestTest.<init>() 
            void InheritedTestTest.subclassWithInheritedTestAndOwnBeforeRunsBefore()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$PositiveInts
fields: {
           int x <>
         }
statics: {
            int ONE <_final _org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuccessfulWithDataPointFields$PositiveInts.haveAPostiveSquare() 
            SuccessfulWithDataPointFields$PositiveInts.<init>(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 71, column 24]}]}
dummy: false
class org.junit.internal.management.ManagementFactory$RuntimeHolder
fields: {}
statics: {
            org.junit.internal.management.RuntimeMXBean* RUNTIME_MX_BEAN <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ManagementFactory$RuntimeHolder.<clinit>() 
            RuntimeMXBean ManagementFactory$RuntimeHolder.getBean(Object) 
            ManagementFactory$RuntimeHolder.<init>() 
            RuntimeMXBean ManagementFactory$RuntimeHolder.access$000()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 44, column 29]}]}
dummy: false
class junit.tests.framework.TestCaseTest$4
fields: {
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestCaseTest$4.<init>(TestCaseTest,String) 
            void TestCaseTest$4.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 78, column 51]}]}
dummy: false
class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideRulesTest
fields: {
           _Bool flipBit <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerOverrideTest$OverrideRulesTest.<init>() 
            void BlockJUnit4ClassRunnerOverrideTest$OverrideRulesTest.testFlipBit()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideRulesRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 24]}]}
dummy: false
class org.junit.tests.description.AnnotatedDescriptionTest$IgnoredClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotatedDescriptionTest$IgnoredClass.<init>() 
            void AnnotatedDescriptionTest$IgnoredClass.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.Ignore>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 24]}]}
dummy: false
class org.junit.experimental.theories.ParameterSignature
fields: {
           java.lang.annotation.Annotation*[_*_](*) annotations <_final> 
           java.lang.Class* type <_final>
         }
statics: {
            java.util.Map* CONVERTABLE_TYPES_MAP <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterSignature.<clinit>() 
            void ParameterSignature.putSymmetrically(Map,Object,Object) 
            List ParameterSignature.getAnnotations() 
            boolean ParameterSignature.isAssignableViaTypeConversion(Class,Class) 
            ArrayList ParameterSignature.signatures(Class[],Annotation[][]) 
            ArrayList ParameterSignature.signatures(Method) 
            Annotation ParameterSignature.getAnnotation(Class) 
            Map ParameterSignature.buildConvertableTypesMap() 
            boolean ParameterSignature.hasAnnotation(Class) 
            boolean ParameterSignature.canAcceptValue(Object) 
            boolean ParameterSignature.canPotentiallyAcceptType(Class) 
            ParameterSignature.<init>(Class,Annotation[]) 
            List ParameterSignature.signatures(Constructor) 
            Annotation ParameterSignature.findDeepAnnotation(Class) 
            Annotation ParameterSignature.findDeepAnnotation(Annotation[],Class,int) 
            Class ParameterSignature.getType() 
            boolean ParameterSignature.canAcceptType(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithExtendedParameterSources$DataPointMalformedArrayMethods
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithExtendedParameterSources$DataPointMalformedArrayMethods.<clinit>() 
            void WithExtendedParameterSources$DataPointMalformedArrayMethods.addToLog(String) 
            WithExtendedParameterSources$DataPointMalformedArrayMethods.<init>() 
            String WithExtendedParameterSources$DataPointMalformedArrayMethods.STRING() 
            String[] WithExtendedParameterSources$DataPointMalformedArrayMethods.STRINGS() 
            int[] WithExtendedParameterSources$DataPointMalformedArrayMethods.INTS()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 130, column 24]}]}
dummy: false
class org.junit.tests.deprecated.AllDeprecatedTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllDeprecatedTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.deprecated.JUnit4ClassRunnerTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false
class org.junit.rules.DisableOnDebugTest$FailOnExecution$1
fields: {
           org.junit.rules.DisableOnDebugTest$FailOnExecution* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void DisableOnDebugTest$FailOnExecution$1.evaluate() 
            DisableOnDebugTest$FailOnExecution$1.<init>(DisableOnDebugTest$FailOnExecution)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 40, column 35]}]}
dummy: false
class java.lang.Runnable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.experimental.AssumptionTest$HasFailingAssumeInBeforeClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AssumptionTest$HasFailingAssumeInBeforeClass.failing() 
            AssumptionTest$HasFailingAssumeInBeforeClass.<init>() 
            void AssumptionTest$HasFailingAssumeInBeforeClass.checkForSomethingThatIsntThere()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 193, column 24]}]}
dummy: false
class org.junit.rules.ClassRulesTest$OrderTestRule$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.ClassRulesTest$OrderTestRule* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$OrderTestRule$1.evaluate() 
            ClassRulesTest$OrderTestRule$1.<init>(ClassRulesTest$OrderTestRule,Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 122, column 35]}]}
dummy: false
class junit.tests.framework.Success
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            Success.<init>() 
            void Success.runTest() 
            void Success.testSuccess()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class org.hamcrest.StringDescription
fields: {
           java.lang.Appendable* out <_final>
         }
statics: {
            org.hamcrest.Description* NONE <>
          }
supers: {
           class org.hamcrest.BaseDescription
         }
objc_protocols: {}
methods: {
            String StringDescription.toString(SelfDescribing) 
            String StringDescription.asString(SelfDescribing) 
            void StringDescription.append(String) 
            StringDescription.<init>() 
            String StringDescription.toString() 
            void StringDescription.append(char) 
            StringDescription.<init>(Appendable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderable
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderable.<init>() 
            void OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderable.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.manipulation.OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 255, column 28]}]}
dummy: false
class org.junit.validator.PublicClassValidatorTest
fields: {
           org.junit.validator.PublicClassValidator* validator <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void PublicClassValidatorTest.rejectsNonPublicClass() 
            PublicClassValidatorTest.<init>() 
            void PublicClassValidatorTest.acceptsPublicClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class java.util.concurrent.TimeoutException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.Process
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.experimental.theories.runner.WithParameterSupplier
fields: {
           org.junit.rules.ExpectedException* expected <_org.junit.Rule>
         }
statics: {
            java.util.List* DATAPOINTS <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithParameterSupplier.<clinit>() 
            void WithParameterSupplier.shouldPickUpDataPointsFromParameterSupplier() 
            List WithParameterSupplier.access$000() 
            void WithParameterSupplier.shouldRejectSuppliersWithTwoConstructors() 
            WithParameterSupplier.<init>() 
            void WithParameterSupplier.shouldRejectSuppliersWithUnknownConstructors() 
            void WithParameterSupplier.shouldAcceptSuppliersWithTestClassConstructor()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false

class org.junit.experimental.categories.CategoryTest$SameAsNoIncludeCategoryAnnotationSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$SameAsNoIncludeCategoryAnnotationSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="java.lang.CharSequence") _org.junit.experimental.categories.Categories$ExcludeCategory(value="java.lang.String") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$NoIncludeCategoryAnnotationTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 565, column 24]}]}
dummy: false
class org.junit.internal.management.RuntimeMXBean
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            List RuntimeMXBean.getInputArguments()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false

class org.junit.tests.running.core.JUnitCoreReturnsCorrectExitCodeTest$Succeed
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnitCoreReturnsCorrectExitCodeTest$Succeed.<init>() 
            void JUnitCoreReturnsCorrectExitCodeTest$Succeed.peacefulSilence()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 24]}]}
dummy: false
class org.junit.tests.manipulation.SortableTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Comparator SortableTest.forward() 
            SortableTest.<init>() 
            Comparator SortableTest.backward() 
            Comparator SortableTest.access$100() 
            Comparator SortableTest.access$200()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 13]}]}
dummy: false
class org.junit.tests.manipulation.ComparatorBasedOrdering
fields: {
           java.util.Comparator* comparator <_final>
         }
statics: {
            java.lang.String* CONSTRUCTOR_ERROR_FORMAT <_final>
          }
supers: {
           class org.junit.runner.manipulation.Ordering
         }
objc_protocols: {}
methods: {
            ComparatorBasedOrdering.<init>(Comparator) 
            List ComparatorBasedOrdering.orderItems(Collection)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.theories.internal.Assignments
fields: {
           org.junit.runners.model.TestClass* clazz <_final> 
           java.util.List* unassigned <_final> 
           java.util.List* assigned <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParameterSignature Assignments.nextUnassigned() 
            Assignments Assignments.allUnassigned(Method,TestClass) 
            Assignments Assignments.assignNext(PotentialAssignment) 
            Assignments.<init>(List,List,TestClass) 
            int Assignments.getConstructorParameterCount() 
            boolean Assignments.isComplete() 
            List Assignments.potentialsForNextUnassigned() 
            ParameterSupplier Assignments.getSupplier(ParameterSignature) 
            Object[] Assignments.getMethodArguments() 
            Object[] Assignments.getAllArguments() 
            ParameterSupplier Assignments.buildParameterSupplierFromClass(Class) 
            Object[] Assignments.getArgumentStrings(boolean) 
            List Assignments.generateAssignmentsFromTypeAlone(ParameterSignature) 
            Object[] Assignments.getConstructorArguments() 
            Object[] Assignments.getActualValues(int,int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 13]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodSonOfWrongTypedField
fields: {}
statics: {}
supers: {
           class org.junit.rules.TestRuleTest$MethodWrongTypedField
         }
objc_protocols: {}
methods: {
            TestRuleTest$MethodSonOfWrongTypedField.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 425, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.AssumingInTheoriesTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AssumingInTheoriesTest.theoryMeansOnlyAssumeShouldFail() 
            AssumingInTheoriesTest.<init>() 
            void AssumingInTheoriesTest.noTheoryAnnotationMeansAssumeShouldIgnore()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false

class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$ExceptionInBeforeTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ForwardCompatibilityTest$ExceptionInBeforeTest.nothing() 
            void ForwardCompatibilityTest$ExceptionInBeforeTest.error() 
            ForwardCompatibilityTest$ExceptionInBeforeTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 179, column 24]}]}
dummy: false
class org.junit.runners.model.TestClassTest$AnnotatedClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$AnnotatedClass.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.Ignore>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 247, column 17]}]}
dummy: false
class org.junit.rules.TestRuleTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.TimeoutRuleTest$AbstractTimeoutTest
fields: {
           org.junit.rules.TemporaryFolder* tmpFile <_final _org.junit.Rule>
         }
statics: {
            java.lang.StringBuffer* logger <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TimeoutRuleTest$AbstractTimeoutTest.<clinit>() 
            void TimeoutRuleTest$AbstractTimeoutTest.run1() 
            void TimeoutRuleTest$AbstractTimeoutTest.run5() 
            void TimeoutRuleTest$AbstractTimeoutTest.run3() 
            TimeoutRuleTest$AbstractTimeoutTest.<init>() 
            void TimeoutRuleTest$AbstractTimeoutTest.run2() 
            void TimeoutRuleTest$AbstractTimeoutTest.run6() 
            void TimeoutRuleTest$AbstractTimeoutTest.run4()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 30, column 33]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$SuccessWithTimeoutTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutTest$SuccessWithTimeoutTest.<init>() 
            void TimeoutTest$SuccessWithTimeoutTest.success()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 61, column 24]}]}
dummy: false
class java.lang.Double
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.MethodRulesTest$WrongTypedField
fields: {
           int x <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$WrongTypedField.foo() 
            MethodRulesTest$WrongTypedField.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 238, column 24]}]}
dummy: false
class org.junit.tests.manipulation.SingleMethodTest$TestOne
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SingleMethodTest$TestOne.<init>() 
            void SingleMethodTest$TestOne.b() 
            void SingleMethodTest$TestOne.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 137, column 24]}]}
dummy: false
class org.junit.tests.listening.ListenerTest$1
fields: {
           org.junit.tests.listening.ListenerTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            ListenerTest$1.<init>(ListenerTest) 
            void ListenerTest$1.testRunStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 43]}]}
dummy: false
class org.junit.tests.listening.RunnerTest$1
fields: {
           org.junit.tests.listening.RunnerTest* this$0 <_final> 
           org.junit.tests.listening.RunnerTest* this$0 <_final> 
           int testCount <>
         }
statics: {}
supers: {
           class org.junit.tests.listening.RunnerTest$MyListener
         }
objc_protocols: {}
methods: {
            RunnerTest$1.<init>(RunnerTest) 
            void RunnerTest$1.testFinished(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 65, column 48]}]}
dummy: false
class org.junit.internal.runners.SuiteMethod
fields: {
           junit.framework.Test* test <_volatile>
         }
statics: {}
supers: {
           class org.junit.internal.runners.JUnit38ClassRunner
         }
objc_protocols: {}
methods: {
            Test SuiteMethod.testFromSuiteMethod(Class) 
            SuiteMethod.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.model.FrameworkFieldTest$ClassWithDummyField
fields: {
           int annotatedField <_final _org.junit.Rule> 
           int dummyField <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FrameworkFieldTest$ClassWithDummyField.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 51, column 25]}]}
dummy: false
class org.junit.tests.description.AnnotatedDescriptionTest$ValuedAnnotation
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            String AnnotatedDescriptionTest$ValuedAnnotation.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 53, column 22]}]}
dummy: false
class org.junit.runner.JUnitCommandLineParseResult
fields: {
           java.util.List* filterSpecs <_final> 
           java.util.List* parserErrors <_final> 
           java.util.List* classes <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Request JUnitCommandLineParseResult.errorReport(Throwable) 
            JUnitCommandLineParseResult JUnitCommandLineParseResult.parse(String[]) 
            void JUnitCommandLineParseResult.parseArgs(String[]) 
            Request JUnitCommandLineParseResult.createRequest(Computer) 
            void JUnitCommandLineParseResult.parseParameters(String[]) 
            JUnitCommandLineParseResult.<init>() 
            List JUnitCommandLineParseResult.getFilterSpecs() 
            String[] JUnitCommandLineParseResult.parseOptions(String[]) 
            String[] JUnitCommandLineParseResult.copyArray(String[],int,int) 
            List JUnitCommandLineParseResult.getClasses() 
            Request JUnitCommandLineParseResult.applyFilterSpecs(Request)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 6]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$ErrorCollectorNotCalledBySuccessfulTest
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$ErrorCollectorNotCalledBySuccessfulTest.<init>() 
            void ErrorCollectorTest$ErrorCollectorNotCalledBySuccessfulTest.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 309, column 24]}]}
dummy: false
class org.junit.tests.experimental.max.MaxStarterTest$MalformedJUnit38Test
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MaxStarterTest$MalformedJUnit38Test.<init>() 
            void MaxStarterTest$MalformedJUnit38Test.testSucceeds()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 230, column 25]}]}
dummy: false

class org.junit.rules.RuleMemberValidatorTest$TestWithArbitraryObjectWithRuleAnnotation
fields: {
           java.lang.Object* arbitraryObject <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestWithArbitraryObjectWithRuleAnnotation.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 221, column 24]}]}
dummy: false
class org.junit.tests.experimental.AllExperimentalTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllExperimentalTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.AllCategoriesTests, org.junit.tests.experimental.max.AllMaxTests, org.junit.tests.experimental.parallel.AllParallelTests, org.junit.tests.experimental.results.AllResultsTests, org.junit.tests.experimental.theories.AllTheoriesTests, org.junit.tests.experimental.AssumptionTest, org.junit.tests.experimental.MatcherTest, org.junit.tests.experimental.theories.extendingwithstubs.StubbedTheoriesTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 24, column 13]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckRunnableThatThrowsNoExceptionAlthoughOneIsExpected
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckRunnableThatThrowsNoExceptionAlthoughOneIsExpected.<init>() 
            void ErrorCollectorTest$CheckRunnableThatThrowsNoExceptionAlthoughOneIsExpected.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 296, column 24]}]}
dummy: false
class junit.tests.extensions.ExtensionTest$3
fields: {
           junit.tests.extensions.ExtensionTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            ExtensionTest$3.<init>(ExtensionTest,String) 
            void ExtensionTest$3.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 47]}]}
dummy: false
class org.hamcrest.TypeSafeDiagnosingMatcher
fields: {
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            void TypeSafeDiagnosingMatcher.<clinit>() 
            boolean TypeSafeDiagnosingMatcher.matchesSafely(Object,Description) 
            void TypeSafeDiagnosingMatcher.describeMismatch(Object,Description) 
            boolean TypeSafeDiagnosingMatcher.matches(Object) 
            TypeSafeDiagnosingMatcher.<init>() 
            TypeSafeDiagnosingMatcher.<init>(ReflectiveTypeFinder) 
            TypeSafeDiagnosingMatcher.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.rules.TempFolderRuleTest$CreatesRandomFiles
fields: {
           org.junit.rules.TemporaryFolder* folder <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TempFolderRuleTest$CreatesRandomFiles.<init>() 
            void TempFolderRuleTest$CreatesRandomFiles.testUsingRandomTempFiles()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 141, column 24]}]}
dummy: false
class junit.tests.extensions.RepeatedTestTest
fields: {
           junit.framework.TestSuite* fSuite <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void RepeatedTestTest.testRepeatedMoreThanOnce() 
            RepeatedTestTest.<init>(String) 
            void RepeatedTestTest.testRepeatedNegative() 
            void RepeatedTestTest.testRepeatedZero() 
            void RepeatedTestTest.testRepeatedOnce()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$StaticPublicNonDataPoints
fields: {}
statics: {
            int ONE <> 
            int ZERO <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuccessfulWithDataPointFields$StaticPublicNonDataPoints.<clinit>() 
            SuccessfulWithDataPointFields$StaticPublicNonDataPoints.<init>() 
            void SuccessfulWithDataPointFields$StaticPublicNonDataPoints.onlyAnnotatedFields(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 198, column 24]}]}
dummy: false
class org.junit.runners.Parameterized$RunnersFactory
fields: {
           org.junit.runners.model.FrameworkMethod* parametersMethod <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           org.junit.runner.Runner* runnerOverride <_final> 
           java.util.List* allParameters <_final> 
           int parameterCount <_final>
         }
statics: {
            org.junit.runners.parameterized.ParametersRunnerFactory* DEFAULT_FACTORY <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void Parameterized$RunnersFactory.<clinit>() 
            TestWithParameters Parameterized$RunnersFactory.createTestWithNotNormalizedParameters(String,int,Object) 
            TestWithParameters Parameterized$RunnersFactory.createTestWithParameters(TestClass,String,int,Object[]) 
            Parameterized$RunnersFactory.<init>(Class,Parameterized$1) 
            FrameworkMethod Parameterized$RunnersFactory.getParametersMethod(TestClass) 
            List Parameterized$RunnersFactory.createRunnersForParameters(Iterable,String,ParametersRunnerFactory) 
            List Parameterized$RunnersFactory.createTestsForParameters(Iterable,String) 
            List Parameterized$RunnersFactory.access$100(Parameterized$RunnersFactory) 
            ParametersRunnerFactory Parameterized$RunnersFactory.getParametersRunnerFactory() 
            Exception Parameterized$RunnersFactory.parametersMethodReturnedWrongType(TestClass,FrameworkMethod) 
            Parameterized$RunnersFactory.<init>(Class) 
            List Parameterized$RunnersFactory.allParameters(TestClass,FrameworkMethod) 
            List Parameterized$RunnersFactory.createRunners() 
            int Parameterized$RunnersFactory.access$200(Parameterized$RunnersFactory) 
            Object[] Parameterized$RunnersFactory.normalizeParameters(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 360, column 25]}]}
dummy: false
class org.junit.rules.TestRule
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            Statement TestRule.apply(Statement,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckCallableThatDoesNotThrowAnException
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckCallableThatDoesNotThrowAnException.<init>() 
            void ErrorCollectorTest$CheckCallableThatDoesNotThrowAnException.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 253, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$OneTimeTeardown
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$OneTimeTeardown.<init>() 
            void AnnotationTest$OneTimeTeardown.two() 
            void AnnotationTest$OneTimeTeardown.one() 
            void AnnotationTest$OneTimeTeardown.once()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 290, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryValidatorTest$SampleCategory
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryValidatorTest$SampleCategory.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 24]}]}
dummy: false
class org.junit.AssumptionViolatedExceptionTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.framework.ComparisonCompactorTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void ComparisonCompactorTest.testComparisonErrorOverlappingMatches2Context() 
            void ComparisonCompactorTest.testStartAndEndContext() 
            void ComparisonCompactorTest.testComparisonErrorWithExpectedNullContext() 
            void ComparisonCompactorTest.testStartSame() 
            void ComparisonCompactorTest.testComparisonErrorEndSameCompleteContext() 
            void ComparisonCompactorTest.testComparisonErrorWithActualNullContext() 
            void ComparisonCompactorTest.testComparisonErrorStartSameComplete() 
            ComparisonCompactorTest.<init>() 
            void ComparisonCompactorTest.testSame() 
            void ComparisonCompactorTest.testComparisonErrorOverlappingMatchesContext() 
            void ComparisonCompactorTest.testComparisonErrorWithActualNull() 
            void ComparisonCompactorTest.testStartAndEndContextWithEllipses() 
            void ComparisonCompactorTest.testBug609972() 
            void ComparisonCompactorTest.testEndSame() 
            void ComparisonCompactorTest.testComparisonErrorOverlappingMatches() 
            void ComparisonCompactorTest.testComparisonErrorWithExpectedNull() 
            void ComparisonCompactorTest.testMessage() 
            void ComparisonCompactorTest.testComparisonErrorEndSameComplete() 
            void ComparisonCompactorTest.testNoContextStartAndEndSame() 
            void ComparisonCompactorTest.testComparisonErrorOverlappingMatches2()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 13]}]}
dummy: false
class org.junit.runner.JUnitCommandLineParseResultTest
fields: {
           org.junit.rules.ExpectedException* expectedException <_org.junit.Rule> 
           org.junit.runner.JUnitCommandLineParseResult* jUnitCommandLineParseResult <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JUnitCommandLineParseResultTest.shouldCreateFailureUponUnknownOption() 
            void JUnitCommandLineParseResultTest.shouldParseFilterArgWithEqualsSyntax() 
            void JUnitCommandLineParseResultTest.shouldCreateFailureUponUnknownTestClass() 
            void JUnitCommandLineParseResultTest.shouldCreateFailureUponUnfoundFilterFactory() 
            JUnitCommandLineParseResultTest.<init>() 
            void JUnitCommandLineParseResultTest.shouldParseFilterArgInWhichValueIsASeparateArg() 
            void JUnitCommandLineParseResultTest.shouldCreateFailureUponUncreatedFilter() 
            void JUnitCommandLineParseResultTest.shouldCreateFailureUponBaldFilterOptionNotFollowedByValue() 
            void JUnitCommandLineParseResultTest.shouldStopParsingOptionsUponDoubleHyphenArg() 
            void JUnitCommandLineParseResultTest.shouldAddToClasses() 
            void JUnitCommandLineParseResultTest.shouldStopParsingOptionsUponNonOption()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false
class java.lang.IllegalStateException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.ErrorCollectorTest$CheckCallableThatThrowsAnException$1
fields: {
           org.junit.rules.ErrorCollectorTest$CheckCallableThatThrowsAnException* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            Object ErrorCollectorTest$CheckCallableThatThrowsAnException$1.call() 
            ErrorCollectorTest$CheckCallableThatThrowsAnException$1.<init>(ErrorCollectorTest$CheckCallableThatThrowsAnException)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 197, column 59]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SuperTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$SuperTest.<init>() 
            void AnnotationTest$SuperTest.two() 
            void AnnotationTest$SuperTest.one()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 693, column 24]}]}
dummy: false
class org.junit.tests.manipulation.FilterableTest$FilteredTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FilterableTest$FilteredTest.skipThis() 
            void FilterableTest$FilteredTest.runThis() 
            List FilterableTest$FilteredTest.parameters() 
            FilterableTest$FilteredTest.<init>(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.manipulation.FilterableTest$FilteredRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 24]}]}
dummy: false
class org.junit.internal.runners.InitializationError
fields: {
           java.util.List* fErrors <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            InitializationError.<init>(List) 
            InitializationError.<init>(String) 
            List InitializationError.getCauses() 
            InitializationError.<init>(Throwable[])
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$RunSlowFromVerySlow
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$RunSlowFromVerySlow.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoryTest$SlowTests") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$OneVerySlowTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 320, column 24]}]}
dummy: false

class org.junit.rules.RuleMemberValidatorTest$MethodTestWithStaticClassAndTestRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$MethodTestWithStaticClassAndTestRule.<init>() 
            TestRule RuleMemberValidatorTest$MethodTestWithStaticClassAndTestRule.getTemporaryFolder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 261, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$OneThatIsBothFastAndSlow
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$OneThatIsBothFastAndSlow.<init>() 
            void CategoryTest$OneThatIsBothFastAndSlow.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 286, column 24]}]}
dummy: false
class org.junit.runner.manipulation.Ordering$Factory
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            Ordering Ordering$Factory.create(Ordering$Context)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.tests.junit3compatibility.AllTestsTest$All
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTestsTest$All.<init>() 
            Test AllTestsTest$All.suite()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.AllTests")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 24]}]}
dummy: false
class org.junit.internal.SerializableValueDescription
fields: {
           java.lang.String* value <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.io.Serializable
         }
objc_protocols: {}
methods: {
            Object SerializableValueDescription.asSerializableValue(Object) 
            SerializableValueDescription.<init>(Object) 
            String SerializableValueDescription.toString()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.Checks
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Object Checks.notNull(Object) 
            Checks.<init>() 
            Object Checks.notNull(Object,String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 4, column 19]}]}
dummy: false

class org.junit.rules.RuleMemberValidatorTest$TestWithClassRuleMethodThatReturnsMethodRule$1
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestWithClassRuleMethodThatReturnsMethodRule$1.<init>() 
            Statement RuleMemberValidatorTest$TestWithClassRuleMethodThatReturnsMethodRule$1.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 112, column 36]}]}
dummy: false
class org.junit.tests.junit3compatibility.AllTestsTest$JUnit4Test
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTestsTest$JUnit4Test.<init>() 
            void AllTestsTest$JUnit4Test.testSomething()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 54, column 24]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerTest
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParentRunnerTest.<clinit>() 
            void ParentRunnerTest.assumptionViolatedAtParentLevel() 
            void ParentRunnerTest.failWithHelpfulMessageForProtectedClassRule() 
            void ParentRunnerTest.assertClassHasFailureMessage(Class,String) 
            ParentRunnerTest.<init>() 
            void ParentRunnerTest.cannotBeCreatedWithNonPublicTestClass() 
            void ParentRunnerTest.useChildHarvester() 
            void ParentRunnerTest.parentRunnerTestMethods() 
            Matcher ParentRunnerTest.isEmpty() 
            void ParentRunnerTest.failWithHelpfulMessageForNonStaticClassRule() 
            void ParentRunnerTest.testMultipleFilters() 
            ParentRunnerTest$CountingRunListener ParentRunnerTest.runTestWithParentRunner(Class) 
            void ParentRunnerTest.assertionErrorAtParentLevelTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithExtendedParameterSources$ShouldRejectTheoriesWithOnlyDisallowedNullData
fields: {}
statics: {
            java.lang.String* value <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithExtendedParameterSources$ShouldRejectTheoriesWithOnlyDisallowedNullData.<clinit>() 
            void WithExtendedParameterSources$ShouldRejectTheoriesWithOnlyDisallowedNullData.allStringsAreNonNull(String) 
            WithExtendedParameterSources$ShouldRejectTheoriesWithOnlyDisallowedNullData.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 73, column 24]}]}
dummy: false
class org.junit.tests.experimental.parallel.ParallelClassTest$Example2
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParallelClassTest$Example2.<init>() 
            void ParallelClassTest$Example2.two() 
            void ParallelClassTest$Example2.one()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 42, column 24]}]}
dummy: false
class org.junit.runner.notification.RunNotifier$8
fields: {
           org.junit.runner.Description* val$description <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier$SafeNotifier
         }
objc_protocols: {}
methods: {
            void RunNotifier$8.notifyListener(RunListener) 
            RunNotifier$8.<init>(RunNotifier,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 206, column 27]}]}
dummy: false
class org.junit.runner.FilterFactoryParams
fields: {
           java.lang.String* args <_final> 
           org.junit.runner.Description* topLevelDescription <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String FilterFactoryParams.getArgs() 
            FilterFactoryParams.<init>(Description,String) 
            Description FilterFactoryParams.getTopLevelDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.MethodRulesTest$UsesCustomMethodRule
fields: {
           org.junit.rules.MethodRulesTest$CustomTestName* counter <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$UsesCustomMethodRule.foo() 
            MethodRulesTest$UsesCustomMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 292, column 24]}]}
dummy: false

class org.junit.rules.RuleMemberValidatorTest$TestWithClassRuleMethodReturnsAnArbitraryObject
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestWithClassRuleMethodReturnsAnArbitraryObject.<init>() 
            Object RuleMemberValidatorTest$TestWithClassRuleMethodReturnsAnArbitraryObject.arbitraryObject()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 154, column 24]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$TestClassRunnerIsSortableWithSuiteMethod
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SortableTest$TestClassRunnerIsSortableWithSuiteMethod.<clinit>() 
            String SortableTest$TestClassRunnerIsSortableWithSuiteMethod.access$384(Object) 
            void SortableTest$TestClassRunnerIsSortableWithSuiteMethod.sortingBackwardWorksOnTestClassRunner() 
            void SortableTest$TestClassRunnerIsSortableWithSuiteMethod.resetLog() 
            SortableTest$TestClassRunnerIsSortableWithSuiteMethod.<init>() 
            void SortableTest$TestClassRunnerIsSortableWithSuiteMethod.sortingForwardWorksOnTestClassRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 156, column 24]}]}
dummy: false
class java.util.Collections
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.Stopwatch$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.model.InvalidTestClassErrorTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            InvalidTestClassErrorTest.<init>() 
            void InvalidTestClassErrorTest.invalidTestClassErrorShouldListAllValidationErrorsInItsMessage()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.tests.listening.ListenerTest$2
fields: {
           org.junit.tests.listening.ListenerTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            ListenerTest$2.<init>(ListenerTest) 
            void ListenerTest$2.testRunStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 43]}]}
dummy: false
class org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest$1
fields: {
           org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerTest$1.testFinished(Description) 
            BlockJUnit4ClassRunnerTest$1.<init>(BlockJUnit4ClassRunnerTest) 
            void BlockJUnit4ClassRunnerTest$1.testStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 54, column 44]}]}
dummy: false
class org.junit.rules.ClassRulesTest$ClassRuleOrderingDefault
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$ClassRuleOrderingDefault.foo() 
            void ClassRulesTest$ClassRuleOrderingDefault.bar() 
            TestRule ClassRulesTest$ClassRuleOrderingDefault.b() 
            TestRule ClassRulesTest$ClassRuleOrderingDefault.a() 
            ClassRulesTest$ClassRuleOrderingDefault.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.NAME_ASCENDING")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 287, column 24]}]}
dummy: false

class org.junit.internal.runners.statements.ExpectExceptionTest$PassingStatement
fields: {}
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            ExpectExceptionTest$PassingStatement.<init>() 
            void ExpectExceptionTest$PassingStatement.evaluate() 
            ExpectExceptionTest$PassingStatement.<init>(ExpectExceptionTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 71, column 25]}]}
dummy: false
class org.junit.tests.experimental.AssumptionTest$HasFailingAssumption
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AssumptionTest$HasFailingAssumption.<init>() 
            void AssumptionTest$HasFailingAssumption.assumptionsFail()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 24]}]}
dummy: false
class org.junit.tests.running.classes.ParameterizedTestTest$BeforeAndAfter
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$BeforeAndAfter.aTest() 
            void ParameterizedTestTest$BeforeAndAfter.after() 
            void ParameterizedTestTest$BeforeAndAfter.before() 
            ParameterizedTestTest$BeforeAndAfter.<init>(int) 
            Collection ParameterizedTestTest$BeforeAndAfter.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 235, column 24]}]}
dummy: false
class java.io.ByteArrayOutputStream
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.ClassRulesTest$MethodSubclassOfTestWithClassRule
fields: {}
statics: {
            org.junit.rules.ClassRulesTest$Counter* counter <>
          }
supers: {
           class org.junit.rules.ClassRulesTest$MethodExampleTestWithClassRule
         }
objc_protocols: {}
methods: {
            ClassRulesTest$MethodSubclassOfTestWithClassRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 181, column 24]}]}
dummy: false
class org.junit.runners.model.TestClass$1
fields: {
           org.junit.runners.model.TestClass* this$0 <_final> 
           java.util.List* val$results <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.model.MemberValueConsumer
         }
objc_protocols: {}
methods: {
            void TestClass$1.accept(FrameworkMember,Object) 
            TestClass$1.<init>(TestClass,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 230, column 45]}]}
dummy: false
class org.junit.internal.MethodSorter$2
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int MethodSorter$2.compare(Object,Object) 
            MethodSorter$2.<init>() 
            int MethodSorter$2.compare(Method,Method)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 85]}]}
dummy: false
class org.hamcrest.core.CombinableMatcher
fields: {
           org.hamcrest.Matcher* matcher <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeDiagnosingMatcher
         }
objc_protocols: {}
methods: {
            boolean CombinableMatcher.matchesSafely(Object,Description) 
            CombinableMatcher CombinableMatcher.or(Matcher) 
            CombinableMatcher$CombinableEitherMatcher CombinableMatcher.either(Matcher) 
            CombinableMatcher.<init>(Matcher) 
            CombinableMatcher$CombinableBothMatcher CombinableMatcher.both(Matcher) 
            CombinableMatcher CombinableMatcher.and(Matcher) 
            void CombinableMatcher.describeTo(Description) 
            ArrayList CombinableMatcher.templatedListWith(Matcher)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.ExternalResourceRuleTest$3
fields: {
           org.junit.rules.ExternalResourceRuleTest* this$0 <_final> 
           java.util.concurrent.atomic.AtomicReference* val$assumptionViolatedException <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void ExternalResourceRuleTest$3.evaluate() 
            ExternalResourceRuleTest$3.<init>(ExternalResourceRuleTest,AtomicReference)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 137, column 48]}]}
dummy: false
class org.junit.internal.management.FakeThreadMXBean
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.management.ThreadMXBean
         }
objc_protocols: {}
methods: {
            long FakeThreadMXBean.getThreadCpuTime(long) 
            FakeThreadMXBean.<init>() 
            boolean FakeThreadMXBean.isThreadCpuTimeSupported()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 12]}]}
dummy: false
class org.junit.rules.ErrorCollectorTest$CheckTwoMatchersThatFail
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckTwoMatchersThatFail.<init>() 
            void ErrorCollectorTest$CheckTwoMatchersThatFail.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 180, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$UseParameterizedFactoryAbstractTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Iterable ParameterizedTestTest$UseParameterizedFactoryAbstractTest.data() 
            ParameterizedTestTest$UseParameterizedFactoryAbstractTest.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized") _org.junit.runners.Parameterized$UseParametersRunnerFactory(value="org.junit.tests.running.classes.ParameterizedTestTest$ExceptionThrowingRunnerFactory")>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 742, column 33]}]}
dummy: false
class org.junit.validator.AnnotationsValidator$AnnotatableValidator
fields: {}
statics: {
            org.junit.validator.AnnotationValidatorFactory* ANNOTATION_VALIDATOR_FACTORY <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationsValidator$AnnotatableValidator.<clinit>() 
            List AnnotationsValidator$AnnotatableValidator.validateTestClass(TestClass) 
            List AnnotationsValidator$AnnotatableValidator.validateAnnotatable(Annotatable) 
            AnnotationsValidator$AnnotatableValidator.<init>() 
            List AnnotationsValidator$AnnotatableValidator.validateAnnotatable(AnnotationValidator,Annotatable) 
            Iterable AnnotationsValidator$AnnotatableValidator.getAnnotatablesForTestClass(TestClass) 
            AnnotationsValidator$AnnotatableValidator.<init>(AnnotationsValidator$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 43, column 34]}]}
dummy: false

class org.junit.internal.requests.ClassRequest$CustomAllDefaultPossibilitiesBuilder
fields: {
           org.junit.internal.requests.ClassRequest* this$0 <_final> 
           _Bool canUseSuiteMethod <_final> 
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.internal.builders.AllDefaultPossibilitiesBuilder
         }
objc_protocols: {}
methods: {
            ClassRequest$CustomAllDefaultPossibilitiesBuilder.<init>(ClassRequest) 
            RunnerBuilder ClassRequest$CustomAllDefaultPossibilitiesBuilder.suiteMethodBuilder() 
            ClassRequest$CustomAllDefaultPossibilitiesBuilder.<init>(ClassRequest,ClassRequest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 18]}]}
dummy: false
class java.io.OutputStream
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.Math
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.runner.notification.ConcurrentRunNotifierTest$ConcurrentRunListener
fields: {
           java.util.concurrent.atomic.AtomicInteger* fTestStarted <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            ConcurrentRunNotifierTest$ConcurrentRunListener.<init>() 
            ConcurrentRunNotifierTest$ConcurrentRunListener.<init>(ConcurrentRunNotifierTest$1) 
            void ConcurrentRunNotifierTest$ConcurrentRunListener.testStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 25]}]}
dummy: false
class org.junit.internal.StackTracesTest$ExceptionMessageMatcher
fields: {
           org.hamcrest.Matcher* matcher <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.junit.internal.StackTracesTest$StringMatcher
         }
objc_protocols: {}
methods: {
            boolean StackTracesTest$ExceptionMessageMatcher.matchesSafely(String) 
            StackTracesTest$ExceptionMessageMatcher.<init>(String) 
            boolean StackTracesTest$ExceptionMessageMatcher.matchesSafely(Object) 
            void StackTracesTest$ExceptionMessageMatcher.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 194, column 25]}]}
dummy: false
class org.junit.runners.model.TestClassTest$OuterClass2$StaticInnerClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$OuterClass2$StaticInnerClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 68, column 28]}]}
dummy: false
class org.junit.tests.running.classes.ParameterizedTestTest$IncorrectTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            int ParameterizedTestTest$IncorrectTest.test() 
            ParameterizedTestTest$IncorrectTest.<init>() 
            Collection ParameterizedTestTest$IncorrectTest.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 509, column 24]}]}
dummy: false
class java.nio.ByteBuffer
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.ClassRulesTest$SubclassOfTestWithClassRule
fields: {}
statics: {
            org.junit.rules.ClassRulesTest$Counter* counter <_org.junit.ClassRule>
          }
supers: {
           class org.junit.rules.ClassRulesTest$ExampleTestWithClassRule
         }
objc_protocols: {}
methods: {
            ClassRulesTest$SubclassOfTestWithClassRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 62, column 24]}]}
dummy: false
class org.junit.experimental.categories.JavadocTest$FastOrSmokeTestSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JavadocTest$FastOrSmokeTestSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.JavadocTest$FastTests, org.junit.experimental.categories.JavadocTest$SmokeTests") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.JavadocTest$A, org.junit.experimental.categories.JavadocTest$B")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 57, column 24]}]}
dummy: false
class org.junit.runner.OrderWithValidatorTest$TestAnnotatedWithFixMethodOrder
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithValidatorTest$TestAnnotatedWithFixMethodOrder.passes() 
            OrderWithValidatorTest$TestAnnotatedWithFixMethodOrder.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.JUnit4") _org.junit.runner.OrderWith(value="org.junit.runner.manipulation.Alphanumeric") _org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.NAME_ASCENDING")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 24]}]}
dummy: false
class org.junit.runner.OrderWithValidatorTest
fields: {
           org.junit.runner.OrderWithValidator* validator <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithValidatorTest.noErrorIsAddedForTestWithoutValdationErrors() 
            OrderWithValidatorTest.<init>() 
            void OrderWithValidatorTest.errorIsAddedWhenTestAnnotatedWithFixMethodOrder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$AdditionTestWithAnnotatedFields
fields: {
           int firstSummand <_org.junit.runners.Parameterized$Parameter> 
           int sum <_org.junit.runners.Parameterized$Parameter> 
           int secondSummand <_org.junit.runners.Parameterized$Parameter>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Iterable ParameterizedTestTest$AdditionTestWithAnnotatedFields.data() 
            ParameterizedTestTest$AdditionTestWithAnnotatedFields.<init>() 
            void ParameterizedTestTest$AdditionTestWithAnnotatedFields.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 141, column 24]}]}
dummy: false
class org.junit.tests.assertion.AssertionTest$NestedException
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.RuntimeException
         }
objc_protocols: {}
methods: {
            AssertionTest$NestedException.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 987, column 25]}]}
dummy: false
class org.junit.tests.experimental.parallel.ParallelClassTest$Example1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParallelClassTest$Example1.<init>() 
            void ParallelClassTest$Example1.two() 
            void ParallelClassTest$Example1.one()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 24]}]}
dummy: false

class org.junit.tests.running.methods.AnnotationTest$SimpleTestWithFutureProofExplicitRunner
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$SimpleTestWithFutureProofExplicitRunner.<init>() 
            void AnnotationTest$SimpleTestWithFutureProofExplicitRunner.success()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.JUnit4")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 51, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner
fields: {}
statics: {}
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner.run(RunNotifier) 
            Description OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner.getDescription() 
            OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing$UnOrderableRunner.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 273, column 28]}]}
dummy: false
class org.junit.runner.JUnitCommandLineParseResultTest$FilterFactoryStub
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runner.FilterFactory
         }
objc_protocols: {}
methods: {
            JUnitCommandLineParseResultTest$FilterFactoryStub.<init>() 
            Filter JUnitCommandLineParseResultTest$FilterFactoryStub.createFilter(FilterFactoryParams)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 132, column 24]}]}
dummy: false
class org.junit.internal.runners.ErrorReportingRunnerTest$1
fields: {
           java.util.List* val$firedFailures <_final> 
           org.junit.internal.runners.ErrorReportingRunnerTest* this$0 <_final> 
           java.util.List* listeners <_final> 
           _Bool pleaseStop <_volatile>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier
         }
objc_protocols: {}
methods: {
            void ErrorReportingRunnerTest$1.fireTestFailure(Failure) 
            ErrorReportingRunnerTest$1.<init>(ErrorReportingRunnerTest,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 52, column 34]}]}
dummy: false
class org.junit.runners.Parameterized$UseParametersRunnerFactory
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            Class Parameterized$UseParametersRunnerFactory.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Inherited _java.lang.annotation.Target(value="java.lang.annotation.ElementType.TYPE")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 265, column 22]}]}
dummy: false
class org.junit.ComparisonFailure$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.experimental.AssumptionTest$HasFailingAssumeInBefore
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AssumptionTest$HasFailingAssumeInBefore.failing() 
            AssumptionTest$HasFailingAssumeInBefore.<init>() 
            void AssumptionTest$HasFailingAssumeInBefore.checkForSomethingThatIsntThere()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 176, column 24]}]}
dummy: false
class org.junit.rules.DisableOnDebugTest$FailOnExecution
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            DisableOnDebugTest$FailOnExecution.<init>(DisableOnDebugTest$1) 
            Statement DisableOnDebugTest$FailOnExecution.apply(Statement,Description) 
            DisableOnDebugTest$FailOnExecution.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 36, column 25]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$TestWithThrowingBeforeMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SampleJUnit4Tests$TestWithThrowingBeforeMethod.alwaysPasses() 
            SampleJUnit4Tests$TestWithThrowingBeforeMethod.<init>() 
            void SampleJUnit4Tests$TestWithThrowingBeforeMethod.alwaysThrows()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 35, column 24]}]}
dummy: false
class junit.extensions.TestSetup
fields: {
           junit.framework.Test* fTest <>
         }
statics: {}
supers: {
           class junit.extensions.TestDecorator
         }
objc_protocols: {}
methods: {
            void TestSetup.run(TestResult) 
            void TestSetup.setUp() 
            void TestSetup.tearDown() 
            TestSetup.<init>(Test)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false
class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters$1
fields: {}
statics: {
            int[_*_](*) $SwitchMap$org$junit$runners$parameterized$BlockJUnit4ClassRunnerWithParameters$InjectionType <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerWithParameters$1.<clinit>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ThrowExceptionWithMatchingCause
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ThrowExceptionWithMatchingCause.throwExceptionWithMatchingCause() 
            ExpectedExceptionTest$ThrowExceptionWithMatchingCause.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 290, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$ChooseSlowFromBoth
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$ChooseSlowFromBoth.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoryTest$SlowTests") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$OneThatIsBothFastAndSlow")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 297, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodPrivateRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$MethodPrivateRule.foo() 
            TestRuleTest$MethodPrivateRule.<init>() 
            TestRule TestRuleTest$MethodPrivateRule.getRule()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 435, column 24]}]}
dummy: false
class org.junit.runner.notification.ConcurrentRunNotifierTest$2
fields: {
           org.junit.runner.notification.ConcurrentRunNotifierTest* this$0 <_final> 
           org.junit.runner.notification.ConcurrentRunNotifierTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest
         }
objc_protocols: {}
methods: {
            void ConcurrentRunNotifierTest$2.addListener(ConcurrentRunNotifierTest$ExaminedListener) 
            ConcurrentRunNotifierTest$2.<init>(ConcurrentRunNotifierTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 149, column 45]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.FailingDataPointMethods$HasFailingDataPointArrayMethod
fields: {}
statics: {
            int[_*_](*) num <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FailingDataPointMethods$HasFailingDataPointArrayMethod.<clinit>() 
            void FailingDataPointMethods$HasFailingDataPointArrayMethod.theory(int) 
            FailingDataPointMethods$HasFailingDataPointArrayMethod.<init>() 
            int[] FailingDataPointMethods$HasFailingDataPointArrayMethod.failingDataPoints()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 24]}]}
dummy: false
class org.junit.rules.MethodRulesTest$TestMethodRule$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.MethodRulesTest$TestMethodRule* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            MethodRulesTest$TestMethodRule$1.<init>(MethodRulesTest$TestMethodRule,Statement) 
            void MethodRulesTest$TestMethodRule$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 35]}]}
dummy: false

class org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithIgnoredClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithIgnoredClass.<init>() 
            void ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithIgnoredClass.test() 
            void ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithIgnoredClass.beforeClass()
          }
exported_obj_methods: {}
annots: {<_org.junit.Ignore>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 51, column 24]}]}
dummy: false
class org.junit.runner.RequestTest$FailingComputer
fields: {}
statics: {}
supers: {
           class org.junit.runner.Computer
         }
objc_protocols: {}
methods: {
            RequestTest$FailingComputer.<init>(RequestTest$1) 
            RequestTest$FailingComputer.<init>() 
            Runner RequestTest$FailingComputer.getSuite(RunnerBuilder,Class[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 25]}]}
dummy: false
class org.junit.runner.FilterFactoriesTest
fields: {
           org.junit.rules.ExpectedException* expectedException <_org.junit.Rule> 
           org.junit.rules.TestName* testName <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FilterFactoriesTest.shouldThrowExceptionIfNotInstantiable() 
            Request FilterFactoriesTest.createSuiteRequest() 
            void FilterFactoriesTest.shouldCreateFilterWithNoArguments() 
            FilterFactoriesTest.<init>() 
            void FilterFactoriesTest.shouldCreateFilter() 
            void FilterFactoriesTest.shouldPassOnDescriptionToFilterFactory() 
            void FilterFactoriesTest.shouldCreateFilterWithArguments() 
            void FilterFactoriesTest.shouldThrowExceptionIfNotFilterFactory()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.OldTestClassAdaptingListenerTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OldTestClassAdaptingListenerTest.addFailureDelegatesToNotifier() 
            OldTestClassAdaptingListenerTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.internal.matchers.StacktracePrintingMatcherTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void StacktracePrintingMatcherTest.failsWhenInnerMatcherFails() 
            StacktracePrintingMatcherTest.<init>() 
            void StacktracePrintingMatcherTest.succeedsWhenInnerMatcherSucceeds() 
            void StacktracePrintingMatcherTest.assertThatIncludesStacktrace()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false
class org.junit.runners.model.TestClassTest$OuterClass$NonStaticInnerClass
fields: {
           org.junit.runners.model.TestClassTest$OuterClass* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$OuterClass$NonStaticInnerClass.<init>(TestClassTest$OuterClass)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 55, column 21]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithExtendedParameterSources$ParameterAnnotations
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            WithExtendedParameterSources$ParameterAnnotations.<init>() 
            void WithExtendedParameterSources$ParameterAnnotations.everythingIsOne(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 24]}]}
dummy: false
class org.junit.tests.deprecated.JUnit4ClassRunnerTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JUnit4ClassRunnerTest.runWithOldJUnit4ClassRunnerAndBadConstructor() 
            JUnit4ClassRunnerTest.<init>() 
            void JUnit4ClassRunnerTest.runWithOldJUnit4ClassRunner()
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.runner.FilterFactoriesTest$FilterFactoryStub
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runner.FilterFactory
         }
objc_protocols: {}
methods: {
            FilterFactoriesTest$FilterFactoryStub.<init>() 
            Filter FilterFactoriesTest$FilterFactoryStub.createFilter(FilterFactoryParams)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 96, column 24]}]}
dummy: false
class org.junit.internal.MethodSorterTest
fields: {}
statics: {
            java.lang.String* DELTA <_final> 
            java.lang.String* ALPHA <_final> 
            java.lang.String* SUPER_METHOD <_final> 
            java.lang.String* GAMMA_VOID <_final> 
            java.lang.String* EPSILON <_final> 
            java.lang.String* BETA <_final> 
            java.lang.String* SUB_METHOD <_final> 
            java.lang.String* GAMMA_BOOLEAN <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodSorterTest.testAscendingMethodSorter() 
            void MethodSorterTest.testMethodsNullSorterSuper() 
            MethodSorterTest.<init>() 
            void MethodSorterTest.testDefaultMethodSorter() 
            List MethodSorterTest.getDeclaredMethodNames(Class) 
            void MethodSorterTest.testMethodsNullSorterSub() 
            void MethodSorterTest.testMethodsNullSorterSelf() 
            void MethodSorterTest.testJvmMethodSorter()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false

class org.junit.internal.runners.JUnit38ClassRunner$OldTestClassAdaptingListener
fields: {
           org.junit.runner.notification.RunNotifier* notifier <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.TestListener
         }
objc_protocols: {}
methods: {
            void JUnit38ClassRunner$OldTestClassAdaptingListener.addFailure(Test,AssertionFailedError) 
            void JUnit38ClassRunner$OldTestClassAdaptingListener.startTest(Test) 
            Description JUnit38ClassRunner$OldTestClassAdaptingListener.asDescription(Test) 
            void JUnit38ClassRunner$OldTestClassAdaptingListener.endTest(Test) 
            Class JUnit38ClassRunner$OldTestClassAdaptingListener.getEffectiveClass(Test) 
            JUnit38ClassRunner$OldTestClassAdaptingListener.<init>(RunNotifier,JUnit38ClassRunner$1) 
            JUnit38ClassRunner$OldTestClassAdaptingListener.<init>(RunNotifier) 
            String JUnit38ClassRunner$OldTestClassAdaptingListener.getName(Test) 
            void JUnit38ClassRunner$OldTestClassAdaptingListener.addError(Test,Throwable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 31]}]}
dummy: false
class org.junit.runners.model.TestClassTest
fields: {
           org.junit.rules.ExpectedException* exception <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestClassTest.hasHashCodeWithoutJavaClass() 
            void TestClassTest.providesAnnotatedMethodsSortedByName() 
            void TestClassTest.dontMarkStaticInnerClassAsNonStatic() 
            void TestClassTest.isEqualToTestClassThatWrapsNoJavaClassToo() 
            void TestClassTest.fieldsOnSubclassesShadowSuperclasses() 
            void TestClassTest.identifiesNonPublicModifier() 
            void TestClassTest.annotatedMethodValues() 
            void TestClassTest.presentAnnotationIsAvailable() 
            TestClassTest.<init>() 
            void TestClassTest.providesAnnotatedFieldsSortedByName() 
            void TestClassTest.isNotEqualToNull() 
            void TestClassTest.complainIfMultipleConstructors() 
            void TestClassTest.identifiesPublicModifier() 
            void TestClassTest.getAnnotatedMethodsDoesNotReturnMethodWithoutAnnotation() 
            void TestClassTest.dontMarkNonInnerClassAsInnerClass() 
            void TestClassTest.isNotEqualToTestClassThatWrapsADifferentJavaClass() 
            void TestClassTest.identifyNonStaticInnerClass() 
            void TestClassTest.isEqualToTestClassThatWrapsSameJavaClass() 
            void TestClassTest.missingAnnotationIsNotAvailable() 
            List TestClassTest.extractNames(List) 
            void TestClassTest.annotatedFieldValues() 
            void TestClassTest.hasSameHashCodeAsTestClassThatWrapsSameJavaClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 13]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$WronglyExpectsExceptionMessage
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$WronglyExpectsExceptionMessage.<init>() 
            void ExpectedExceptionTest$WronglyExpectsExceptionMessage.doesntThrowAnything()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 179, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields$NullsOK
fields: {}
statics: {
            java.lang.String* A <_org.junit.experimental.theories.DataPoint> 
            java.lang.String* NULL <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UnsuccessfulWithDataPointFields$NullsOK.<clinit>() 
            UnsuccessfulWithDataPointFields$NullsOK.<init>() 
            void UnsuccessfulWithDataPointFields$NullsOK.everythingIsA(String)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 67, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasDataPointsListFieldWithOverlyGenericTypes
fields: {}
statics: {
            java.util.List* list <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AllMembersSupplierTest$HasDataPointsListFieldWithOverlyGenericTypes.<clinit>() 
            AllMembersSupplierTest$HasDataPointsListFieldWithOverlyGenericTypes.<init>() 
            void AllMembersSupplierTest$HasDataPointsListFieldWithOverlyGenericTypes.theory(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 193, column 24]}]}
dummy: false
class org.junit.tests.description.AllDescriptionTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllDescriptionTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.description.AnnotatedDescriptionTest, org.junit.tests.description.SuiteDescriptionTest, org.junit.tests.description.TestDescriptionMethodNameTest, org.junit.tests.description.TestDescriptionTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.validator.AllValidatorTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllValidatorTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.validator.AnnotationsValidatorTest, org.junit.validator.AnnotationValidatorFactoryTest, org.junit.validator.PublicClassValidatorTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class junit.tests.framework.TestCaseTest$10
fields: {
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestCaseTest$10.<init>(TestCaseTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 179, column 36]}]}
dummy: false
class org.junit.tests.experimental.max.MaxStarterTest$TwoTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MaxStarterTest$TwoTests.<init>() 
            void MaxStarterTest$TwoTests.succeed() 
            void MaxStarterTest$TwoTests.dontSucceed()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 24]}]}
dummy: false
class org.junit.internal.runners.ErrorReportingRunnerTest$TestClassWithErrors
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ErrorReportingRunnerTest$TestClassWithErrors.staticAfterMethod() 
            ErrorReportingRunnerTest$TestClassWithErrors.<init>() 
            String ErrorReportingRunnerTest$TestClassWithErrors.testMethodReturningString() 
            void ErrorReportingRunnerTest$TestClassWithErrors.staticBeforeMethod()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 80, column 25]}]}
dummy: false
class org.junit.runners.model.TestClassTest$SuperclassWithField
fields: {
           org.junit.rules.TestRule* x <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$SuperclassWithField.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 24]}]}
dummy: false
class org.junit.rules.MethodRulesTest$SonOfNonPublicExampleTest
fields: {
           org.junit.rules.MethodRule* example <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.rules.MethodRulesTest$NonPublicExampleTest
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$SonOfNonPublicExampleTest.nothing() 
            MethodRulesTest$SonOfNonPublicExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 74, column 24]}]}
dummy: false
class org.junit.rules.TempFolderRuleTest$CreatesSubFolder
fields: {
           org.junit.rules.TemporaryFolder* folder <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TempFolderRuleTest$CreatesSubFolder.testUsingTempTreeFolders() 
            void TempFolderRuleTest$CreatesSubFolder.testUsingTempFolderStringReflection() 
            TempFolderRuleTest$CreatesSubFolder.<init>() 
            String TempFolderRuleTest$CreatesSubFolder.join(String[]) 
            void TempFolderRuleTest$CreatesSubFolder.testUsingTempFolderString()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 56, column 24]}]}
dummy: false
class junit.tests.extensions.RepeatedTestTest$SuccessTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            RepeatedTestTest$SuccessTest.<init>() 
            void RepeatedTestTest$SuccessTest.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false
class org.junit.tests.AllTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTests.<init>() 
            Test AllTests.suite()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.assertion.AllAssertionTests, org.junit.tests.deprecated.AllDeprecatedTests, org.junit.tests.description.AllDescriptionTests, org.junit.tests.experimental.AllExperimentalTests, org.junit.internal.AllInternalTests, org.junit.tests.junit3compatibility.AllJUnit3CompatibilityTests, org.junit.tests.listening.AllListeningTests, org.junit.tests.manipulation.AllManipulationTests, org.junit.rules.AllRulesTests, org.junit.runners.AllRunnersTests, org.junit.runner.AllRunnerTests, org.junit.tests.running.AllRunningTests, org.junit.samples.AllSamplesTests, org.junit.tests.validation.AllValidationTests, org.junit.validator.AllValidatorTests, org.junit.AssumptionViolatedExceptionTest, org.junit.tests.ObjectContractTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 45, column 13]}]}
dummy: false
class java.lang.RuntimeException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.Timeout$1
fields: {
           org.junit.rules.Timeout* this$0 <_final> 
           java.lang.Exception* val$e <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            Timeout$1.<init>(Timeout,Exception) 
            void Timeout$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 157, column 35]}]}
dummy: false
class org.junit.experimental.theories.Theories$TheoryAnchor$1
fields: {
           org.junit.experimental.theories.internal.Assignments* val$complete <_final> 
           org.junit.experimental.theories.Theories$TheoryAnchor* this$0 <_final> 
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            void Theories$TheoryAnchor$1.collectInitializationErrors(List) 
            Statement Theories$TheoryAnchor$1.methodInvoker(FrameworkMethod,Object) 
            Theories$TheoryAnchor$1.<init>(Theories$TheoryAnchor,TestClass,Assignments) 
            Object Theories$TheoryAnchor$1.createTest() 
            Statement Theories$TheoryAnchor$1.methodBlock(FrameworkMethod)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 223, column 55]}]}
dummy: false
class java.security.CodeSource
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.experimental.max.DescriptionTest$Sweet
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void DescriptionTest$Sweet.tessed() 
            DescriptionTest$Sweet.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.Ignore>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 117, column 25]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeoutTest$1
fields: {
           java.lang.ThreadGroup* val$outerThreadGroup <_final> 
           org.junit.internal.runners.statements.FailOnTimeoutTest* this$0 <_final> 
           java.util.concurrent.atomic.AtomicReference* val$innerThreadGroup <_final> 
           java.util.concurrent.atomic.AtomicReference* val$innerThread <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void FailOnTimeoutTest$1.evaluate() 
            FailOnTimeoutTest$1.<init>(FailOnTimeoutTest,AtomicReference,ThreadGroup,AtomicReference)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 190, column 68]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Finished$1
fields: {
           org.junit.rules.TestWatcherTest$CallbackArguments$Finished* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            TestWatcherTest$CallbackArguments$Finished$1.<init>(TestWatcherTest$CallbackArguments$Finished) 
            void TestWatcherTest$CallbackArguments$Finished$1.finished(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 327, column 62]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodOneFieldTwoKindsOfRule
fields: {
           org.junit.rules.TestRuleTest$MethodBothKindsOfRule* both <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestRuleTest$MethodBothKindsOfRule TestRuleTest$MethodOneFieldTwoKindsOfRule.getBoth() 
            TestRuleTest$MethodOneFieldTwoKindsOfRule.<init>() 
            void TestRuleTest$MethodOneFieldTwoKindsOfRule.onlyOnce()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 292, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$ExcludedTest1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$ExcludedTest1.<init>() 
            void CategoryTest$ExcludedTest1.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="java.lang.Runnable")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 475, column 24]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$InheritanceAny
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$InheritanceAny.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$A, org.junit.experimental.categories.MultiCategoryTest$B") _org.junit.experimental.categories.Categories$ExcludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$C") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.MultiCategoryTest$InheritanceAnyTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 110, column 30]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing.<init>() 
            void OrderWithTest$UnOrderableRunnersAreHandledWithoutCrashing.unOrderablesAreHandledWithoutCrashing()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 239, column 24]}]}
dummy: false
class java.lang.NoSuchMethodException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.experimental.theories.runner.WithNamedDataPoints$HasSpecificDatapointsParameters
fields: {}
statics: {
            java.lang.String* goodString <_org.junit.experimental.theories.DataPoint(value="named")> 
            java.lang.String* badString <_org.junit.experimental.theories.DataPoint> 
            java.lang.String*[_*_](*) badStrings <_org.junit.experimental.theories.DataPoints> 
            java.lang.String*[_*_](*) goodStrings <_org.junit.experimental.theories.DataPoints(value="named")>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithNamedDataPoints$HasSpecificDatapointsParameters.<clinit>() 
            String WithNamedDataPoints$HasSpecificDatapointsParameters.methodString() 
            String WithNamedDataPoints$HasSpecificDatapointsParameters.otherSingleValueMethod() 
            WithNamedDataPoints$HasSpecificDatapointsParameters.<init>() 
            String[] WithNamedDataPoints$HasSpecificDatapointsParameters.otherMethod() 
            void WithNamedDataPoints$HasSpecificDatapointsParameters.theory(String) 
            String[] WithNamedDataPoints$HasSpecificDatapointsParameters.methodStrings()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 24]}]}
dummy: false
class org.junit.runners.RuleContainerTest$MRule
fields: {}
statics: {
            org.junit.runners.RuleContainerTest$MRule* M1 <_final> 
            org.junit.runners.RuleContainerTest$MRule*[_*_](*) $VALUES <_final> 
            org.junit.runners.RuleContainerTest$MRule* M2 <_final>
          }
supers: {
           class java.lang.Enum 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            void RuleContainerTest$MRule.<clinit>() 
            RuleContainerTest$MRule RuleContainerTest$MRule.valueOf(String) 
            Statement RuleContainerTest$MRule.apply(Statement,FrameworkMethod,Object) 
            RuleContainerTest$MRule[] RuleContainerTest$MRule.values() 
            RuleContainerTest$MRule[] RuleContainerTest$MRule.$values() 
            RuleContainerTest$MRule.<init>(String,int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 60, column 17]}]}
dummy: false
class org.junit.internal.builders.AllDefaultPossibilitiesBuilder
fields: {
           _Bool canUseSuiteMethod <_final> 
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.RunnerBuilder
         }
objc_protocols: {}
methods: {
            AnnotatedBuilder AllDefaultPossibilitiesBuilder.annotatedBuilder() 
            AllDefaultPossibilitiesBuilder.<init>() 
            JUnit3Builder AllDefaultPossibilitiesBuilder.junit3Builder() 
            AllDefaultPossibilitiesBuilder.<init>(boolean) 
            RunnerBuilder AllDefaultPossibilitiesBuilder.suiteMethodBuilder() 
            IgnoredBuilder AllDefaultPossibilitiesBuilder.ignoredBuilder() 
            Runner AllDefaultPossibilitiesBuilder.runnerForClass(Class) 
            JUnit4Builder AllDefaultPossibilitiesBuilder.junit4Builder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false

class org.junit.tests.running.classes.parent.ParentRunnerClassLoaderTest$VisibleClassLoader
fields: {}
statics: {}
supers: {
           class java.net.URLClassLoader
         }
objc_protocols: {}
methods: {
            Class ParentRunnerClassLoaderTest$VisibleClassLoader.findClass(String) 
            ParentRunnerClassLoaderTest$VisibleClassLoader.<init>(URL[],ClassLoader)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 84, column 25]}]}
dummy: false
class org.junit.internal.runners.statements.RunAfters
fields: {
           java.lang.Object* target <_final> 
           java.util.List* afters <_final> 
           org.junit.runners.model.Statement* next <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void RunAfters.invokeMethod(FrameworkMethod) 
            RunAfters.<init>(Statement,List,Object) 
            void RunAfters.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.ParentRunner$2
fields: {
           org.junit.runner.notification.RunNotifier* val$notifier <_final> 
           org.junit.runners.ParentRunner* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            ParentRunner$2.<init>(ParentRunner,RunNotifier) 
            void ParentRunner$2.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 290, column 31]}]}
dummy: false
class junit.samples.ListTest
fields: {
           java.util.List* emptyList <> 
           java.util.List* fullList <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void ListTest.testElementAt() 
            void ListTest.testCapacity() 
            ListTest.<init>() 
            void ListTest.testRemoveElement() 
            void ListTest.setUp() 
            void ListTest.testRemoveAll() 
            void ListTest.testContains() 
            Test ListTest.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.runner.BaseTestRunnerTest$DoesntExtendTestCase
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BaseTestRunnerTest$DoesntExtendTestCase.<init>() 
            Test BaseTestRunnerTest$DoesntExtendTestCase.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithFilteredTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithFilteredTest.setUpClass() 
            ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithFilteredTest.<init>() 
            void ClassLevelMethodsWithIgnoredTestsTest$BeforeClassWithFilteredTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 92, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.runner.FailingDataPointMethods
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FailingDataPointMethods.shouldNotIgnoreNonMatchingSingleDataPointExceptions() 
            void FailingDataPointMethods.shouldFailFromExceptionsInSingleDataPointMethods() 
            FailingDataPointMethods.<init>() 
            void FailingDataPointMethods.shouldIgnoreSingleDataPointMethodExceptionsOnRequest() 
            void FailingDataPointMethods.shouldNotIgnoreNonMatchingMultipleDataPointExceptions() 
            void FailingDataPointMethods.shouldFailFromExceptionsInDataPointArrayMethods() 
            void FailingDataPointMethods.shouldIgnoreMultipleDataPointMethodExceptionsOnRequest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class java.io.ObjectOutputStream$PutField
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.experimental.categories.CategoryTest$SomeAreSlow
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoryTest$SomeAreSlow.justCategory2() 
            void CategoryTest$SomeAreSlow.bothReversed() 
            CategoryTest$SomeAreSlow.<init>() 
            void CategoryTest$SomeAreSlow.noCategory() 
            void CategoryTest$SomeAreSlow.both() 
            void CategoryTest$SomeAreSlow.justCategory1()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 121, column 24]}]}
dummy: false
class org.junit.validator.AnnotationValidator
fields: {}
statics: {
            java.util.List* NO_VALIDATION_ERRORS <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationValidator.<clinit>() 
            List AnnotationValidator.validateAnnotatedClass(TestClass) 
            AnnotationValidator.<init>() 
            List AnnotationValidator.validateAnnotatedField(FrameworkField) 
            List AnnotationValidator.validateAnnotatedMethod(FrameworkMethod)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 20, column 22]}]}
dummy: false
class org.junit.internal.builders.AnnotatedBuilderTest$InnerRunner
fields: {
           java.lang.Class* invokedTestClass <> 
           org.junit.runners.model.RunnerBuilder* invokedRunnerBuilder <>
         }
statics: {
            org.junit.runner.Description* DESCRIPTION <_final>
          }
supers: {
           class org.junit.runner.RunnerSpy
         }
objc_protocols: {}
methods: {
            AnnotatedBuilderTest$InnerRunner.<init>(Class) 
            AnnotatedBuilderTest$InnerRunner.<init>(Class,RunnerBuilder)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 96, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$ErrorInAfterClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$ErrorInAfterClass.<init>() 
            void AnnotationTest$ErrorInAfterClass.after() 
            void AnnotationTest$ErrorInAfterClass.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 386, column 24]}]}
dummy: false
class org.junit.samples.ListTest
fields: {
           java.util.List* fFull <> 
           java.util.List* fEmpty <>
         }
statics: {
            java.util.List* fgHeavy <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ListTest.removeAll() 
            void ListTest.capacity() 
            ListTest.<init>() 
            void ListTest.contains() 
            void ListTest.main(String[]) 
            void ListTest.removeElement() 
            void ListTest.setUp() 
            void ListTest.testCopy() 
            void ListTest.setUpOnce() 
            void ListTest.elementAt() 
            Test ListTest.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$OneTimeSetup
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$OneTimeSetup.<init>() 
            void AnnotationTest$OneTimeSetup.two() 
            void AnnotationTest$OneTimeSetup.one() 
            void AnnotationTest$OneTimeSetup.once()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 268, column 24]}]}
dummy: false
class junit.tests.framework.TestImplementorTest$DoubleTestCase
fields: {
           junit.framework.TestCase* fTestCase <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.Test
         }
objc_protocols: {}
methods: {
            int TestImplementorTest$DoubleTestCase.countTestCases() 
            void TestImplementorTest$DoubleTestCase.run(TestResult) 
            TestCase TestImplementorTest$DoubleTestCase.access$000(TestImplementorTest$DoubleTestCase) 
            TestImplementorTest$DoubleTestCase.<init>(TestCase)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints$ENUM
fields: {}
statics: {
            org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints$ENUM*[_*_](*) $VALUES <_final> 
            org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints$ENUM* OTHER_VALUE <_final> 
            org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints$ENUM* VALUE <_final> 
            org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints$ENUM* THIRD_VALUE <_final>
          }
supers: {
           class java.lang.Enum
         }
objc_protocols: {}
methods: {
            void WithAutoGeneratedDataPoints$ENUM.<clinit>() 
            WithAutoGeneratedDataPoints$ENUM[] WithAutoGeneratedDataPoints$ENUM.$values() 
            WithAutoGeneratedDataPoints$ENUM WithAutoGeneratedDataPoints$ENUM.valueOf(String) 
            WithAutoGeneratedDataPoints$ENUM[] WithAutoGeneratedDataPoints$ENUM.values() 
            WithAutoGeneratedDataPoints$ENUM.<init>(String,int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 17]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$TestMethodWithStaticTestRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestMethodWithStaticTestRule.<init>() 
            TestRule RuleMemberValidatorTest$TestMethodWithStaticTestRule.getTemporaryFolder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 290, column 24]}]}
dummy: false

class org.junit.experimental.categories.CategoriesAndParameterizedTest$ParameterizedTestWithoutCategory
fields: {
           java.lang.String* value <_org.junit.runners.Parameterized$Parameter>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Iterable CategoriesAndParameterizedTest$ParameterizedTestWithoutCategory.getParameters() 
            CategoriesAndParameterizedTest$ParameterizedTestWithoutCategory.<init>() 
            void CategoriesAndParameterizedTest$ParameterizedTestWithoutCategory.testSomething()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 24]}]}
dummy: false
class org.junit.rules.ErrorCollectorTest$AddTwoErrors
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$AddTwoErrors.<init>() 
            void ErrorCollectorTest$AddTwoErrors.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 119, column 24]}]}
dummy: false
class org.hamcrest.internal.ReflectiveTypeFinder
fields: {
           int typedParameter <_final> 
           java.lang.String* methodName <_final> 
           int expectedNumberOfParameters <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Class ReflectiveTypeFinder.findExpectedType(Class) 
            boolean ReflectiveTypeFinder.canObtainExpectedTypeFrom(Method) 
            Class ReflectiveTypeFinder.expectedTypeFrom(Method) 
            ReflectiveTypeFinder.<init>(String,int,int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest$ErrorRememberingListener
fields: {
           junit.framework.Test* fError <> 
           org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.TestListener
         }
objc_protocols: {}
methods: {
            Test InitializationErrorForwardCompatibilityTest$ErrorRememberingListener.getError() 
            void InitializationErrorForwardCompatibilityTest$ErrorRememberingListener.addError(Test,Throwable) 
            void InitializationErrorForwardCompatibilityTest$ErrorRememberingListener.addFailure(Test,AssertionFailedError) 
            InitializationErrorForwardCompatibilityTest$ErrorRememberingListener.<init>(InitializationErrorForwardCompatibilityTest) 
            void InitializationErrorForwardCompatibilityTest$ErrorRememberingListener.startTest(Test) 
            void InitializationErrorForwardCompatibilityTest$ErrorRememberingListener.endTest(Test) 
            InitializationErrorForwardCompatibilityTest$ErrorRememberingListener.<init>(InitializationErrorForwardCompatibilityTest,InitializationErrorForwardCompatibilityTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 63, column 24]}]}
dummy: false

class org.junit.rules.RuleMemberValidatorTest$TestWithClassRuleIsAnArbitraryObject
fields: {}
statics: {
            java.lang.Object* arbitraryObject <_org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleMemberValidatorTest$TestWithClassRuleIsAnArbitraryObject.<clinit>() 
            RuleMemberValidatorTest$TestWithClassRuleIsAnArbitraryObject.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 135, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing.<init>() 
            void OrderableTest$UnOrderableRunnersAreHandledWithoutCrashing.unOrderablesAreHandledWithoutCrashing()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 272, column 24]}]}
dummy: false
class org.hamcrest.core.IsNot
fields: {
           org.hamcrest.Matcher* matcher <_final>
         }
statics: {}
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            IsNot.<init>(Matcher) 
            Matcher IsNot.not(Object) 
            boolean IsNot.matches(Object) 
            Matcher IsNot.not(Matcher) 
            void IsNot.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.notification.ConcurrentRunNotifierTest$3
fields: {
           org.junit.runner.notification.ConcurrentRunNotifierTest* this$0 <_final> 
           org.junit.runner.notification.ConcurrentRunNotifierTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.ConcurrentRunNotifierTest$AbstractConcurrentFailuresTest
         }
objc_protocols: {}
methods: {
            void ConcurrentRunNotifierTest$3.addListener(ConcurrentRunNotifierTest$ExaminedListener) 
            ConcurrentRunNotifierTest$3.<init>(ConcurrentRunNotifierTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 163, column 45]}]}
dummy: false
class org.junit.tests.assertion.AssertionTest$1
fields: {
           org.junit.tests.assertion.AssertionTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.NullPointerException
         }
objc_protocols: {}
methods: {
            AssertionTest$1.<init>(AssertionTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 958, column 62]}]}
dummy: false
class org.junit.experimental.categories.CategoryFilterFactoryTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.model.RunnerScheduler
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void RunnerScheduler.finished() 
            void RunnerScheduler.schedule(Runnable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.runner.Result
fields: {
           java.util.concurrent.atomic.AtomicInteger* ignoreCount <_final> 
           java.util.concurrent.atomic.AtomicLong* startTime <_final> 
           java.util.concurrent.atomic.AtomicInteger* count <_final> 
           java.util.concurrent.CopyOnWriteArrayList* failures <_final> 
           org.junit.runner.Result$SerializedForm* serializedForm <> 
           java.util.concurrent.atomic.AtomicInteger* assumptionFailureCount <_final> 
           java.util.concurrent.atomic.AtomicLong* runTime <_final>
         }
statics: {
            java.io.ObjectStreamField*[_*_](*) serialPersistentFields <_final> 
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Object 
           class java.io.Serializable
         }
objc_protocols: {}
methods: {
            void Result.<clinit>() 
            AtomicLong Result.access$600(Result) 
            Object Result.readResolve() 
            CopyOnWriteArrayList Result.access$900(Result) 
            boolean Result.wasSuccessful() 
            int Result.getIgnoreCount() 
            AtomicInteger Result.access$1100(Result) 
            Result.<init>() 
            AtomicInteger Result.access$800(Result) 
            void Result.writeObject(ObjectOutputStream) 
            Result.<init>(Result$SerializedForm) 
            AtomicInteger Result.access$1000(Result) 
            RunListener Result.createListener() 
            int Result.getAssumptionFailureCount() 
            int Result.getRunCount() 
            AtomicLong Result.access$700(Result) 
            int Result.getFailureCount() 
            long Result.getRunTime() 
            List Result.getFailures() 
            void Result.readObject(ObjectInputStream)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$ClassAsCategory
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$ClassAsCategory.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 392, column 24]}]}
dummy: false
class java.util.concurrent.ExecutorService
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.internal.builders.AnnotatedBuilderTest$OuterClass$InnerClassWithOwnRunWith$MostInnerClass
fields: {
           org.junit.internal.builders.AnnotatedBuilderTest$OuterClass$InnerClassWithOwnRunWith* this$1 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotatedBuilderTest$OuterClass$InnerClassWithOwnRunWith$MostInnerClass.<init>(AnnotatedBuilderTest$OuterClass$InnerClassWithOwnRunWith) 
            void AnnotatedBuilderTest$OuterClass$InnerClassWithOwnRunWith$MostInnerClass.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 88, column 25]}]}
dummy: false
class org.junit.tests.listening.RunnerTest
fields: {
           _Bool wasRun <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RunnerTest.oldTestCount() 
            void RunnerTest.testFinished() 
            RunnerTest.<init>() 
            boolean RunnerTest.access$002(RunnerTest,boolean) 
            void RunnerTest.newTestCount()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false

class org.junit.tests.running.classes.UseSuiteAsASuperclassTest$AllWithMySuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            UseSuiteAsASuperclassTest$AllWithMySuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.running.classes.UseSuiteAsASuperclassTest$MySuite")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 35, column 24]}]}
dummy: false
class org.junit.runner.manipulation.Orderer
fields: {
           org.junit.runner.manipulation.Ordering* ordering <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void Orderer.apply(Object) 
            List Orderer.order(Collection) 
            Orderer.<init>(Ordering)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.experimental.categories.CategoryTest$MultiIncludeWithExcludeCategorySuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$MultiIncludeWithExcludeCategorySuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoryTest$MultiA, org.junit.experimental.categories.CategoryTest$MultiB") _org.junit.experimental.categories.Categories$ExcludeCategory(value="org.junit.experimental.categories.CategoryTest$MultiC") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$MultipleIncludesAndExcludeOnMethod")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 368, column 24]}]}
dummy: false
class org.hamcrest.DiagnosingMatcher
fields: {}
statics: {}
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            void DiagnosingMatcher.describeMismatch(Object,Description) 
            boolean DiagnosingMatcher.matches(Object) 
            DiagnosingMatcher.<init>() 
            boolean DiagnosingMatcher.matches(Object,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$CategoriesTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MultiCategoryTest$CategoriesTest.c() 
            MultiCategoryTest$CategoriesTest.<init>() 
            void MultiCategoryTest$CategoriesTest.b() 
            void MultiCategoryTest$CategoriesTest.anything() 
            void MultiCategoryTest$CategoriesTest.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 45, column 30]}]}
dummy: false
class org.junit.experimental.theories.ParametersSuppliedBy
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            Class ParametersSuppliedBy.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.PARAMETER")>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.tests.experimental.max.MaxStarterTest$1
fields: {
           java.util.List* val$failures <_final> 
           org.junit.tests.experimental.max.MaxStarterTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void MaxStarterTest$1.testRunFinished(Result) 
            MaxStarterTest$1.<init>(MaxStarterTest,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 164, column 43]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithOnlyTestAnnotations$HonorTimeout
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithOnlyTestAnnotations$HonorTimeout.shouldStop() 
            WithOnlyTestAnnotations$HonorTimeout.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 46, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$ExceptionThrowingRunnerFactory
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.parameterized.ParametersRunnerFactory
         }
objc_protocols: {}
methods: {
            ParameterizedTestTest$ExceptionThrowingRunnerFactory.<init>() 
            Runner ParameterizedTestTest$ExceptionThrowingRunnerFactory.createRunnerForTestWithParameters(TestWithParameters)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 702, column 24]}]}
dummy: false
class org.junit.internal.management.ReflectiveThreadMXBean$Holder
fields: {}
statics: {
            java.lang.reflect.Method* isThreadCpuTimeSupportedMethod <_final> 
            java.lang.String* FAILURE_MESSAGE <_final> 
            java.lang.reflect.Method* getThreadCpuTimeMethod <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ReflectiveThreadMXBean$Holder.<clinit>() 
            ReflectiveThreadMXBean$Holder.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 29]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerTest$2
fields: {
           org.junit.tests.running.classes.ParentRunnerTest* this$0 <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            boolean ParentRunnerTest$2.matchesSafely(Object) 
            boolean ParentRunnerTest$2.matchesSafely(List) 
            void ParentRunnerTest$2.describeTo(Description) 
            ParentRunnerTest$2.<init>(ParentRunnerTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 80, column 46]}]}
dummy: false
class junit.framework.ComparisonCompactor
fields: {
           int fContextLength <> 
           int fSuffix <> 
           java.lang.String* fActual <> 
           java.lang.String* fExpected <> 
           int fPrefix <>
         }
statics: {
            java.lang.String* DELTA_END <_final> 
            java.lang.String* ELLIPSIS <_final> 
            java.lang.String* DELTA_START <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            boolean ComparisonCompactor.areStringsEqual() 
            ComparisonCompactor.<init>(int,String,String) 
            String ComparisonCompactor.computeCommonSuffix() 
            void ComparisonCompactor.findCommonSuffix() 
            String ComparisonCompactor.computeCommonPrefix() 
            void ComparisonCompactor.findCommonPrefix() 
            String ComparisonCompactor.compact(String) 
            String ComparisonCompactor.compactString(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 3, column 13]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeoutTest$RunForASecond
fields: {
           java.util.concurrent.CountDownLatch* finished <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            FailOnTimeoutTest$RunForASecond.<init>(FailOnTimeoutTest$1) 
            FailOnTimeoutTest$RunForASecond.<init>() 
            void FailOnTimeoutTest$RunForASecond.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 260, column 31]}]}
dummy: false
class org.junit.internal.StackTracesTest$FramesRemovedMatcher
fields: {
           java.lang.String* suffix <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            java.util.regex.Pattern* PATTERN <_final> 
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.junit.internal.StackTracesTest$StringMatcher
         }
objc_protocols: {}
methods: {
            void StackTracesTest$FramesRemovedMatcher.<clinit>() 
            boolean StackTracesTest$FramesRemovedMatcher.matchesSafely(String) 
            StackTracesTest$FramesRemovedMatcher.<init>(String) 
            boolean StackTracesTest$FramesRemovedMatcher.matchesSafely(Object) 
            void StackTracesTest$FramesRemovedMatcher.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 257, column 25]}]}
dummy: false
class org.junit.AssumptionViolatedExceptionTest
fields: {
           org.junit.rules.TestName* name <_org.junit.Rule>
         }
statics: {
            org.hamcrest.Matcher* NULL <_org.junit.experimental.theories.DataPoint> 
            java.lang.Integer* TWO <_org.junit.experimental.theories.DataPoint> 
            org.hamcrest.Matcher* IS_THREE <_org.junit.experimental.theories.DataPoint> 
            org.junit.AssumptionViolatedExceptionTest$UnserializableClass* UNSERIALIZABLE_VALUE <_final> 
            org.hamcrest.Matcher* SERIALIZABLE_IS_THREE <> 
            java.lang.String* MESSAGE <_final> 
            org.hamcrest.Matcher* UNSERIALIZABLE_MATCHER <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AssumptionViolatedExceptionTest.<clinit>() 
            void AssumptionViolatedExceptionTest.assumptionViolatedExceptionWithValueAndMatcherCanBeReserialized_v4_13() 
            void AssumptionViolatedExceptionTest.assertCanBeSerialized(AssumptionViolatedException) 
            void AssumptionViolatedExceptionTest.assumptionViolatedExceptionWithMatcherDescribesItself() 
            void AssumptionViolatedExceptionTest.canSetCauseWithInstanceCreatedWithAssumptionObjectAndMatcher() 
            void AssumptionViolatedExceptionTest.nullValueAndMatcherCanBeSerialized() 
            void AssumptionViolatedExceptionTest.assertSerializedCorrectly(AssumptionViolatedException,AssumptionViolatedException) 
            void AssumptionViolatedExceptionTest.canInitCauseWithInstanceCreatedWithString() 
            AssumptionViolatedExceptionTest.<init>() 
            void AssumptionViolatedExceptionTest.toStringReportsMatcher(Integer,Matcher) 
            void AssumptionViolatedExceptionTest.canSetCauseWithInstanceCreatedWithExplicitThrowableConstructor() 
            void AssumptionViolatedExceptionTest.unserializableValueAndMatcherCanBeSerialized() 
            void AssumptionViolatedExceptionTest.simpleAssumptionViolatedExceptionDescribesItself() 
            void AssumptionViolatedExceptionTest.canSetCauseWithInstanceCreatedWithMainConstructor() 
            void AssumptionViolatedExceptionTest.serializableValueAndMatcherCanBeSerialized() 
            void AssumptionViolatedExceptionTest.canSetCauseWithInstanceCreatedWithObjectAndMatcher() 
            void AssumptionViolatedExceptionTest.assertReserializable(AssumptionViolatedException) 
            void AssumptionViolatedExceptionTest.toStringReportsValue(Integer,Matcher) 
            void AssumptionViolatedExceptionTest.assumptionViolatedExceptionWithoutValueAndMatcherCanBeReserialized_v4_13()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 13]}]}
dummy: false
class org.junit.rules.TestWatcherTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBePublic
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
         }
objc_protocols: {}
methods: {
            RuleMemberValidator$MemberMustBePublic.<init>() 
            RuleMemberValidator$MemberMustBePublic.<init>(RuleMemberValidator$1) 
            void RuleMemberValidator$MemberMustBePublic.validate(FrameworkMember,Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 219, column 31]}]}
dummy: false
class org.junit.runner.FilterFactory
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            Filter FilterFactory.createFilter(FilterFactoryParams)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.JavadocTest$A
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JavadocTest$A.c() 
            JavadocTest$A.<init>() 
            void JavadocTest$A.b() 
            void JavadocTest$A.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 24, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$TestRuleOrdering
fields: {
           org.junit.rules.TestRule* z <_final _org.junit.Rule> 
           org.junit.rules.TestRule* a <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$TestRuleOrdering.foo() 
            TestRuleTest$TestRuleOrdering.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 568, column 24]}]}
dummy: false
class org.junit.runner.FilterOptionIntegrationTest$TestListener
fields: {
           java.util.Set* startedTests <> 
           java.util.Set* finishedTests <>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            boolean FilterOptionIntegrationTest$TestListener.testFinished(Class) 
            FilterOptionIntegrationTest$TestListener.<init>() 
            void FilterOptionIntegrationTest$TestListener.testFinished(Description) 
            FilterOptionIntegrationTest$TestListener.<init>(FilterOptionIntegrationTest$1) 
            boolean FilterOptionIntegrationTest$TestListener.wasRun(Class) 
            void FilterOptionIntegrationTest$TestListener.testStarted(Description) 
            boolean FilterOptionIntegrationTest$TestListener.testStarted(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 123, column 25]}]}
dummy: false
class org.junit.tests.experimental.AssumptionTest$HasAssumeWithMessage
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AssumptionTest$HasAssumeWithMessage.testMethod() 
            AssumptionTest$HasAssumeWithMessage.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 246, column 24]}]}
dummy: false
class junit.tests.runner.AllTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTests.<init>() 
            void AllTests.main(String[]) 
            boolean AllTests.isJDK11() 
            Test AllTests.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.util.TreeSet
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.util.Arrays
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.junit3compatibility.AllJUnit3CompatibilityTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllJUnit3CompatibilityTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.junit3compatibility.AllTestsTest, org.junit.tests.junit3compatibility.ClassRequestTest, org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest, org.junit.tests.junit3compatibility.ForwardCompatibilityTest, org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest, org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest, org.junit.tests.junit3compatibility.JUnit4TestAdapterTest, org.junit.tests.junit3compatibility.OldTestClassAdaptingListenerTest, org.junit.tests.junit3compatibility.OldTests, org.junit.tests.junit3compatibility.SuiteMethodTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 13]}]}
dummy: false

class org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest$CantInitializeTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            InitializationErrorForwardCompatibilityTest$CantInitializeTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest$CantInitialize")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 24]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$BiInfiniteLoop
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$BiInfiniteLoop.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.SuiteTest$BiInfiniteLoop, org.junit.tests.running.classes.SuiteTest$BiInfiniteLoop")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 167, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnParameterizedTheoryParm
fields: {}
statics: {
            java.util.List* strings <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnParameterizedTheoryParm.<clinit>() 
            WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnParameterizedTheoryParm.<init>() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnParameterizedTheoryParm.forItems(Collection)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 63, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderableTest$TestOrderableClassRunnerIsSortable
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestOrderableClassRunnerIsSortable.<clinit>() 
            void OrderableTest$TestOrderableClassRunnerIsSortable.orderedBackwardWorksOnTestClassRunner() 
            void OrderableTest$TestOrderableClassRunnerIsSortable.resetLog() 
            OrderableTest$TestOrderableClassRunnerIsSortable.<init>() 
            void OrderableTest$TestOrderableClassRunnerIsSortable.orderingorwardWorksOnTestClassRunner() 
            String OrderableTest$TestOrderableClassRunnerIsSortable.access$184(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 151, column 24]}]}
dummy: false
class org.junit.internal.Throwables$State
fields: {}
statics: {
            org.junit.internal.Throwables$State* PROCESSING_OTHER_CODE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_TEST_FRAMEWORK_CODE <_final> 
            org.junit.internal.Throwables$State*[_*_](*) $VALUES <_final> 
            org.junit.internal.Throwables$State* DONE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_REFLECTION_CODE <_final>
          }
supers: {
           class java.lang.Enum
         }
objc_protocols: {}
methods: {
            void Throwables$State.<clinit>() 
            Throwables$State.<init>(String,int) 
            Throwables$State Throwables$State.valueOf(String) 
            Throwables$State Throwables$State.processLine(String) 
            Throwables$State Throwables$State.processStackTraceElement(StackTraceElement) 
            Throwables$State[] Throwables$State.$values() 
            Throwables$State.<init>(String,int,Throwables$1) 
            Throwables$State[] Throwables$State.values()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 185, column 17]}]}
dummy: false
class org.junit.rules.TestRuleTest$OneFieldTwoKindsOfRule
fields: {
           org.junit.rules.TestRuleTest$BothKindsOfRule* both <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestRuleTest$OneFieldTwoKindsOfRule.<init>() 
            void TestRuleTest$OneFieldTwoKindsOfRule.onlyOnce()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 69, column 24]}]}
dummy: false
class junit.tests.extensions.ExtensionTest$2
fields: {
           junit.tests.extensions.ExtensionTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            ExtensionTest$2.<init>(ExtensionTest,String) 
            void ExtensionTest$2.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 43, column 51]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasDataPointsArrayWithMatchingButInaccurateTypes
fields: {}
statics: {
            java.lang.Object*[_*_](*) objects <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AllMembersSupplierTest$HasDataPointsArrayWithMatchingButInaccurateTypes.<clinit>() 
            AllMembersSupplierTest$HasDataPointsArrayWithMatchingButInaccurateTypes.<init>() 
            void AllMembersSupplierTest$HasDataPointsArrayWithMatchingButInaccurateTypes.theory(Integer)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 44, column 24]}]}
dummy: false
class org.junit.internal.runners.MethodValidator
fields: {
           java.util.List* errors <_final> 
           org.junit.internal.runners.TestClass* testClass <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodValidator.validateInstanceMethods() 
            List MethodValidator.validateMethodsForDefaultRunner() 
            void MethodValidator.validateNoArgConstructor() 
            MethodValidator.<init>(TestClass) 
            void MethodValidator.validateTestMethods(Class,boolean) 
            void MethodValidator.assertValid() 
            void MethodValidator.validateStaticMethods()
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.framework.AssertTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void AssertTest.testAssertionFailedErrorToStringWithMessage() 
            void AssertTest.testAssertNotNull() 
            void AssertTest.testAssertNullNotEqualsString() 
            void AssertTest.testAssertNotSame() 
            void AssertTest.testAssertEqualsNull() 
            void AssertTest.testAssertFalse() 
            AssertTest.<init>() 
            void AssertTest.testAssertNullNotEqualsNull() 
            void AssertTest.testFail() 
            void AssertTest.testAssertEquals() 
            void AssertTest.testAssertTrue() 
            void AssertTest.testAssertStringNotEqualsNull() 
            void AssertTest.testAssertNotSameFailsNull() 
            void AssertTest.testAssertStringEquals() 
            void AssertTest.testAssertSame() 
            void AssertTest.testAssertNull() 
            void AssertTest.testAssertionFailedErrorToStringWithNoMessage()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 7, column 13]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ExpectsMessageMatcher
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ExpectsMessageMatcher.throwsMore() 
            ExpectedExceptionTest$ExpectsMessageMatcher.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 212, column 24]}]}
dummy: false
class org.junit.tests.running.classes.UseSuiteAsASuperclassTest$TestB
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            UseSuiteAsASuperclassTest$TestB.<init>() 
            void UseSuiteAsASuperclassTest$TestB.dontPass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 24]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeout$CallableStatement
fields: {
           org.junit.internal.runners.statements.FailOnTimeout* this$0 <_final> 
           java.util.concurrent.CountDownLatch* startLatch <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            Throwable FailOnTimeout$CallableStatement.call() 
            FailOnTimeout$CallableStatement.<init>(FailOnTimeout) 
            void FailOnTimeout$CallableStatement.awaitStarted() 
            FailOnTimeout$CallableStatement.<init>(FailOnTimeout,FailOnTimeout$1) 
            Object FailOnTimeout$CallableStatement.call()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 293, column 18]}]}
dummy: false
class org.junit.rules.TestRuleTest$UsesFieldAndMethodRule
fields: {
           org.junit.rules.TestRuleTest$OrderTestRule* orderField <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$UsesFieldAndMethodRule.foo() 
            TestRuleTest$UsesFieldAndMethodRule.<init>() 
            TestRuleTest$OrderTestRule TestRuleTest$UsesFieldAndMethodRule.orderMethod()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 491, column 24]}]}
dummy: false
class org.junit.tests.junit3compatibility.SuiteMethodTest$NewTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuiteMethodTest$NewTest.sample() 
            SuiteMethodTest$NewTest.<init>() 
            Test SuiteMethodTest$NewTest.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 44, column 24]}]}
dummy: false
class org.junit.tests.running.classes.ThreadsTest$2
fields: {
           org.junit.tests.running.classes.ThreadsTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void ThreadsTest$2.testSuiteFinished(Description) 
            ThreadsTest$2.<init>(ThreadsTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 69, column 43]}]}
dummy: false
class junit.tests.extensions.ExtensionTest$TornDown
fields: {
           _Bool fTornDown <> 
           junit.framework.Test* fTest <>
         }
statics: {}
supers: {
           class junit.extensions.TestSetup
         }
objc_protocols: {}
methods: {
            ExtensionTest$TornDown.<init>(Test) 
            void ExtensionTest$TornDown.tearDown()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 17]}]}
dummy: false
class org.junit.rules.TestRuleTest
fields: {}
statics: {
            int runCount <> 
            _Bool wasRun <> 
            java.util.List* orderList <_final> 
            java.lang.StringBuilder* ruleLog <_final> 
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest.<clinit>() 
            void TestRuleTest.methodRuleIsIntroducedAndEvaluatedOnSubclass() 
            void TestRuleTest.methodValidateWrongTypedField() 
            void TestRuleTest.validateWrongTypedFieldInSuperclass() 
            void TestRuleTest.multipleRulesAreRun() 
            void TestRuleTest.testRuleIsAroundMethodRule() 
            int TestRuleTest.access$108() 
            void TestRuleTest.methodOnlyApplyOnceEvenIfImplementsBothInterfaces() 
            void TestRuleTest.ruleIsIntroducedAndEvaluatedOnSubclass() 
            void TestRuleTest.ruleIsIntroducedAndEvaluated() 
            void TestRuleTest.testCallMethodOnlyOnceRule() 
            void TestRuleTest.methodValidatePrivateRule() 
            void TestRuleTest.useCustomMethodRule() 
            StringBuilder TestRuleTest.access$900() 
            TestRuleTest.<init>() 
            void TestRuleTest.beforesAndAfters() 
            void TestRuleTest.testRuleOrderingWithMethodRule() 
            List TestRuleTest.access$700() 
            void TestRuleTest.methodIgnoreNonRules() 
            void TestRuleTest.usesFieldAndMethodRule() 
            void TestRuleTest.methodValidateWrongTypedFieldInSuperclass() 
            void TestRuleTest.validatePrivateRule() 
            void TestRuleTest.ignoreNonRules() 
            void TestRuleTest.testRuleOrdering() 
            void TestRuleTest.methodMultipleRulesAreRun() 
            void TestRuleTest.onlyApplyOnceEvenIfImplementsBothInterfaces() 
            void TestRuleTest.methodUseCustomMethodRule() 
            boolean TestRuleTest.access$002(boolean) 
            void TestRuleTest.methodRuleIsIntroducedAndEvaluated() 
            void TestRuleTest.validateWrongTypedField() 
            void TestRuleTest.beforesAndAftersAreEnclosedByRule()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 24, column 13]}]}
dummy: false

class org.junit.validator.AnnotationsValidatorTest$AnnotationValidatorClassTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationsValidatorTest$AnnotationValidatorClassTest.<init>() 
            void AnnotationsValidatorTest$AnnotationValidatorClassTest.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.validator.AnnotationsValidatorTest$ExampleAnnotationWithValidator>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 65, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$BeforesAndAftersAreEnclosedByRule
fields: {
           org.junit.rules.TestRule* watcher <_org.junit.Rule>
         }
statics: {
            java.lang.StringBuilder* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            StringBuilder TestRuleTest$BeforesAndAftersAreEnclosedByRule.access$500() 
            TestRuleTest$BeforesAndAftersAreEnclosedByRule.<init>() 
            void TestRuleTest$BeforesAndAftersAreEnclosedByRule.after() 
            void TestRuleTest$BeforesAndAftersAreEnclosedByRule.before() 
            StringBuilder TestRuleTest$BeforesAndAftersAreEnclosedByRule.access$502(StringBuilder) 
            void TestRuleTest$BeforesAndAftersAreEnclosedByRule.succeeds()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 378, column 24]}]}
dummy: false
class org.junit.runners.ParentRunner
fields: {
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runner.Runner 
           class org.junit.runner.manipulation.Filterable 
           class org.junit.runner.manipulation.Orderable
         }
objc_protocols: {}
methods: {
            void ParentRunner.<clinit>() 
            void ParentRunner.run(RunNotifier) 
            Statement ParentRunner.withInterruptIsolation(Statement) 
            TestClass ParentRunner.createTestClass(Class) 
            boolean ParentRunner.areAllChildrenIgnored() 
            List ParentRunner.classRules() 
            Annotation[] ParentRunner.getRunnerAnnotations() 
            ParentRunner.<init>(TestClass) 
            void ParentRunner.validateClassRules(List) 
            Description ParentRunner.describeChild(Object) 
            boolean ParentRunner.isIgnored(Object) 
            void ParentRunner.collectInitializationErrors(List) 
            String ParentRunner.getName() 
            void ParentRunner.setScheduler(RunnerScheduler) 
            void ParentRunner.filter(Filter) 
            Statement ParentRunner.withAfterClasses(Statement) 
            boolean ParentRunner.shouldNotReorder() 
            void ParentRunner.runChildren(RunNotifier) 
            void ParentRunner.access$100(ParentRunner,RunNotifier) 
            TestClass ParentRunner.getTestClass() 
            void ParentRunner.runLeaf(Statement,Description,RunNotifier) 
            Statement ParentRunner.classBlock(RunNotifier) 
            void ParentRunner.runChild(Object,RunNotifier) 
            List ParentRunner.getFilteredChildren() 
            void ParentRunner.validate() 
            Statement ParentRunner.withBeforeClasses(Statement) 
            ParentRunner.<init>(Class) 
            void ParentRunner.applyValidators(List) 
            Statement ParentRunner.childrenInvoker(RunNotifier) 
            boolean ParentRunner.shouldRun(Filter,Object) 
            List ParentRunner.getChildren() 
            void ParentRunner.validatePublicVoidNoArgMethods(Class,boolean,List) 
            void ParentRunner.order(Orderer) 
            Statement ParentRunner.withClassRules(Statement) 
            Comparator ParentRunner.comparator(Sorter) 
            void ParentRunner.sort(Sorter) 
            Description ParentRunner.getDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.rules.EventCollector$2
fields: {
           int val$numberOfFailures <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            boolean EventCollector$2.matchesSafely(Object) 
            EventCollector$2.<init>(int) 
            void EventCollector$2.describeTo(Description) 
            boolean EventCollector$2.matchesSafely(EventCollector)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 54, column 53]}]}
dummy: false
class org.junit.rules.TestWatchman
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            void TestWatchman.failed(Throwable,FrameworkMethod) 
            void TestWatchman.succeeded(FrameworkMethod) 
            Statement TestWatchman.apply(Statement,FrameworkMethod,Object) 
            TestWatchman.<init>() 
            void TestWatchman.starting(FrameworkMethod) 
            void TestWatchman.finished(FrameworkMethod)
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 45, column 13]}]}
dummy: false
class org.junit.tests.manipulation.SingleMethodTest$HasSuiteMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SingleMethodTest$HasSuiteMethod.<init>() 
            void SingleMethodTest$HasSuiteMethod.b() 
            Test SingleMethodTest$HasSuiteMethod.suite() 
            void SingleMethodTest$HasSuiteMethod.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 171, column 24]}]}
dummy: false
class java.lang.reflect.InvocationHandler
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.util.concurrent.FutureTask
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.experimental.categories.AllCategoriesTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllCategoriesTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoriesAndParameterizedTest, org.junit.experimental.categories.CategoryFilterFactoryTest, org.junit.experimental.categories.CategoryTest, org.junit.experimental.categories.CategoryValidatorTest, org.junit.experimental.categories.JavadocTest, org.junit.experimental.categories.MultiCategoryTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false

class org.junit.rules.ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail$1
fields: {
           org.junit.rules.ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            void ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail$1.after() 
            ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail$1.<init>(ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 88, column 71]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$ThrowingTestRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement SampleJUnit4Tests$ThrowingTestRule.apply(Statement,Description) 
            SampleJUnit4Tests$ThrowingTestRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 47, column 24]}]}
dummy: false
class org.junit.experimental.theories.internal.ParameterizedAssertionError
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.AssertionError
         }
objc_protocols: {}
methods: {
            String ParameterizedAssertionError.join(String,Collection) 
            boolean ParameterizedAssertionError.equals(Object) 
            ParameterizedAssertionError.<init>(Throwable,String,Object[]) 
            String ParameterizedAssertionError.stringValueOf(Object) 
            int ParameterizedAssertionError.hashCode() 
            String ParameterizedAssertionError.join(String,Object[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 7, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithOnlyTestAnnotations$HonorExpectedException
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            WithOnlyTestAnnotations$HonorExpectedException.<init>() 
            void WithOnlyTestAnnotations$HonorExpectedException.shouldThrow()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 24]}]}
dummy: false

class org.junit.rules.RuleMemberValidatorTest$TestWithClassRuleIsImplementationOfMethodRule
fields: {}
statics: {
            org.junit.rules.MethodRule* classRule <_org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleMemberValidatorTest$TestWithClassRuleIsImplementationOfMethodRule.<clinit>() 
            RuleMemberValidatorTest$TestWithClassRuleIsImplementationOfMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 85, column 24]}]}
dummy: false
class java.lang.InstantiationException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.manipulation.SingleMethodTest$OneTwoSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SingleMethodTest$OneTwoSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.manipulation.SingleMethodTest$TestOne, org.junit.tests.manipulation.SingleMethodTest$TestTwo")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 159, column 24]}]}
dummy: false
class org.junit.runner.FilterOptionIntegrationTest$DummyTestClass0TestMethod1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FilterOptionIntegrationTest$DummyTestClass0TestMethod1.<init>() 
            void FilterOptionIntegrationTest$DummyTestClass0TestMethod1.dummyTest()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="org.junit.runner.FilterOptionIntegrationTest$DummyCategory0")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 178, column 24]}]}
dummy: false
class org.junit.internal.runners.statements.ExpectExceptionTest$SomeException
fields: {}
statics: {}
supers: {
           class java.lang.RuntimeException
         }
objc_protocols: {}
methods: {
            ExpectExceptionTest$SomeException.<init>(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 77, column 25]}]}
dummy: false
class org.junit.rules.RunRules
fields: {
           org.junit.runners.model.Statement* statement <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            RunRules.<init>(Statement,Iterable,Description) 
            Statement RunRules.applyAll(Statement,Iterable,Description) 
            void RunRules.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.math.BigDecimal
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runners.RuleContainerTest
fields: {
           org.junit.runners.RuleContainer* container <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleContainerTest.testRuleAroundMethodRule() 
            void RuleContainerTest.ordering2() 
            RuleContainerTest.<init>() 
            void RuleContainerTest.ordering1() 
            void RuleContainerTest.methodRulesOnly()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false
class org.junit.experimental.results.ResultMatchers$3
fields: {
           org.hamcrest.Matcher* val$matcher <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            boolean ResultMatchers$3.matchesSafely(PrintableResult) 
            ResultMatchers$3.<init>(Matcher) 
            boolean ResultMatchers$3.matchesSafely(Object) 
            void ResultMatchers$3.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 70, column 54]}]}
dummy: false
class junit.tests.framework.AssertionFailedErrorTest
fields: {
           java.lang.String* fName <>
         }
statics: {
            java.lang.String* ARBITRARY_MESSAGE <_final>
          }
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void AssertionFailedErrorTest.testCreateErrorWithMessage() 
            AssertionFailedErrorTest.<init>() 
            void AssertionFailedErrorTest.testCreateErrorWithoutMessageInsteadOfNull() 
            void AssertionFailedErrorTest.testCreateErrorWithoutMessage()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 13]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$Inherited
fields: {}
statics: {}
supers: {
           class org.junit.experimental.categories.CategoryTest$Ancestor
         }
objc_protocols: {}
methods: {
            CategoryTest$Inherited.<init>() 
            void CategoryTest$Inherited.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 416, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodMultipleRuleTest$Increment
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement TestRuleTest$MethodMultipleRuleTest$Increment.apply(Statement,Description) 
            TestRuleTest$MethodMultipleRuleTest$Increment.<init>() 
            TestRuleTest$MethodMultipleRuleTest$Increment.<init>(TestRuleTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 324, column 29]}]}
dummy: false
class org.junit.runners.model.TestTimedOutException
fields: {
           long timeout <_final> 
           java.util.concurrent.TimeUnit* timeUnit <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            TimeUnit TestTimedOutException.getTimeUnit() 
            TestTimedOutException.<init>(long,TimeUnit) 
            long TestTimedOutException.getTimeout()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$Hercules
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$Hercules.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.SuiteTest$Hydra, org.junit.tests.running.classes.SuiteTest$Hydra")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 187, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.TypeMatchingBetweenMultiDataPointsMethod$WithWrongfullyTypedDataPointsMethod
fields: {}
statics: {
            java.lang.String*[_*_](*) correctlyTyped <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TypeMatchingBetweenMultiDataPointsMethod$WithWrongfullyTypedDataPointsMethod.<clinit>() 
            String[] TypeMatchingBetweenMultiDataPointsMethod$WithWrongfullyTypedDataPointsMethod.wrongfullyTyped() 
            TypeMatchingBetweenMultiDataPointsMethod$WithWrongfullyTypedDataPointsMethod.<init>() 
            void TypeMatchingBetweenMultiDataPointsMethod$WithWrongfullyTypedDataPointsMethod.testTheory(String[])
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 24]}]}
dummy: false
class org.junit.tests.running.methods.TestMethodTest$OnlyTestIsIgnored
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestMethodTest$OnlyTestIsIgnored.ignored() 
            TestMethodTest$OnlyTestIsIgnored.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 242, column 24]}]}
dummy: false
class org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeARule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
         }
objc_protocols: {}
methods: {
            RuleMemberValidator$FieldMustBeARule.<init>() 
            RuleMemberValidator$FieldMustBeARule.<init>(RuleMemberValidator$1) 
            void RuleMemberValidator$FieldMustBeARule.validate(FrameworkMember,Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 231, column 31]}]}
dummy: false

class org.junit.tests.validation.BadlyFormedClassesTest$BadBeforeMethodWithLegacyRunner
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void BadlyFormedClassesTest$BadBeforeMethodWithLegacyRunner.someTest() 
            BadlyFormedClassesTest$BadBeforeMethodWithLegacyRunner.<init>() 
            void BadlyFormedClassesTest$BadBeforeMethodWithLegacyRunner.before()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.internal.runners.JUnit4ClassRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 24]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$TimeoutSubclass
fields: {
           _Bool lookForStuckThread <_final> 
           long timeout <_final> 
           java.util.concurrent.TimeUnit* timeUnit <_final>
         }
statics: {}
supers: {
           class org.junit.rules.Timeout
         }
objc_protocols: {}
methods: {
            long TimeoutTest$TimeoutSubclass.getTimeoutFromSuperclass(TimeUnit) 
            TimeoutTest$TimeoutSubclass.<init>(long,TimeUnit)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 306, column 25]}]}
dummy: false
class org.junit.experimental.results.ResultMatchers$4
fields: {
           java.lang.String* val$string <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            ResultMatchers$4.<init>(String) 
            boolean ResultMatchers$4.matchesSafely(PrintableResult) 
            boolean ResultMatchers$4.matchesSafely(Object) 
            void ResultMatchers$4.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 88, column 54]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedSingleFieldDataPoints() 
            void SpecificDataPointsSupplierTest.methodWantingAllNamedStrings(String) 
            List SpecificDataPointsSupplierTest.getStringValuesFromAssignments(List) 
            void SpecificDataPointsSupplierTest.methodWantingNamedFieldString(String) 
            void SpecificDataPointsSupplierTest.shouldReturnNothingIfTheNamedDataPointsAreMissing() 
            SpecificDataPointsSupplierTest.<init>() 
            void SpecificDataPointsSupplierTest.methodWantingNamedSingleFieldString(String) 
            ParameterSignature SpecificDataPointsSupplierTest.signature(String) 
            void SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedFieldDataPoints() 
            void SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedSingleMethodDataPoints() 
            void SpecificDataPointsSupplierTest.methodWantingWrongNamedString(String) 
            void SpecificDataPointsSupplierTest.methodWantingNamedMethodString(String) 
            void SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedDataPoints() 
            void SpecificDataPointsSupplierTest.methodWantingAnyString(String) 
            void SpecificDataPointsSupplierTest.methodWantingNamedSingleMethodString(String) 
            void SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedMethodDataPoints()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnArrayTypeOnTheoryParm
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String[][] WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnArrayTypeOnTheoryParm.items() 
            WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnArrayTypeOnTheoryParm.<init>() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnArrayTypeOnTheoryParm.forItems(Object[])
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 111, column 24]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$InheritanceAllAny
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$InheritanceAllAny.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$A, org.junit.experimental.categories.MultiCategoryTest$B", matchAny="false") _org.junit.experimental.categories.Categories$ExcludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$A, org.junit.experimental.categories.MultiCategoryTest$C") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.MultiCategoryTest$InheritanceAllAnyTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 128, column 30]}]}
dummy: false
class org.junit.tests.listening.AllListeningTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllListeningTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.listening.ListenerTest, org.junit.tests.listening.RunnerTest, org.junit.tests.listening.TestListenerTest, org.junit.tests.listening.TextListenerTest, org.junit.tests.listening.UserStopTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$TeardownTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$TeardownTest.<init>() 
            void AnnotationTest$TeardownTest.after() 
            void AnnotationTest$TeardownTest.success()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 81, column 24]}]}
dummy: false
class org.junit.rules.MethodRulesTest$HasMultipleMethodsReturningMethodRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MethodRulesTest$HasMultipleMethodsReturningMethodRule.<init>() 
            MethodRulesTest$Increment MethodRulesTest$HasMultipleMethodsReturningMethodRule.methodRule1() 
            void MethodRulesTest$HasMultipleMethodsReturningMethodRule.doNothing() 
            MethodRulesTest$Increment MethodRulesTest$HasMultipleMethodsReturningMethodRule.methodRule2()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 347, column 24]}]}
dummy: false
class org.junit.tests.description.AnnotatedDescriptionTest$AnnotatedClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotatedDescriptionTest$AnnotatedClass.<init>() 
            void AnnotatedDescriptionTest$AnnotatedClass.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.tests.description.AnnotatedDescriptionTest$MyOwnAnnotation>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 24]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$SomeMethodRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$SomeMethodRule.<init>() 
            RuleMemberValidatorTest$SomeMethodRule.<init>(RuleMemberValidatorTest$1) 
            Statement RuleMemberValidatorTest$SomeMethodRule.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 351, column 31]}]}
dummy: false
class org.junit.tests.listening.TestListenerTest
fields: {
           int count <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestListenerTest.reportsFailureOfListener() 
            TestListenerTest.<init>() 
            void TestListenerTest.failingListener() 
            void TestListenerTest.freshResultEachTime()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class java.io.ObjectStreamField
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.running.methods.AnnotationTest$TestAndTeardownFailureTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$TestAndTeardownFailureTest.<init>() 
            void AnnotationTest$TestAndTeardownFailureTest.after() 
            void AnnotationTest$TestAndTeardownFailureTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 153, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$CustomTestName
fields: {
           java.lang.String* name <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement TestRuleTest$CustomTestName.apply(Statement,Description) 
            TestRuleTest$CustomTestName.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 217, column 24]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerTest$FruitTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParentRunnerTest$FruitTest.Banana() 
            ParentRunnerTest$FruitTest.<init>() 
            void ParentRunnerTest$FruitTest.apple()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 35, column 24]}]}
dummy: false
class java.io.Serializable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest
fields: {
           junit.framework.JUnit4TestAdapter* fAdapter <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void InitializationErrorForwardCompatibilityTest.initializationErrorsShowUpAsWarnings() 
            void InitializationErrorForwardCompatibilityTest.generatedErrorTestsMatchUp() 
            InitializationErrorForwardCompatibilityTest.<init>() 
            void InitializationErrorForwardCompatibilityTest.initializationErrorsAreThrownAtRuntime() 
            void InitializationErrorForwardCompatibilityTest.createAdapter()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class org.junit.runners.model.InitializationError
fields: {
           java.util.List* fErrors <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            InitializationError.<init>(List) 
            InitializationError.<init>(String) 
            List InitializationError.getCauses() 
            InitializationError.<init>(Throwable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerTest$Exclude
fields: {
           java.lang.String* methodName <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            ParentRunnerTest$Exclude.<init>(String) 
            boolean ParentRunnerTest$Exclude.shouldRun(Description) 
            String ParentRunnerTest$Exclude.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 92, column 25]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest$TestClassWithNamedDataPoints
fields: {}
statics: {
            java.lang.String*[_*_](*) values <_org.junit.experimental.theories.DataPoints(value="field, named")> 
            java.lang.String* singleValue <_org.junit.experimental.theories.DataPoint(value="single, named")> 
            java.lang.String*[_*_](*) otherValues <_org.junit.experimental.theories.DataPoints> 
            java.lang.String* otherSingleValue <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SpecificDataPointsSupplierTest$TestClassWithNamedDataPoints.<clinit>() 
            String[] SpecificDataPointsSupplierTest$TestClassWithNamedDataPoints.getOtherValues() 
            SpecificDataPointsSupplierTest$TestClassWithNamedDataPoints.<init>() 
            String SpecificDataPointsSupplierTest$TestClassWithNamedDataPoints.getSingleValue() 
            String[] SpecificDataPointsSupplierTest$TestClassWithNamedDataPoints.getValues() 
            String SpecificDataPointsSupplierTest$TestClassWithNamedDataPoints.getSingleOtherValue()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 24]}]}
dummy: false
class org.junit.runners.RuleContainer
fields: {
           java.util.IdentityHashMap* orderValues <_final> 
           java.util.List* methodRules <_final> 
           java.util.List* testRules <_final>
         }
statics: {
            java.util.Comparator* ENTRY_COMPARATOR <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleContainer.<clinit>() 
            List RuleContainer.getSortedRules() 
            List RuleContainer.getSortedEntries() 
            void RuleContainer.add(TestRule) 
            RuleContainer.<init>() 
            void RuleContainer.add(MethodRule) 
            Statement RuleContainer.apply(FrameworkMethod,Description,Object,Statement) 
            void RuleContainer.setOrder(Object,int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.description.AnnotatedDescriptionTest$1
fields: {
           org.junit.tests.description.AnnotatedDescriptionTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.Ignore
         }
objc_protocols: {}
methods: {
            String AnnotatedDescriptionTest$1.value() 
            Class AnnotatedDescriptionTest$1.annotationType() 
            AnnotatedDescriptionTest$1.<init>(AnnotatedDescriptionTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 80, column 45]}]}
dummy: false
class org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerTest.detectNonStaticEnclosedClass() 
            BlockJUnit4ClassRunnerTest.<init>() 
            void BlockJUnit4ClassRunnerTest.methodBlockAfterFireTestStarted() 
            String BlockJUnit4ClassRunnerTest.access$084(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckMatcherThatDoesNotFailWithProvidedReason
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckMatcherThatDoesNotFailWithProvidedReason.<init>() 
            void ErrorCollectorTest$CheckMatcherThatDoesNotFailWithProvidedReason.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 140, column 24]}]}
dummy: false
class org.junit.tests.running.classes.IgnoreClassTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            IgnoreClassTest.<init>() 
            void IgnoreClassTest.ignoreClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.SuiteMethodTest$NewTestSuiteNotUsed
fields: {}
statics: {
            _Bool wasIgnoredRun <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuiteMethodTest$NewTestSuiteNotUsed.sample() 
            SuiteMethodTest$NewTestSuiteNotUsed.<init>() 
            void SuiteMethodTest$NewTestSuiteNotUsed.ignore() 
            boolean SuiteMethodTest$NewTestSuiteNotUsed.access$002(boolean) 
            boolean SuiteMethodTest$NewTestSuiteNotUsed.access$000() 
            Test SuiteMethodTest$NewTestSuiteNotUsed.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 104, column 24]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit4TestAdapterTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnit4TestAdapterTest.<init>() 
            void JUnit4TestAdapterTest.testJUnit3Suite() 
            void JUnit4TestAdapterTest.doTest(Class) 
            void JUnit4TestAdapterTest.testJUnit4Suite() 
            void JUnit4TestAdapterTest.testJUnit4SuiteThatContainsJUnit3SuiteClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class junit.tests.SampleJUnit3Tests$TestWithThrowingSetUpMethod
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            SampleJUnit3Tests$TestWithThrowingSetUpMethod.<init>() 
            void SampleJUnit3Tests$TestWithThrowingSetUpMethod.setUp() 
            void SampleJUnit3Tests$TestWithThrowingSetUpMethod.testAlwaysPasses()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.FailingDataPointMethods$HasIgnoredFailingMultipleDataPointMethod
fields: {}
statics: {
            int num <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FailingDataPointMethods$HasIgnoredFailingMultipleDataPointMethod.<clinit>() 
            int[] FailingDataPointMethods$HasIgnoredFailingMultipleDataPointMethod.failingDataPoint() 
            void FailingDataPointMethods$HasIgnoredFailingMultipleDataPointMethod.theory(int) 
            FailingDataPointMethods$HasIgnoredFailingMultipleDataPointMethod.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 77, column 24]}]}
dummy: false
class org.junit.rules.TimeoutRuleTest$HasNullTimeUnit
fields: {
           org.junit.rules.TestRule* globalTimeout <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutRuleTest$HasNullTimeUnit.<init>() 
            void TimeoutRuleTest$HasNullTimeUnit.wouldPass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 103, column 24]}]}
dummy: false
class java.io.Writer
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.experimental.categories.MultiCategoryTest$InheritanceAll
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$InheritanceAll.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$A, org.junit.experimental.categories.MultiCategoryTest$B", matchAny="false") _org.junit.experimental.categories.Categories$ExcludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$C") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.MultiCategoryTest$InheritanceAllTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 116, column 30]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckRunnableThatThrowsUnexpectedTypeOfException
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckRunnableThatThrowsUnexpectedTypeOfException.<init>() 
            void ErrorCollectorTest$CheckRunnableThatThrowsUnexpectedTypeOfException.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 282, column 24]}]}
dummy: false

class org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.Stopwatch$Clock
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Stopwatch$Clock.<init>() 
            long Stopwatch$Clock.nanoTime()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 177, column 17]}]}
dummy: false
class org.junit.tests.junit3compatibility.OldTestClassAdaptingListenerTest$1
fields: {
           org.junit.tests.junit3compatibility.OldTestClassAdaptingListenerTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            OldTestClassAdaptingListenerTest$1.<init>(OldTestClassAdaptingListenerTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 43]}]}
dummy: false
class org.junit.tests.experimental.max.DescriptionTest$1URLClassLoader2
fields: {
           org.junit.tests.experimental.max.DescriptionTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.net.URLClassLoader
         }
objc_protocols: {}
methods: {
            DescriptionTest$1URLClassLoader2.<init>(DescriptionTest,URL[]) 
            Class DescriptionTest$1URLClassLoader2.findClass(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.hamcrest.SelfDescribing
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void SelfDescribing.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.tests.listening.TestListenerTest$ExceptionListener
fields: {
           org.junit.tests.listening.TestListenerTest* this$0 <_final> 
           org.junit.tests.listening.TestListenerTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.tests.listening.TestListenerTest$ErrorListener
         }
objc_protocols: {}
methods: {
            TestListenerTest$ExceptionListener.<init>(TestListenerTest) 
            void TestListenerTest$ExceptionListener.testRunStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 10]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$TestWithStaticClassAndTestRule
fields: {}
statics: {
            org.junit.rules.TestRule* temporaryFolder <_org.junit.ClassRule _org.junit.Rule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleMemberValidatorTest$TestWithStaticClassAndTestRule.<clinit>() 
            RuleMemberValidatorTest$TestWithStaticClassAndTestRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 53, column 24]}]}
dummy: false
class org.junit.runners.model.TestClassTest$OuterClass2
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$OuterClass2.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 67, column 24]}]}
dummy: false
class org.junit.experimental.results.ResultMatchers$1
fields: {
           int val$count <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            boolean ResultMatchers$1.matchesSafely(PrintableResult) 
            ResultMatchers$1.<init>(int) 
            boolean ResultMatchers$1.matchesSafely(Object) 
            void ResultMatchers$1.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 54]}]}
dummy: false
class org.junit.rules.DisableOnDebugTest$AbstractDisableOnDebugTest
fields: {
           org.junit.rules.TestRule* failOnExecution <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            DisableOnDebugTest$AbstractDisableOnDebugTest.<init>(List) 
            void DisableOnDebugTest$AbstractDisableOnDebugTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 51, column 33]}]}
dummy: false

class org.junit.internal.runners.rules.RuleMemberValidator$FieldMustBeATestRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
         }
objc_protocols: {}
methods: {
            RuleMemberValidator$FieldMustBeATestRule.<init>() 
            RuleMemberValidator$FieldMustBeATestRule.<init>(RuleMemberValidator$1) 
            void RuleMemberValidator$FieldMustBeATestRule.validate(FrameworkMember,Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 269, column 31]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasDataPointsFieldWithNullValue
fields: {}
statics: {
            java.lang.Object*[_*_](*) objects <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AllMembersSupplierTest$HasDataPointsFieldWithNullValue.<clinit>() 
            AllMembersSupplierTest$HasDataPointsFieldWithNullValue.<init>(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 100, column 24]}]}
dummy: false
class junit.tests.framework.OneTestCase
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            OneTestCase.<init>() 
            void OneTestCase.testCase(int) 
            void OneTestCase.testCase() 
            void OneTestCase.noTestCase()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.TestRuleTest$MultipleRuleTest$Increment$1
fields: {
           org.junit.rules.TestRuleTest$MultipleRuleTest$Increment* this$0 <_final> 
           org.junit.runners.model.Statement* val$base <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            TestRuleTest$MultipleRuleTest$Increment$1.<init>(TestRuleTest$MultipleRuleTest$Increment,Statement) 
            void TestRuleTest$MultipleRuleTest$Increment$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 101, column 39]}]}
dummy: false
class org.junit.runner.notification.RunNotifier$5
fields: {
           org.junit.runner.Description* val$description <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier$SafeNotifier
         }
objc_protocols: {}
methods: {
            void RunNotifier$5.notifyListener(RunListener) 
            RunNotifier$5.<init>(RunNotifier,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 153, column 27]}]}
dummy: false
class junit.tests.framework.TestCaseTest$9
fields: {
           java.lang.Exception* val$running <_final> 
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void TestCaseTest$9.runTest() 
            void TestCaseTest$9.tearDown() 
            TestCaseTest$9.<init>(TestCaseTest,Exception)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 151, column 36]}]}
dummy: false
class org.junit.tests.listening.TextListenerTest$ErrorTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TextListenerTest$ErrorTest.error() 
            TextListenerTest$ErrorTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 42, column 24]}]}
dummy: false
class org.junit.internal.ChecksTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ChecksTest.notNullWithMessageShouldReturnNonNullValues() 
            void ChecksTest.notNullShouldReturnNonNullValues() 
            ChecksTest.<init>() 
            void ChecksTest.notNullWithNullMessageShouldThrowOnNullValues() 
            void ChecksTest.notNullWithMessageShouldThrowOnNullValues() 
            void ChecksTest.notNullShouldThrowOnNullValues()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnWildcardLowerBoundOnTheoryParm
fields: {}
statics: {
            java.util.List* strings <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnWildcardLowerBoundOnTheoryParm.<clinit>() 
            WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnWildcardLowerBoundOnTheoryParm.<init>() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnWildcardLowerBoundOnTheoryParm.forItems(Collection)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 95, column 24]}]}
dummy: false

class org.junit.experimental.categories.CategoriesAndParameterizedTest$ParameterizedTestWithCategory
fields: {
           java.lang.String* value <_org.junit.runners.Parameterized$Parameter>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Iterable CategoriesAndParameterizedTest$ParameterizedTestWithCategory.getParameters() 
            CategoriesAndParameterizedTest$ParameterizedTestWithCategory.<init>() 
            void CategoriesAndParameterizedTest$ParameterizedTestWithCategory.testSomething()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized") _org.junit.experimental.categories.Category(value="org.junit.experimental.categories.CategoriesAndParameterizedTest$Token")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 63, column 24]}]}
dummy: false
class org.junit.tests.experimental.max.JUnit38SortingTest$JUnit4Test
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JUnit38SortingTest$JUnit4Test.pass() 
            JUnit38SortingTest$JUnit4Test.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 34, column 24]}]}
dummy: false
class org.junit.experimental.max.MaxHistory$RememberingListener
fields: {
           long overallStart <> 
           org.junit.experimental.max.MaxHistory* this$0 <_final> 
           java.util.Map* starts <>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void MaxHistory$RememberingListener.testRunFinished(Result) 
            void MaxHistory$RememberingListener.testFailure(Failure) 
            MaxHistory$RememberingListener.<init>(MaxHistory) 
            MaxHistory$RememberingListener.<init>(MaxHistory,MaxHistory$1) 
            void MaxHistory$RememberingListener.testStarted(Description) 
            void MaxHistory$RememberingListener.testFinished(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 109, column 24]}]}
dummy: false
class java.lang.Short
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.classes.EnclosedTest$Enclosing$B
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void EnclosedTest$Enclosing$B.c() 
            EnclosedTest$Enclosing$B.<init>() 
            void EnclosedTest$Enclosing$B.b() 
            void EnclosedTest$Enclosing$B.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 28]}]}
dummy: false
class java.lang.Iterable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.internal.MethodSorterTest$DummySortWithoutAnnotation
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodSorterTest$DummySortWithoutAnnotation.delta() 
            Object MethodSorterTest$DummySortWithoutAnnotation.alpha(int,double,Thread) 
            MethodSorterTest$DummySortWithoutAnnotation.<init>() 
            int MethodSorterTest$DummySortWithoutAnnotation.gamma() 
            void MethodSorterTest$DummySortWithoutAnnotation.epsilon() 
            void MethodSorterTest$DummySortWithoutAnnotation.beta(int[][]) 
            void MethodSorterTest$DummySortWithoutAnnotation.gamma(boolean)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 17]}]}
dummy: false
class org.junit.tests.experimental.parallel.ParallelClassTest
fields: {}
statics: {
            java.lang.Thread* fExample2One <_volatile> 
            java.lang.Thread* fExample1One <_volatile> 
            java.lang.Thread* fExample1Two <_volatile> 
            java.util.concurrent.CountDownLatch* fSynchronizer <_volatile> 
            long TIMEOUT <_final> 
            java.lang.Thread* fExample2Two <_volatile>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParallelClassTest.<clinit>() 
            Thread ParallelClassTest.access$202(Thread) 
            ParallelClassTest.<init>() 
            Thread ParallelClassTest.access$402(Thread) 
            Thread ParallelClassTest.access$302(Thread) 
            Thread ParallelClassTest.access$102(Thread) 
            void ParallelClassTest.testsRunInParallel() 
            void ParallelClassTest.init() 
            CountDownLatch ParallelClassTest.access$000()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class java.io.FileOutputStream
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.core.CommandLineTest
fields: {
           java.io.PrintStream* oldOut <> 
           java.io.ByteArrayOutputStream* results <>
         }
statics: {
            int fCount <> 
            _Bool testWasRun <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CommandLineTest.runATest() 
            int CommandLineTest.access$108() 
            CommandLineTest.<init>() 
            void CommandLineTest.runTwoClassesAsArray() 
            void CommandLineTest.after() 
            void CommandLineTest.runAClass() 
            void CommandLineTest.before() 
            boolean CommandLineTest.access$002(boolean) 
            void CommandLineTest.runTwoClasses()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false

class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$CreateTestDefersToNoArgCreateTestRunner
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            _Bool $assertionsDisabled <_final> 
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerOverrideTest$CreateTestDefersToNoArgCreateTestRunner.<clinit>() 
            BlockJUnit4ClassRunnerOverrideTest$CreateTestDefersToNoArgCreateTestRunner.<init>(Class) 
            Object BlockJUnit4ClassRunnerOverrideTest$CreateTestDefersToNoArgCreateTestRunner.createTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 144, column 24]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$HasWrongMessage
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$HasWrongMessage.<init>() 
            void ExpectedExceptionTest$HasWrongMessage.throwsNullPointerException()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 158, column 24]}]}
dummy: false
class java.lang.SecurityException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.NullPointerException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.Character
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.internal.StackTracesTest$1
fields: {
           java.lang.Class* val$testClass <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            Object StackTracesTest$1.call() 
            Result StackTracesTest$1.call() 
            StackTracesTest$1.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 297, column 78]}]}
dummy: false
class java.lang.StringBuffer
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.methods.AnnotationTest$OrderTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationTest$OrderTest.onceAfter() 
            AnnotationTest$OrderTest.<init>() 
            void AnnotationTest$OrderTest.after() 
            void AnnotationTest$OrderTest.onceBefore() 
            void AnnotationTest$OrderTest.before() 
            void AnnotationTest$OrderTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 314, column 24]}]}
dummy: false
class org.junit.tests.assertion.AssertionTest$NullToString
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String AssertionTest$NullToString.toString() 
            AssertionTest$NullToString.<init>(AssertionTest$1) 
            AssertionTest$NullToString.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 750, column 25]}]}
dummy: false
class org.junit.rules.ClassRulesTest$CallMethodOnlyOnceRule
fields: {}
statics: {
            int countOfMethodCalls <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$CallMethodOnlyOnceRule.<clinit>() 
            ClassRulesTest$CallMethodOnlyOnceRule$Dummy ClassRulesTest$CallMethodOnlyOnceRule.both() 
            ClassRulesTest$CallMethodOnlyOnceRule.<init>() 
            void ClassRulesTest$CallMethodOnlyOnceRule.onlyOnce()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 221, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SuperInheritance
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationTest$SuperInheritance.afterClassSuper() 
            void AnnotationTest$SuperInheritance.beforeSuper() 
            AnnotationTest$SuperInheritance.<init>() 
            void AnnotationTest$SuperInheritance.afterSuper() 
            void AnnotationTest$SuperInheritance.beforeClassSuper()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 406, column 17]}]}
dummy: false
class org.junit.experimental.theories.suppliers.TestedOn
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            int[] TestedOn.ints()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.theories.ParametersSuppliedBy(value="org.junit.experimental.theories.suppliers.TestedOnSupplier") _java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.PARAMETER")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 29, column 18]}]}
dummy: false
class org.hamcrest.core.CombinableMatcher$CombinableEitherMatcher
fields: {
           org.hamcrest.Matcher* first <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CombinableMatcher CombinableMatcher$CombinableEitherMatcher.or(Matcher) 
            CombinableMatcher$CombinableEitherMatcher.<init>(Matcher)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest$MethodBlockAfterFireTestStarted
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerTest$MethodBlockAfterFireTestStarted.<init>() 
            void BlockJUnit4ClassRunnerTest$MethodBlockAfterFireTestStarted.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 39, column 24]}]}
dummy: false
class org.junit.tests.listening.RunnerTest$MyListener
fields: {
           org.junit.tests.listening.RunnerTest* this$0 <_final> 
           int testCount <>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            RunnerTest$MyListener.<init>(RunnerTest) 
            void RunnerTest$MyListener.testRunStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 17]}]}
dummy: false
class org.junit.runners.model.MultipleFailureException
fields: {
           java.util.List* fErrors <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            MultipleFailureException.<init>(List) 
            void MultipleFailureException.printStackTrace(PrintStream) 
            String MultipleFailureException.getMessage() 
            void MultipleFailureException.printStackTrace(PrintWriter) 
            void MultipleFailureException.assertEmpty(List) 
            List MultipleFailureException.getFailures() 
            void MultipleFailureException.printStackTrace()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.model.FrameworkFieldTest
fields: {
           org.junit.rules.ExpectedException* thrown <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FrameworkFieldTest.cannotBeCreatedWithoutUnderlyingField() 
            void FrameworkFieldTest.hasToStringWhichPrintsFieldName() 
            void FrameworkFieldTest.presentAnnotationIsAvailable() 
            FrameworkFieldTest.<init>() 
            void FrameworkFieldTest.missingAnnotationIsNotAvailable()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class org.junit.runners.model.FrameworkMethodTest$ClassWithDummyMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FrameworkMethodTest$ClassWithDummyMethod.dummyMethod() 
            FrameworkMethodTest$ClassWithDummyMethod.<init>() 
            void FrameworkMethodTest$ClassWithDummyMethod.annotatedDummyMethod()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 51, column 25]}]}
dummy: false
class org.junit.tests.running.classes.EnclosedTest$Enclosing$C
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            EnclosedTest$Enclosing$C.<init>() 
            void EnclosedTest$Enclosing$C.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 33, column 37]}]}
dummy: false
class org.junit.rules.ClassRulesTest$CallMethodOnlyOnceRule$Dummy
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement ClassRulesTest$CallMethodOnlyOnceRule$Dummy.apply(Statement,Description) 
            ClassRulesTest$CallMethodOnlyOnceRule$Dummy.<init>() 
            ClassRulesTest$CallMethodOnlyOnceRule$Dummy.<init>(ClassRulesTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 224, column 29]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ThrowExceptionWithExpectedType
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$ThrowExceptionWithExpectedType.<init>() 
            void ExpectedExceptionTest$ThrowExceptionWithExpectedType.throwsNullPointerException()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 124, column 24]}]}
dummy: false
class org.junit.experimental.theories.suppliers.TestedOnSupplier
fields: {}
statics: {}
supers: {
           class org.junit.experimental.theories.ParameterSupplier
         }
objc_protocols: {}
methods: {
            List TestedOnSupplier.getValueSources(ParameterSignature) 
            TestedOnSupplier.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$A
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$A.c() 
            OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$A.<init>() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$A.b() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite$A.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 71, column 32]}]}
dummy: false
class org.junit.runner.Computer$2
fields: {
           org.junit.runner.Computer* this$0 <_final> 
           java.util.List* runners <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.Suite
         }
objc_protocols: {}
methods: {
            String Computer$2.getName() 
            Computer$2.<init>(Computer,RunnerBuilder,Class[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 33, column 20]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Starting
fields: {
           org.junit.rules.TestRule* watcher <_final _org.junit.Rule>
         }
statics: {
            org.junit.runner.Description* catchedDescription <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Description TestWatcherTest$CallbackArguments$Starting.access$1000() 
            TestWatcherTest$CallbackArguments$Starting.<init>() 
            void TestWatcherTest$CallbackArguments$Starting.test() 
            Description TestWatcherTest$CallbackArguments$Starting.access$1002(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 300, column 28]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.FailingDataPointMethods$HasWronglyIgnoredFailingSingleDataPointMethod
fields: {}
statics: {
            int num <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FailingDataPointMethods$HasWronglyIgnoredFailingSingleDataPointMethod.<clinit>() 
            void FailingDataPointMethods$HasWronglyIgnoredFailingSingleDataPointMethod.theory(int) 
            FailingDataPointMethods$HasWronglyIgnoredFailingSingleDataPointMethod.<init>() 
            int FailingDataPointMethods$HasWronglyIgnoredFailingSingleDataPointMethod.failingDataPoint()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 97, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithParameterSupplier$SimplePotentialAssignment
fields: {
           java.lang.String* description <> 
           java.lang.Object* value <>
         }
statics: {}
supers: {
           class org.junit.experimental.theories.PotentialAssignment
         }
objc_protocols: {}
methods: {
            Object WithParameterSupplier$SimplePotentialAssignment.getValue() 
            String WithParameterSupplier$SimplePotentialAssignment.getDescription() 
            WithParameterSupplier$SimplePotentialAssignment.<init>(Object,String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 25]}]}
dummy: false
class org.junit.rules.StopwatchTest$AbstractStopwatchTest
fields: {
           org.junit.rules.Stopwatch* stopwatch <_final> 
           org.junit.rules.RuleChain* chain <_final _org.junit.Rule> 
           org.junit.rules.TestWatcher* watcher <_final> 
           org.junit.rules.Stopwatch$Clock* fakeClock <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            StopwatchTest$AbstractStopwatchTest.<init>() 
            void StopwatchTest$AbstractStopwatchTest.afterStopwatchRule()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 52, column 33]}]}
dummy: false
class org.junit.internal.requests.MemoizingRequest
fields: {
           java.util.concurrent.locks.Lock* runnerLock <_final> 
           org.junit.runner.Runner* runner <_volatile>
         }
statics: {}
supers: {
           class org.junit.runner.Request
         }
objc_protocols: {}
methods: {
            Runner MemoizingRequest.createRunner() 
            MemoizingRequest.<init>() 
            Runner MemoizingRequest.getRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$ParameterizedWithoutSpecialTestname
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParameterizedTestTest$ParameterizedWithoutSpecialTestname.<init>(Object) 
            void ParameterizedTestTest$ParameterizedWithoutSpecialTestname.testSomething() 
            Collection ParameterizedTestTest$ParameterizedWithoutSpecialTestname.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 118, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithExtendedParameterSources
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithExtendedParameterSources.shouldFilterOutNullSingleDataPoints() 
            void WithExtendedParameterSources.getDataPointsFromArrayMethod() 
            void WithExtendedParameterSources.ShouldRejectTheoriesWithOnlyDisallowedNullData() 
            WithExtendedParameterSources.<init>() 
            void WithExtendedParameterSources.dataPointCanBeArray() 
            void WithExtendedParameterSources.shouldFilterOutNullElementsFromDataPointArrays() 
            void WithExtendedParameterSources.getDataPointsFromArrayMethodInSpiteOfMalformedness() 
            void WithExtendedParameterSources.getDataPointsFromArray() 
            void WithExtendedParameterSources.testedOnLimitsParameters()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.ClassRequestTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ClassRequestTest.<init>() 
            void ClassRequestTest.noSuiteMethodIfMethodPrivate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasDataPointsListMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            List AllMembersSupplierTest$HasDataPointsListMethod.getList() 
            AllMembersSupplierTest$HasDataPointsListMethod.<init>() 
            void AllMembersSupplierTest$HasDataPointsListMethod.theory(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 174, column 24]}]}
dummy: false
class org.junit.runners.model.FrameworkMethodTest
fields: {
           org.junit.rules.ExpectedException* thrown <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FrameworkMethodTest.cannotBeCreatedWithoutUnderlyingField() 
            void FrameworkMethodTest.presentAnnotationIsAvailable() 
            FrameworkMethodTest.<init>() 
            void FrameworkMethodTest.hasToStringWhichPrintsMethodName() 
            void FrameworkMethodTest.missingAnnotationIsNotAvailable()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class org.junit.tests.assertion.MultipleFailureExceptionTest
fields: {}
statics: {
            java.lang.String* LINE_SEPARATOR <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MultipleFailureExceptionTest.<clinit>() 
            void MultipleFailureExceptionTest.assertEmptyThrowsMultipleFailureExceptionForManyThrowables() 
            void MultipleFailureExceptionTest.assertEmptyRethrowsSingleRuntimeException() 
            MultipleFailureExceptionTest.<init>() 
            void MultipleFailureExceptionTest.assertEmptyWrapsAssumptionFailuresForManyThrowables() 
            void MultipleFailureExceptionTest.assertEmptyDoesNotThrowForEmptyList() 
            void MultipleFailureExceptionTest.assertEmptyErrorListConstructorFailure() 
            void MultipleFailureExceptionTest.assertEmptyRethrowsSingleError()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 13]}]}
dummy: false
class org.junit.runner.Description
fields: {
           java.lang.String* fDisplayName <_final> 
           java.lang.annotation.Annotation*[_*_](*) fAnnotations <_final> 
           java.util.Collection* fChildren <_final> 
           java.io.Serializable* fUniqueId <_final> 
           java.lang.Class* fTestClass <_volatile>
         }
statics: {
            java.util.regex.Pattern* METHOD_AND_CLASS_NAME_PATTERN <_final> 
            long serialVersionUID <_final> 
            org.junit.runner.Description* TEST_MECHANISM <_final> 
            org.junit.runner.Description* EMPTY <_final>
          }
supers: {
           class java.lang.Object 
           class java.io.Serializable
         }
objc_protocols: {}
methods: {
            void Description.<clinit>() 
            Description.<init>(Class,String,Annotation[]) 
            Description Description.createTestDescription(Class,String) 
            Description Description.createTestDescription(String,String,Serializable) 
            boolean Description.isEmpty() 
            int Description.testCount() 
            boolean Description.isSuite() 
            String Description.formatDisplayName(String,String) 
            Annotation Description.getAnnotation(Class) 
            String Description.getClassName() 
            String Description.getMethodName() 
            Class Description.getTestClass() 
            Description Description.createSuiteDescription(Class,Annotation[]) 
            boolean Description.equals(Object) 
            Description Description.createTestDescription(Class,String,Annotation[]) 
            String Description.methodAndClassNamePatternGroupOrDefault(int,String) 
            String Description.toString() 
            Description.<init>(Class,String,Serializable,Annotation[]) 
            ArrayList Description.getChildren() 
            Collection Description.getAnnotations() 
            String Description.getDisplayName() 
            Description Description.createSuiteDescription(String,Annotation[]) 
            Description Description.childlessCopy() 
            int Description.hashCode() 
            Description Description.createSuiteDescription(String,Serializable,Annotation[]) 
            Description Description.createTestDescription(String,String,Annotation[]) 
            boolean Description.isTest() 
            Description Description.createSuiteDescription(Class) 
            void Description.addChild(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.AllRunnersTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllRunnersTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.runners.model.AllModelTests, org.junit.runners.parameterized.AllParameterizedTests, org.junit.runners.RuleContainerTest, org.junit.runners.CustomBlockJUnit4ClassRunnerTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false
class org.junit.tests.running.methods.ExpectedTest$NoneThrown
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedTest$NoneThrown.nothing() 
            ExpectedTest$NoneThrown.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 45, column 24]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckRunnableThatThrowsExpectedTypeOfException$1
fields: {
           org.junit.rules.ErrorCollectorTest$CheckRunnableThatThrowsExpectedTypeOfException* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.function.ThrowingRunnable
         }
objc_protocols: {}
methods: {
            void ErrorCollectorTest$CheckRunnableThatThrowsExpectedTypeOfException$1.run() 
            ErrorCollectorTest$CheckRunnableThatThrowsExpectedTypeOfException$1.<init>(ErrorCollectorTest$CheckRunnableThatThrowsExpectedTypeOfException)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 274, column 89]}]}
dummy: false
class org.junit.runner.Runner
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runner.Describable
         }
objc_protocols: {}
methods: {
            void Runner.run(RunNotifier) 
            int Runner.testCount() 
            Runner.<init>() 
            Description Runner.getDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$NoSuiteClassesAnnotation
fields: {
           org.junit.tests.running.classes.SuiteTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$NoSuiteClassesAnnotation.<init>(SuiteTest)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 211, column 17]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$OldTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            AnnotationTest$OldTest.<init>() 
            void AnnotationTest$OldTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 217, column 24]}]}
dummy: false
class org.junit.internal.management.ReflectiveThreadMXBean
fields: {
           java.lang.Object* threadMxBean <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.management.ThreadMXBean
         }
objc_protocols: {}
methods: {
            long ReflectiveThreadMXBean.getThreadCpuTime(long) 
            ReflectiveThreadMXBean.<init>(Object) 
            boolean ReflectiveThreadMXBean.isThreadCpuTimeSupported()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.extendingwithstubs.ReguessableValue
fields: {}
statics: {}
supers: {
           class org.junit.experimental.theories.PotentialAssignment
         }
objc_protocols: {}
methods: {
            ReguessableValue.<init>() 
            List ReguessableValue.reguesses(AssumptionViolatedException)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false

class org.junit.rules.TestWatcherTest$InterplayWithOtherRules$ExpectedExceptionTest
fields: {
           org.junit.rules.TestRule* a <_final _org.junit.Rule> 
           org.junit.rules.ExpectedException* thrown <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWatcherTest$InterplayWithOtherRules$ExpectedExceptionTest.<init>() 
            void TestWatcherTest$InterplayWithOtherRules$ExpectedExceptionTest.testWithExpectedException()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 352, column 28]}]}
dummy: false
class junit.tests.SampleJUnit3Tests$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.Test
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            long Test.timeout() 
            Class Test.expected()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.METHOD")>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false

class org.junit.experimental.categories.CategoryTest$IgnoredTestCategoriesSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$IgnoredTestCategoriesSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="java.lang.Runnable") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$NoTest, org.junit.experimental.categories.CategoryTest$IgnoredTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 462, column 24]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$InheritanceAnyAll
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$InheritanceAnyAll.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$A, org.junit.experimental.categories.MultiCategoryTest$B") _org.junit.experimental.categories.Categories$ExcludeCategory(value="org.junit.experimental.categories.MultiCategoryTest$A, org.junit.experimental.categories.MultiCategoryTest$C", matchAny="false") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.MultiCategoryTest$InheritanceAnyAllTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 122, column 30]}]}
dummy: false
class java.lang.reflect.Proxy
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.validation.ValidationTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ValidationTest.nonStaticBeforeClass() 
            ValidationTest.<init>() 
            void ValidationTest.initializationErrorIsOnCorrectClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$NoTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$NoTest.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="java.lang.Runnable")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 446, column 24]}]}
dummy: false
class org.junit.runners.BlockJUnit4ClassRunner$2
fields: {
           org.junit.runners.model.FrameworkMethod* val$method <_final> 
           org.junit.runners.BlockJUnit4ClassRunner* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.internal.runners.model.ReflectiveCallable
         }
objc_protocols: {}
methods: {
            Object BlockJUnit4ClassRunner$2.runReflectiveCall() 
            BlockJUnit4ClassRunner$2.<init>(BlockJUnit4ClassRunner,FrameworkMethod)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 306, column 44]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest
fields: {
           org.hamcrest.Matcher* matcher <_final> 
           java.lang.Class* classUnderTest <_final>
         }
statics: {
            java.lang.String* ARBITRARY_MESSAGE <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Collection ExpectedExceptionTest.testsWithEventMatcher() 
            void ExpectedExceptionTest.runTestAndVerifyResult() 
            ExpectedExceptionTest.<init>(Class,Matcher)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 13]}]}
dummy: false
class java.lang.ClassLoader
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.RuleChainTest$UseRuleChain
fields: {
           org.junit.rules.RuleChain* chain <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleChainTest$UseRuleChain.<init>() 
            void RuleChainTest$UseRuleChain.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 44, column 24]}]}
dummy: false
class org.junit.internal.runners.statements.InvokeMethod
fields: {
           org.junit.runners.model.FrameworkMethod* testMethod <_final> 
           java.lang.Object* target <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            InvokeMethod.<init>(FrameworkMethod,Object) 
            void InvokeMethod.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest
fields: {}
statics: {
            java.lang.String* FAILURE_MESSAGE <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassLevelMethodsWithIgnoredTestsTest.analyzeFailure(Failure,String) 
            void ClassLevelMethodsWithIgnoredTestsTest.afterClassShouldNotRunWhenAllTestsAreIgnored() 
            void ClassLevelMethodsWithIgnoredTestsTest.beforeClassShouldNotRunWhenAllTestsAreIgnored() 
            void ClassLevelMethodsWithIgnoredTestsTest.runClassAndVerifyNoFailures(Class,String) 
            ClassLevelMethodsWithIgnoredTestsTest.<init>() 
            void ClassLevelMethodsWithIgnoredTestsTest.classRuleShouldNotBeAppliedWhenAllTestsAreIgnored() 
            void ClassLevelMethodsWithIgnoredTestsTest.beforeClassShouldNotRunWhenAllTestsAreFiltered() 
            void ClassLevelMethodsWithIgnoredTestsTest.beforeClassShouldNotRunWhenWholeClassIsIgnored() 
            void ClassLevelMethodsWithIgnoredTestsTest.analyseResult(Result,String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 13]}]}
dummy: false
class org.junit.tests.validation.anotherpackage.Super
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Super.<init>() 
            void Super.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.io.PrintWriter
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.running.methods.AnnotationTest$SuperStaticFieldShadowing$1
fields: {}
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            AnnotationTest$SuperStaticFieldShadowing$1.<init>() 
            void AnnotationTest$SuperStaticFieldShadowing$1.after() 
            void AnnotationTest$SuperStaticFieldShadowing$1.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 649, column 61]}]}
dummy: false
class org.junit.tests.running.methods.ParameterizedTestMethodTest$SubShadows
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.ParameterizedTestMethodTest$SuperWrong
         }
objc_protocols: {}
methods: {
            void ParameterizedTestMethodTest$SubShadows.notPublic() 
            ParameterizedTestMethodTest$SubShadows.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 151, column 24]}]}
dummy: false
class junit.framework.JUnit4TestAdapter
fields: {
           org.junit.runner.Runner* fRunner <_final> 
           junit.framework.JUnit4TestAdapterCache* fCache <_final> 
           java.lang.Class* fNewTestClass <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.Test 
           class org.junit.runner.manipulation.Filterable 
           class org.junit.runner.manipulation.Orderable 
           class org.junit.runner.Describable
         }
objc_protocols: {}
methods: {
            void JUnit4TestAdapter.run(TestResult) 
            boolean JUnit4TestAdapter.isIgnored(Description) 
            void JUnit4TestAdapter.filter(Filter) 
            List JUnit4TestAdapter.getTests() 
            int JUnit4TestAdapter.countTestCases() 
            Class JUnit4TestAdapter.getTestClass() 
            String JUnit4TestAdapter.toString() 
            JUnit4TestAdapter.<init>(Class) 
            Description JUnit4TestAdapter.removeIgnored(Description) 
            void JUnit4TestAdapter.order(Orderer) 
            void JUnit4TestAdapter.sort(Sorter) 
            JUnit4TestAdapter.<init>(Class,JUnit4TestAdapterCache) 
            Description JUnit4TestAdapter.getDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 13]}]}
dummy: false
class java.util.Iterator
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.listening.RunnerTest$ExampleTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            RunnerTest$ExampleTest.<init>() 
            void RunnerTest$ExampleTest.testEmpty()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 24]}]}
dummy: false
class org.junit.tests.listening.TestListenerTest$OneTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestListenerTest$OneTest.nothing() 
            TestListenerTest$OneTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 24, column 24]}]}
dummy: false
class org.junit.rules.MethodRulesTest$MultipleRuleTest
fields: {
           org.junit.rules.MethodRule* incrementor1 <_org.junit.Rule> 
           org.junit.rules.MethodRule* incrementor2 <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$MultipleRuleTest.nothing() 
            MethodRulesTest$MultipleRuleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 100, column 24]}]}
dummy: false
class org.junit.rules.MethodRulesTest$OnFailureTest$1
fields: {
           org.junit.rules.MethodRulesTest$OnFailureTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatchman
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$OnFailureTest$1.failed(Throwable,FrameworkMethod) 
            MethodRulesTest$OnFailureTest$1.<init>(MethodRulesTest$OnFailureTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 139, column 56]}]}
dummy: false

class org.junit.tests.running.methods.ExpectedTest$ExpectAssumptionViolatedException
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedTest$ExpectAssumptionViolatedException.<init>() 
            void ExpectedTest$ExpectAssumptionViolatedException.throwsAssumptionViolatedException()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 72, column 24]}]}
dummy: false
class java.util.Vector
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.extensions.TestSetup$1
fields: {
           junit.extensions.TestSetup* this$0 <_final> 
           junit.framework.TestResult* val$result <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.Protectable
         }
objc_protocols: {}
methods: {
            TestSetup$1.<init>(TestSetup,TestResult) 
            void TestSetup$1.protect()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 42]}]}
dummy: false

class org.junit.experimental.categories.CategoriesAndParameterizedTest$TestThatAvoidsNoTestRemainsException
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoriesAndParameterizedTest$TestThatAvoidsNoTestRemainsException.<init>() 
            void CategoriesAndParameterizedTest$TestThatAvoidsNoTestRemainsException.testSomething()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="org.junit.experimental.categories.CategoriesAndParameterizedTest$Token")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 39, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderableTest$TestClassRunnerIsOrderable$OrderMe
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestClassRunnerIsOrderable$OrderMe.c() 
            OrderableTest$TestClassRunnerIsOrderable$OrderMe.<init>() 
            void OrderableTest$TestClassRunnerIsOrderable$OrderMe.b() 
            void OrderableTest$TestClassRunnerIsOrderable$OrderMe.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 28]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ExpectsMultipleMatchers
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ExpectsMultipleMatchers.throwsMore() 
            ExpectedExceptionTest$ExpectsMultipleMatchers.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 245, column 24]}]}
dummy: false

class org.junit.tests.running.methods.TimeoutTest$InfiniteLoopWithStuckThreadTest
fields: {
           org.junit.rules.TestRule* globalTimeout <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutTest$InfiniteLoopWithStuckThreadTest.<init>() 
            void TimeoutTest$InfiniteLoopWithStuckThreadTest.failure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 200, column 24]}]}
dummy: false
class org.junit.tests.running.classes.parent.TestWithClassRule
fields: {}
statics: {
            org.junit.rules.TestRule* rule <_org.junit.ClassRule> 
            java.lang.Class* applyTestClass <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestWithClassRule.<clinit>() 
            void TestWithClassRule.testClassRuleExecuted() 
            TestWithClassRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false

class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersTest$ClassWithPrivateParameter
fields: {
           java.lang.String* parameter <_org.junit.runners.Parameterized$Parameter>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerWithParametersTest$ClassWithPrivateParameter.<init>() 
            void BlockJUnit4ClassRunnerWithParametersTest$ClassWithPrivateParameter.dummyTest()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 55, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$MultipleParametersBeforeParamAndAfterParam
fields: {
           int y <_final> 
           java.lang.String* x <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$MultipleParametersBeforeParamAndAfterParam.second() 
            void ParameterizedTestTest$MultipleParametersBeforeParamAndAfterParam.before(String,int) 
            void ParameterizedTestTest$MultipleParametersBeforeParamAndAfterParam.after(String,int) 
            ParameterizedTestTest$MultipleParametersBeforeParamAndAfterParam.<init>(String,int) 
            Collection ParameterizedTestTest$MultipleParametersBeforeParamAndAfterParam.data() 
            void ParameterizedTestTest$MultipleParametersBeforeParamAndAfterParam.first()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized") _org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.NAME_ASCENDING")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 377, column 24]}]}
dummy: false
class org.junit.rules.DisableOnDebugTest$WithoutDebugArgumentsTest
fields: {
           org.junit.rules.TestRule* failOnExecution <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.rules.DisableOnDebugTest$AbstractDisableOnDebugTest
         }
objc_protocols: {}
methods: {
            DisableOnDebugTest$WithoutDebugArgumentsTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 93, column 24]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ExpectsMatcher
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ExpectsMatcher.throwsMore() 
            ExpectedExceptionTest$ExpectsMatcher.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 234, column 24]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$TestWithMethodRule$1
fields: {
           org.junit.rules.RuleMemberValidatorTest$TestWithMethodRule* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            Statement RuleMemberValidatorTest$TestWithMethodRule$1.apply(Statement,FrameworkMethod,Object) 
            RuleMemberValidatorTest$TestWithMethodRule$1.<init>(RuleMemberValidatorTest$TestWithMethodRule)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 206, column 61]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Succeeded
fields: {
           org.junit.rules.TestRule* watcher <_final _org.junit.Rule>
         }
statics: {
            org.junit.runner.Description* catchedDescription <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Description TestWatcherTest$CallbackArguments$Succeeded.access$302(Description) 
            TestWatcherTest$CallbackArguments$Succeeded.<init>() 
            Description TestWatcherTest$CallbackArguments$Succeeded.access$300() 
            void TestWatcherTest$CallbackArguments$Succeeded.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 191, column 28]}]}
dummy: false
class org.junit.runner.notification.RunListener
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RunListener.testRunFinished(Result) 
            void RunListener.testFailure(Failure) 
            void RunListener.testSuiteFinished(Description) 
            RunListener.<init>() 
            void RunListener.testIgnored(Description) 
            void RunListener.testSuiteStarted(Description) 
            void RunListener.testAssumptionFailure(Failure) 
            void RunListener.testStarted(Description) 
            void RunListener.testFinished(Description) 
            void RunListener.testRunStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.TestRuleTest$WrongTypedField
fields: {
           int x <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$WrongTypedField.foo() 
            TestRuleTest$WrongTypedField.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 177, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.extendingwithstubs.Guesser
fields: {
           java.lang.Class* type <_final> 
           org.junit.tests.experimental.theories.extendingwithstubs.Guesser$GuessMap* guesses <_final>
         }
statics: {}
supers: {
           class org.junit.tests.experimental.theories.extendingwithstubs.ReguessableValue
         }
objc_protocols: {}
methods: {
            Guesser.<init>(Class,Guesser$GuessMap) 
            Object Guesser.getProxy() 
            Object Guesser.getValue() 
            String Guesser.getDescription() 
            Guesser.<init>(Class) 
            Guesser$GuessMap Guesser.access$000(Guesser) 
            List Guesser.reguesses(AssumptionViolatedException) 
            Class Guesser.getType()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerTest$1
fields: {
           org.junit.tests.running.classes.ParentRunnerTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.model.RunnerScheduler
         }
objc_protocols: {}
methods: {
            void ParentRunnerTest$1.schedule(Runnable) 
            void ParentRunnerTest$1.finished() 
            ParentRunnerTest$1.<init>(ParentRunnerTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 51, column 50]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$RunAllAftersRegardless
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$RunAllAftersRegardless.<init>() 
            void AnnotationTest$RunAllAftersRegardless.two() 
            void AnnotationTest$RunAllAftersRegardless.one() 
            void AnnotationTest$RunAllAftersRegardless.empty()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 756, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$Callbacks
fields: {
           java.lang.String* expectedCallbacks <_org.junit.runners.Parameterized$Parameter> 
           java.lang.Class* testClass <_org.junit.runners.Parameterized$Parameter> 
           java.util.List* expectedFailures <_org.junit.runners.Parameterized$Parameter>
         }
statics: {
            org.junit.rules.TestRule* selectedRule <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestWatcherTest$Callbacks.resultHasAllFailuresThrownByCallbacks() 
            Object[][] TestWatcherTest$Callbacks.parameters() 
            TestRule TestWatcherTest$Callbacks.access$200() 
            TestWatcherTest$Callbacks.<init>() 
            void TestWatcherTest$Callbacks.testWatcherDoesNotModifyResult() 
            void TestWatcherTest$Callbacks.correctCallbacksCalled()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 24]}]}
dummy: false
class junit.tests.framework.TestCaseTest$2
fields: {
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           _Bool fTornDown <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.tests.framework.TestCaseTest$TornDown
         }
objc_protocols: {}
methods: {
            TestCaseTest$2.<init>(TestCaseTest) 
            void TestCaseTest$2.runTest() 
            void TestCaseTest$2.tearDown()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 47, column 40]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithExtendedParameterSources$ShouldFilterOutNullSingleDataPoints
fields: {}
statics: {
            java.lang.String* A <_org.junit.experimental.theories.DataPoint> 
            java.lang.String* NULL <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithExtendedParameterSources$ShouldFilterOutNullSingleDataPoints.<clinit>() 
            void WithExtendedParameterSources$ShouldFilterOutNullSingleDataPoints.allStringsAreNonNull(String) 
            WithExtendedParameterSources$ShouldFilterOutNullSingleDataPoints.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 24]}]}
dummy: false
class org.junit.internal.management.ReflectiveRuntimeMXBean
fields: {
           java.lang.Object* runtimeMxBean <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.management.RuntimeMXBean
         }
objc_protocols: {}
methods: {
            List ReflectiveRuntimeMXBean.getInputArguments() 
            ReflectiveRuntimeMXBean.<init>(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.lang.Void
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.rules.RuleMemberValidatorTest$TestWithClassRuleMethodThatReturnsMethodRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MethodRule RuleMemberValidatorTest$TestWithClassRuleMethodThatReturnsMethodRule.methodRule() 
            RuleMemberValidatorTest$TestWithClassRuleMethodThatReturnsMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 109, column 24]}]}
dummy: false
class org.junit.runner.notification.RunNotifierTest
fields: {
           org.junit.runner.notification.RunNotifier* fNotifier <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RunNotifierTest.hasNoProblemsWithFailingListeners() 
            void RunNotifierTest.addFirstAndRemoveWithThreadSafeListener() 
            void RunNotifierTest.addFirstAndRemoveWithNonThreadSafeListener() 
            RunNotifierTest.<init>() 
            void RunNotifierTest.wrapIfNotThreadSafeShouldWrapNonThreadSafeListeners() 
            void RunNotifierTest.addAndRemoveWithNonThreadSafeListener() 
            void RunNotifierTest.wrapIfNotThreadSafeShouldNotWrapThreadSafeListeners() 
            void RunNotifierTest.addAndRemoveWithThreadSafeListener() 
            void RunNotifierTest.notifiesSecondListenerIfFirstThrowsException()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false
class java.io.InterruptedIOException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runner.manipulation.Filter
fields: {}
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void Filter.<clinit>() 
            void Filter.apply(Object) 
            Filter Filter.intersect(Filter) 
            Filter.<init>() 
            boolean Filter.shouldRun(Description) 
            Filter Filter.matchMethodDescription(Description) 
            String Filter.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.rules.LoggingTestRule
fields: {
           java.lang.String* name <_final> 
           java.lang.StringBuilder* log <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement LoggingTestRule.apply(Statement,Description) 
            LoggingTestRule.<init>(StringBuilder,String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$BeforeClassTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityTest$BeforeClassTest.<init>() 
            void ForwardCompatibilityTest$BeforeClassTest.after() 
            void ForwardCompatibilityTest$BeforeClassTest.afterClass() 
            void ForwardCompatibilityTest$BeforeClassTest.two() 
            void ForwardCompatibilityTest$BeforeClassTest.one() 
            void ForwardCompatibilityTest$BeforeClassTest.before() 
            void ForwardCompatibilityTest$BeforeClassTest.beforeClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 139, column 24]}]}
dummy: false
class org.junit.tests.running.classes.ThreadsTest$TestWithInterrupt
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ThreadsTest$TestWithInterrupt.<init>() 
            void ThreadsTest$TestWithInterrupt.otherTestCaseInterruptingCurrentThread() 
            void ThreadsTest$TestWithInterrupt.interruptCurrentThread()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 24]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$All
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$All.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.SuiteTest$TestA, org.junit.tests.running.classes.SuiteTest$TestB")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 42, column 24]}]}
dummy: false
class java.util.LinkedHashMap
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.internal.AllInternalTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllInternalTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.internal.builders.AnnotatedBuilderTest, org.junit.internal.ChecksTest, org.junit.internal.runners.ErrorReportingRunnerTest, org.junit.internal.runners.statements.ExpectExceptionTest, org.junit.internal.runners.statements.FailOnTimeoutTest, org.junit.internal.MethodSorterTest, org.junit.internal.matchers.StacktracePrintingMatcherTest, org.junit.internal.StackTracesTest, org.junit.internal.matchers.ThrowableCauseMatcherTest, org.junit.internal.ArrayComparisonFailureTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 13]}]}
dummy: false
class org.junit.internal.runners.FailedBefore
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            FailedBefore.<init>()
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$DifferentTypesInConstructor
fields: {}
statics: {
            java.lang.String* A <_final _org.junit.experimental.theories.DataPoint> 
            int ONE <_final _org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuccessfulWithDataPointFields$DifferentTypesInConstructor.yesIndeed(String) 
            SuccessfulWithDataPointFields$DifferentTypesInConstructor.<init>(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 128, column 24]}]}
dummy: false

class org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest$ATest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ForwardCompatibilityPrintingTest$ATest.error() 
            ForwardCompatibilityPrintingTest$ATest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 57, column 24]}]}
dummy: false
class java.util.regex.Pattern
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.io.ObjectStreamClass
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runner.notification.RunNotifier$3
fields: {
           org.junit.runner.Description* val$description <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier$SafeNotifier
         }
objc_protocols: {}
methods: {
            void RunNotifier$3.notifyListener(RunListener) 
            RunNotifier$3.<init>(RunNotifier,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 118, column 27]}]}
dummy: false
class org.junit.runners.model.FrameworkMethod
fields: {
           java.lang.reflect.Method* method <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.FrameworkMember
         }
objc_protocols: {}
methods: {
            Class FrameworkMethod.getDeclaringClass() 
            FrameworkMethod.<init>(Method) 
            int FrameworkMethod.getModifiers() 
            boolean FrameworkMethod.isShadowedBy(FrameworkMember) 
            Class[] FrameworkMethod.getParameterTypes() 
            Annotation FrameworkMethod.getAnnotation(Class) 
            Method FrameworkMethod.access$000(FrameworkMethod) 
            String FrameworkMethod.getName() 
            Object FrameworkMethod.invokeExplosively(Object,Object[]) 
            void FrameworkMethod.validatePublicVoid(boolean,List) 
            void FrameworkMethod.validatePublicVoidNoArg(boolean,List) 
            boolean FrameworkMethod.isShadowedBy(FrameworkMethod) 
            boolean FrameworkMethod.equals(Object) 
            String FrameworkMethod.toString() 
            void FrameworkMethod.validateNoTypeParametersOnArgs(List) 
            Class FrameworkMethod.getReturnType() 
            int FrameworkMethod.hashCode() 
            Method FrameworkMethod.getMethod() 
            boolean FrameworkMethod.isBridgeMethod() 
            boolean FrameworkMethod.producesType(Type) 
            Class FrameworkMethod.getType() 
            Annotation[] FrameworkMethod.getAnnotations()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.validation.anotherpackage.Sub
fields: {}
statics: {}
supers: {
           class org.junit.tests.validation.anotherpackage.Super
         }
objc_protocols: {}
methods: {
            Sub.<init>() 
            void Sub.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 3, column 13]}]}
dummy: false
class org.junit.internal.management.ReflectiveRuntimeMXBean$Holder
fields: {}
statics: {
            java.lang.reflect.Method* getInputArgumentsMethod <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ReflectiveRuntimeMXBean$Holder.<clinit>() 
            Method ReflectiveRuntimeMXBean$Holder.access$000() 
            ReflectiveRuntimeMXBean$Holder.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 29]}]}
dummy: false
class org.junit.rules.MethodRulesTest$PrivateRule
fields: {
           org.junit.rules.TestRule* rule <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$PrivateRule.foo() 
            MethodRulesTest$PrivateRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 263, column 24]}]}
dummy: false
class org.junit.internal.runners.TestClass
fields: {
           java.lang.Class* klass <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            List TestClass.getTestMethods() 
            List TestClass.getSuperClasses(Class) 
            List TestClass.getAnnotatedMethods(Class) 
            List TestClass.getAfters() 
            Constructor TestClass.getConstructor() 
            String TestClass.getName() 
            List TestClass.getBefores() 
            boolean TestClass.isShadowed(Method,Method) 
            TestClass.<init>(Class) 
            boolean TestClass.runsTopToBottom(Class) 
            boolean TestClass.isShadowed(Method,List) 
            Class TestClass.getJavaClass()
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.io.ObjectOutputStream
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.tests.framework.TestCaseTest$5
fields: {
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestCaseTest$5.<init>(TestCaseTest,String) 
            void TestCaseTest$5.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 87, column 51]}]}
dummy: false
class org.junit.function.ThrowingRunnable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void ThrowingRunnable.run()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields$TheoriesMustBePublic
fields: {}
statics: {
            int THREE <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UnsuccessfulWithDataPointFields$TheoriesMustBePublic.<clinit>() 
            void UnsuccessfulWithDataPointFields$TheoriesMustBePublic.numbers(int) 
            UnsuccessfulWithDataPointFields$TheoriesMustBePublic.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 87, column 24]}]}
dummy: false
class java.lang.Comparable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.RuleMemberValidatorTest$TestWithMethodRule
fields: {
           org.junit.rules.MethodRule* temporaryFolder <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestWithMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 204, column 24]}]}
dummy: false
class org.junit.rules.DisableOnDebug
fields: {
           org.junit.rules.TestRule* rule <_final> 
           _Bool debugging <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            boolean DisableOnDebug.isDebugging() 
            boolean DisableOnDebug.isDebugging(List) 
            Statement DisableOnDebug.apply(Statement,Description) 
            DisableOnDebug.<init>(TestRule,List) 
            DisableOnDebug.<init>(TestRule)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 46, column 13]}]}
dummy: false
class org.junit.internal.runners.rules.RuleMemberValidator$Builder
fields: {
           _Bool methods <> 
           java.util.List* validators <_final> 
           java.lang.Class* annotation <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            boolean RuleMemberValidator$Builder.access$900(RuleMemberValidator$Builder) 
            RuleMemberValidator$Builder RuleMemberValidator$Builder.withValidator(RuleMemberValidator$RuleValidator) 
            RuleMemberValidator$Builder.<init>(Class,RuleMemberValidator$1) 
            List RuleMemberValidator$Builder.access$1000(RuleMemberValidator$Builder) 
            RuleMemberValidator$Builder.<init>(Class) 
            RuleMemberValidator$Builder RuleMemberValidator$Builder.forMethods() 
            RuleMemberValidator RuleMemberValidator$Builder.build() 
            Class RuleMemberValidator$Builder.access$800(RuleMemberValidator$Builder)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 111, column 25]}]}
dummy: false
class org.hamcrest.core.IsInstanceOf
fields: {
           java.lang.Class* matchableClass <_final> 
           java.lang.Class* expectedClass <_final>
         }
statics: {}
supers: {
           class org.hamcrest.DiagnosingMatcher
         }
objc_protocols: {}
methods: {
            Class IsInstanceOf.matchableClass(Class) 
            Matcher IsInstanceOf.instanceOf(Class) 
            boolean IsInstanceOf.matches(Object,Description) 
            IsInstanceOf.<init>(Class) 
            Matcher IsInstanceOf.any(Class) 
            void IsInstanceOf.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.runners.JUnit38ClassRunner$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.MainRunner
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MainRunner.<init>() 
            int MainRunner.runMain(String[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.model.TestClass$FieldComparator
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int TestClass$FieldComparator.compare(Object,Object) 
            int TestClass$FieldComparator.compare(Field,Field) 
            TestClass$FieldComparator.<init>() 
            TestClass$FieldComparator.<init>(TestClass$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 333, column 25]}]}
dummy: false
class java.security.ProtectionDomain
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runner.JUnitCore
fields: {
           org.junit.runner.notification.RunNotifier* notifier <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Result JUnitCore.run(Class[]) 
            Result JUnitCore.run(Request) 
            int JUnitCore.runMain(String[]) 
            Computer JUnitCore.defaultComputer() 
            JUnitCore.<init>() 
            Result JUnitCore.run(Runner) 
            Result JUnitCore.run(Computer,Class[]) 
            void JUnitCore.removeListener(RunListener) 
            Result JUnitCore.runClasses(Class[]) 
            void JUnitCore.main(String[]) 
            Result JUnitCore.run(Test) 
            Result JUnitCore.runClasses(Computer,Class[]) 
            void JUnitCore.addListener(RunListener) 
            Result JUnitCore.runMain(JUnitSystem,String[]) 
            String JUnitCore.getVersion()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 24, column 13]}]}
dummy: false
class org.junit.rules.Verifier$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.Verifier* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            Verifier$1.<init>(Verifier,Statement) 
            void Verifier$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 31]}]}
dummy: false
class junit.tests.runner.TextFeedbackTest$7
fields: {
           junit.tests.runner.TextFeedbackTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TextFeedbackTest$7.<init>(TextFeedbackTest) 
            void TextFeedbackTest$7.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$RunAllAfters
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationTest$RunAllAfters.bad() 
            AnnotationTest$RunAllAfters.<init>() 
            void AnnotationTest$RunAllAfters.two() 
            void AnnotationTest$RunAllAfters.one() 
            void AnnotationTest$RunAllAfters.empty() 
            void AnnotationTest$RunAllAfters.good()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 723, column 24]}]}
dummy: false
class org.junit.runner.MainRunner$NullOutputStream
fields: {}
statics: {}
supers: {
           class java.io.OutputStream
         }
objc_protocols: {}
methods: {
            MainRunner$NullOutputStream.<init>() 
            void MainRunner$NullOutputStream.write(int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 17]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnComponentOfArrayTypeOnTheoryParm
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnComponentOfArrayTypeOnTheoryParm.forItems(Collection[]) 
            WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnComponentOfArrayTypeOnTheoryParm.<init>() 
            List[][] WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnComponentOfArrayTypeOnTheoryParm.items()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 129, column 24]}]}
dummy: false
class junit.tests.extensions.ExtensionTest$1
fields: {
           junit.tests.extensions.ExtensionTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            ExtensionTest$1.<init>(ExtensionTest,String) 
            void ExtensionTest$1.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 48]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$InfiniteLoopMultithreaded
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutTest$InfiniteLoopMultithreaded.<init>() 
            void TimeoutTest$InfiniteLoopMultithreaded.failure(boolean)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 166, column 24]}]}
dummy: false
class org.junit.internal.requests.OrderingRequest
fields: {
           org.junit.runner.manipulation.Ordering* ordering <_final> 
           org.junit.runner.Request* request <_final> 
           java.util.concurrent.locks.Lock* runnerLock <_final> 
           org.junit.runner.Runner* runner <_volatile>
         }
statics: {}
supers: {
           class org.junit.internal.requests.MemoizingRequest
         }
objc_protocols: {}
methods: {
            Runner OrderingRequest.createRunner() 
            OrderingRequest.<init>(Request,Ordering)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false
class org.junit.rules.TemporaryFolderUsageTest
fields: {
           org.junit.rules.TemporaryFolder* tempFolder <> 
           org.junit.rules.ExpectedException* thrown <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TemporaryFolderUsageTest.newFolderWithPathsContainingFileSeparatorCreatesFullPath() 
            void TemporaryFolderUsageTest.assertFileIsDirectory(File) 
            void TemporaryFolderUsageTest.newFolderWithGivenFolderThrowsIOExceptionIfFileExists() 
            void TemporaryFolderUsageTest.canSetTheBaseFileForATemporaryFolder() 
            void TemporaryFolderUsageTest.newFileWithGivenFilenameThrowsIOExceptionIfFileExists() 
            void TemporaryFolderUsageTest.newRandomFileIsCreatedUnderRootFolder() 
            void TemporaryFolderUsageTest.assertParentFolderForFileIs(File,File) 
            void TemporaryFolderUsageTest.newFolderWithPathContainingForwardSlashCreatesDirectories() 
            void TemporaryFolderUsageTest.newFileThrowsIllegalStateExceptionIfCreateWasNotInvoked() 
            void TemporaryFolderUsageTest.deleteShouldDoNothingIfRootFolderWasNotInitialized() 
            void TemporaryFolderUsageTest.assertFileExists(File) 
            void TemporaryFolderUsageTest.newFolderWithPathStartingWithFileSeparatorThrowsIOException() 
            TemporaryFolderUsageTest.<init>() 
            void TemporaryFolderUsageTest.newFolderWithGivenPathThrowsIllegalStateExceptionIfCreateWasNotInvoked() 
            void TemporaryFolderUsageTest.newRandomFolderIsCreatedUnderRootFolder() 
            File TemporaryFolderUsageTest.createTemporaryFolder() 
            void TemporaryFolderUsageTest.newFolderWithGivenEmptyArrayThrowsIllegalArgumentException() 
            void TemporaryFolderUsageTest.getRootShouldThrowIllegalStateExceptionIfCreateWasNotInvoked() 
            void TemporaryFolderUsageTest.createInitializesRootFolder() 
            void TemporaryFolderUsageTest.assertFileDoesNotExist(File) 
            void TemporaryFolderUsageTest.newFolderWithGivenFolderThrowsIOExceptionWhenFolderCannotBeCreated() 
            void TemporaryFolderUsageTest.checkFileExists(String,File,boolean) 
            void TemporaryFolderUsageTest.newFolderThrowsIllegalStateExceptionIfCreateWasNotInvoked() 
            void TemporaryFolderUsageTest.setUp() 
            void TemporaryFolderUsageTest.newNamedFileIsCreatedUnderRootFolder() 
            void TemporaryFolderUsageTest.newFolderWithGivenPathThrowsIOExceptionIfFolderExists() 
            void TemporaryFolderUsageTest.tearDown() 
            void TemporaryFolderUsageTest.newFileWithGivenNameThrowsIllegalStateExceptionIfCreateWasNotInvoked() 
            void TemporaryFolderUsageTest.deleteRemovesRootFolder() 
            void TemporaryFolderUsageTest.assertFileCreatedUnderRootFolder(String,File) 
            void TemporaryFolderUsageTest.newFolderWithPathContainingFileSeparatorCreatesDirectories() 
            void TemporaryFolderUsageTest.checkFileIsDirectory(String,File,boolean) 
            void TemporaryFolderUsageTest.newFolderWithGivenFolderThrowsIOExceptionIfFolderExists() 
            void TemporaryFolderUsageTest.newNestedFoldersCreatedUnderRootFolder() 
            void TemporaryFolderUsageTest.newFolderWithPathsContainingForwardSlashCreatesFullPath()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryParm
fields: {}
statics: {
            java.lang.String* string <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryParm.<clinit>() 
            WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryParm.<init>() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms$TypeVariableOnTheoryParm.forItem(Object)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 47, column 24]}]}
dummy: false
class org.junit.rules.TempFolderRuleTest
fields: {}
statics: {
            java.lang.String* NEW_FOLDER_DUMMY <_final> 
            java.lang.String* GET_ROOT_DUMMY <_final> 
            java.io.File*[_*_](*) createdFiles <> 
            java.lang.String* NEW_FILE_DUMMY <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TempFolderRuleTest.<clinit>() 
            void TempFolderRuleTest.subFolderIsDeleted() 
            void TempFolderRuleTest.incorrectUsageWithoutApplyingTheRuleShouldNotPolluteTheCurrentWorkingDirectory() 
            File[] TempFolderRuleTest.access$000() 
            void TempFolderRuleTest.recursiveDeleteFolderWithOneRandomElement() 
            void TempFolderRuleTest.randomFilesAreDeleted() 
            TempFolderRuleTest.<init>() 
            Set TempFolderRuleTest.getPosixFilePermissions(File) 
            void TempFolderRuleTest.tempFolderIsOnlyAccessibleByOwner() 
            void TempFolderRuleTest.randomSubFoldersAreDeleted() 
            void TempFolderRuleTest.cleanCurrentWorkingDirectory() 
            void TempFolderRuleTest.recursiveDeleteFolderWithZeroElements() 
            void TempFolderRuleTest.recursiveDeleteFolderWithOneElement() 
            void TempFolderRuleTest.nameClashesResultInTestFailures() 
            void TempFolderRuleTest.tempFolderIsDeleted()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 13]}]}
dummy: false
class org.junit.experimental.theories.internal.AllMembersSupplier$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.RunWithTest
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RunWithTest.runWithExtendsToSubclasses() 
            void RunWithTest.run() 
            RunWithTest.<init>() 
            void RunWithTest.characterizeErrorMessageFromBadRunner() 
            String RunWithTest.access$084(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.tests.listening.TextListenerTest$OneTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TextListenerTest$OneTest.<init>() 
            void TextListenerTest$OneTest.one()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 30, column 24]}]}
dummy: false
class java.io.ObjectInputStream
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.running.classes.ParameterizedTestTest$SingleArgumentTestWithArray
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$SingleArgumentTestWithArray.aTest() 
            ParameterizedTestTest$SingleArgumentTestWithArray.<init>(Object) 
            Object[] ParameterizedTestTest$SingleArgumentTestWithArray.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 616, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithAutoGeneratedDataPoints.shouldAutomaticallyGenerateEnumDataPoints() 
            void WithAutoGeneratedDataPoints.shouldNotAutogenerateEnumDataPointsWhenSpecificDataPointGiven() 
            WithAutoGeneratedDataPoints.<init>() 
            void WithAutoGeneratedDataPoints.shouldAutomaticallyGenerateBooleanDataPoints() 
            void WithAutoGeneratedDataPoints.shouldNotAutogenerateBooleanDataPointsWhenSpecificDataPointGiven()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false
class org.junit.internal.matchers.TypeSafeMatcher
fields: {
           java.lang.Class* expectedType <>
         }
statics: {}
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            boolean TypeSafeMatcher.matches(Object) 
            Class TypeSafeMatcher.findExpectedType(Class) 
            TypeSafeMatcher.<init>() 
            boolean TypeSafeMatcher.isMatchesSafelyMethod(Method) 
            TypeSafeMatcher.<init>(Class) 
            boolean TypeSafeMatcher.matchesSafely(Object)
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 16, column 22]}]}
dummy: false
class org.junit.rules.ClassRulesTest$UsesFieldAndMethodRule
fields: {}
statics: {
            org.junit.rules.ClassRulesTest$OrderTestRule* orderField <_org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$UsesFieldAndMethodRule.<clinit>() 
            void ClassRulesTest$UsesFieldAndMethodRule.foo() 
            ClassRulesTest$UsesFieldAndMethodRule.<init>() 
            ClassRulesTest$OrderTestRule ClassRulesTest$UsesFieldAndMethodRule.orderMethod()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 132, column 24]}]}
dummy: false
class org.junit.tests.manipulation.FilterTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FilterTest.intersectAll() 
            FilterTest.<init>() 
            void FilterTest.intersectionText() 
            void FilterTest.intersectSelf()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false
class junit.framework.Assert
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void Assert.assertEquals(String,long,long) 
            void Assert.assertEquals(String,short,short) 
            void Assert.assertEquals(byte,byte) 
            void Assert.assertTrue(String,boolean) 
            void Assert.assertEquals(String,byte,byte) 
            void Assert.fail(String) 
            void Assert.assertEquals(double,double,double) 
            void Assert.failNotSame(String,Object,Object) 
            void Assert.assertNotNull(Object) 
            void Assert.assertEquals(String,boolean,boolean) 
            void Assert.assertEquals(Object,Object) 
            void Assert.assertNotNull(String,Object) 
            void Assert.assertEquals(String,double,double,double) 
            void Assert.assertEquals(short,short) 
            Assert.<init>() 
            void Assert.assertFalse(String,boolean) 
            void Assert.assertEquals(String,char,char) 
            void Assert.assertEquals(String,Object,Object) 
            void Assert.assertEquals(long,long) 
            void Assert.failSame(String) 
            void Assert.assertEquals(String,float,float,float) 
            void Assert.assertSame(Object,Object) 
            void Assert.fail() 
            String Assert.format(String,Object,Object) 
            void Assert.assertEquals(String,int,int) 
            void Assert.assertEquals(char,char) 
            void Assert.assertFalse(boolean) 
            void Assert.failNotEquals(String,Object,Object) 
            void Assert.assertEquals(float,float,float) 
            void Assert.assertSame(String,Object,Object) 
            void Assert.assertNull(Object) 
            void Assert.assertTrue(boolean) 
            void Assert.assertEquals(String,String) 
            void Assert.assertNull(String,Object) 
            void Assert.assertEquals(int,int) 
            void Assert.assertEquals(String,String,String) 
            void Assert.assertEquals(boolean,boolean) 
            void Assert.assertNotSame(String,Object,Object) 
            void Assert.assertNotSame(Object,Object)
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.internal.builders.JUnit3Builder
fields: {
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.RunnerBuilder
         }
objc_protocols: {}
methods: {
            JUnit3Builder.<init>() 
            boolean JUnit3Builder.isPre4Test(Class) 
            Runner JUnit3Builder.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.io.PrintStream
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runner.OrderWith
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            Class OrderWith.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.TYPE") _java.lang.annotation.Inherited _org.junit.validator.ValidateWith(value="org.junit.runner.OrderWithValidator")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 23, column 18]}]}
dummy: false
class org.junit.tests.running.methods.ExpectedTest$Unexpected
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedTest$Unexpected.<init>() 
            void ExpectedTest$Unexpected.expected()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 24]}]}
dummy: false
class org.junit.rules.EventCollector$4
fields: {
           org.hamcrest.Matcher* val$exceptionMatcher <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            EventCollector$4.<init>(Matcher) 
            boolean EventCollector$4.matchesSafely(Object) 
            void EventCollector$4.describeTo(Description) 
            boolean EventCollector$4.matchesSafely(EventCollector)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 116, column 53]}]}
dummy: false
class org.junit.tests.listening.UserStopTest$OneTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UserStopTest$OneTest.foo() 
            UserStopTest$OneTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 24]}]}
dummy: false
class junit.tests.framework.AllTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTests.<init>() 
            void AllTests.main(String[]) 
            Test AllTests.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.experimental.max.MaxStarterTest$2
fields: {
           org.junit.tests.experimental.max.MaxStarterTest* this$0 <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            boolean MaxStarterTest$2.shouldRun(Description) 
            String MaxStarterTest$2.describe() 
            MaxStarterTest$2.<init>(MaxStarterTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 213, column 60]}]}
dummy: false
class org.junit.rules.StopwatchTest$Record
fields: {
           long duration <_final> 
           java.lang.String* name <_final> 
           org.junit.rules.StopwatchTest$TestStatus* status <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            StopwatchTest$Record.<init>(long,Description) 
            StopwatchTest$Record.<init>() 
            StopwatchTest$Record.<init>(long,StopwatchTest$TestStatus,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 25]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$AllWithOutAnnotation
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$AllWithOutAnnotation.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 141, column 24]}]}
dummy: false

class org.junit.experimental.categories.CategoriesAndParameterizedTest$SuiteWithParameterizedTestWithCategory
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoriesAndParameterizedTest$SuiteWithParameterizedTestWithCategory.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoriesAndParameterizedTest$Token") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoriesAndParameterizedTest$ParameterizedTestWithCategory")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 81, column 24]}]}
dummy: false
class org.junit.runner.FilterOptionIntegrationTest
fields: {
           org.junit.runner.JUnitCore* jUnitCore <> 
           org.junit.runner.FilterOptionIntegrationTest$TestListener* testListener <>
         }
statics: {
            java.lang.String* EXCLUDES_DUMMY_CATEGORY_1 <_final> 
            java.lang.String* INCLUDES_DUMMY_CATEGORY_0 <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FilterOptionIntegrationTest.<clinit>() 
            void FilterOptionIntegrationTest.shouldIncludeSomeTests() 
            void FilterOptionIntegrationTest.assertWasNotRun(Class) 
            Result FilterOptionIntegrationTest.runJUnit(String[]) 
            FilterOptionIntegrationTest.<init>() 
            void FilterOptionIntegrationTest.shouldRunAllTests() 
            void FilterOptionIntegrationTest.shouldCombineFilters() 
            void FilterOptionIntegrationTest.setUp() 
            void FilterOptionIntegrationTest.assertWasRun(Class) 
            void FilterOptionIntegrationTest.shouldExcludeSomeTests()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$OneVerySlowTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$OneVerySlowTest.<init>() 
            void CategoryTest$OneVerySlowTest.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 309, column 24]}]}
dummy: false
class org.junit.rules.TimeoutRuleTest$HasGlobalTimeUnitTimeout
fields: {
           org.junit.rules.TestRule* globalTimeout <_final _org.junit.Rule> 
           org.junit.rules.TemporaryFolder* tmpFile <_final _org.junit.Rule>
         }
statics: {
            java.lang.StringBuffer* logger <_final>
          }
supers: {
           class org.junit.rules.TimeoutRuleTest$AbstractTimeoutTest
         }
objc_protocols: {}
methods: {
            TimeoutRuleTest$HasGlobalTimeUnitTimeout.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 97, column 24]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckRunnableThatThrowsExpectedTypeOfException
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckRunnableThatThrowsExpectedTypeOfException.<init>() 
            void ErrorCollectorTest$CheckRunnableThatThrowsExpectedTypeOfException.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 268, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParentRunnerFilteringTest$CountingFilter
fields: {
           java.util.Map* countMap <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            ParentRunnerFilteringTest$CountingFilter.<init>(ParentRunnerFilteringTest$1) 
            boolean ParentRunnerFilteringTest$CountingFilter.shouldRun(Description) 
            ParentRunnerFilteringTest$CountingFilter.<init>() 
            String ParentRunnerFilteringTest$CountingFilter.describe() 
            int ParentRunnerFilteringTest$CountingFilter.getCount(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 46, column 25]}]}
dummy: false
class org.junit.tests.junit3compatibility.AllTestsTest$OneTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            AllTestsTest$OneTest.<init>() 
            void AllTestsTest$OneTest.testSomething()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SuperShadowing
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$SuperShadowing.<init>() 
            void AnnotationTest$SuperShadowing.after() 
            TestRule AnnotationTest$SuperShadowing.rule() 
            void AnnotationTest$SuperShadowing.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 462, column 33]}]}
dummy: false
class org.junit.validator.AnnotationsValidator
fields: {}
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class java.lang.Object 
           class org.junit.validator.TestClassValidator
         }
objc_protocols: {}
methods: {
            void AnnotationsValidator.<clinit>() 
            List AnnotationsValidator.validateTestClass(TestClass) 
            AnnotationsValidator.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 19]}]}
dummy: false
class org.junit.internal.management.ManagementFactory$ThreadHolder
fields: {}
statics: {
            org.junit.internal.management.ThreadMXBean* THREAD_MX_BEAN <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ManagementFactory$ThreadHolder.<clinit>() 
            ManagementFactory$ThreadHolder.<init>() 
            ThreadMXBean ManagementFactory$ThreadHolder.getBean(Object) 
            ThreadMXBean ManagementFactory$ThreadHolder.access$100()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 54, column 29]}]}
dummy: false
class org.junit.tests.running.classes.AllClassesTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllClassesTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest, org.junit.tests.running.classes.ClassLevelMethodsWithIgnoredTestsTest, org.junit.tests.running.classes.EnclosedTest, org.junit.tests.running.classes.IgnoreClassTest, org.junit.tests.running.classes.ParameterizedTestTest, org.junit.tests.running.classes.ParentRunnerFilteringTest, org.junit.tests.running.classes.ParentRunnerTest, org.junit.tests.running.classes.parent.ParentRunnerClassLoaderTest, org.junit.tests.running.classes.RunWithTest, org.junit.tests.running.classes.SuiteTest, org.junit.tests.running.classes.UseSuiteAsASuperclassTest, org.junit.tests.running.classes.ThreadsTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.ClassRequestTest$PrivateSuiteMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ClassRequestTest$PrivateSuiteMethod.<init>() 
            Test ClassRequestTest$PrivateSuiteMethod.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 24]}]}
dummy: false
class org.junit.internal.runners.statements.ExpectException
fields: {
           java.lang.Class* expected <_final> 
           org.junit.runners.model.Statement* next <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            ExpectException.<init>(Statement,Class) 
            void ExpectException.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.framework.TestFailure
fields: {
           java.lang.Throwable* fThrownException <> 
           junit.framework.Test* fFailedTest <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String TestFailure.trace() 
            String TestFailure.exceptionMessage() 
            String TestFailure.toString() 
            Throwable TestFailure.thrownException() 
            TestFailure.<init>(Test,Throwable) 
            boolean TestFailure.isFailure() 
            Test TestFailure.failedTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.runner.BaseTestRunnerTest$NonStatic
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BaseTestRunnerTest$NonStatic.<init>() 
            Test BaseTestRunnerTest$NonStatic.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 30, column 24]}]}
dummy: false

class org.junit.tests.running.methods.TimeoutTest$FailureWithTimeoutRunTimeExceptionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutTest$FailureWithTimeoutRunTimeExceptionTest.<init>() 
            void TimeoutTest$FailureWithTimeoutRunTimeExceptionTest.failure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 45, column 24]}]}
dummy: false
class org.junit.rules.ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions.<init>() 
            void ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 205, column 24]}]}
dummy: false
class org.junit.runner.FilterFactoriesTest$DummyCategory
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FilterFactoriesTest$DummyCategory.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 124, column 24]}]}
dummy: false
class java.io.InputStream
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$PositiveIntsWithMethodParams
fields: {
           int x <>
         }
statics: {
            int ONE <_final _org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuccessfulWithDataPointFields$PositiveIntsWithMethodParams.<init>(int) 
            void SuccessfulWithDataPointFields$PositiveIntsWithMethodParams.haveAPostiveSquare(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 109, column 24]}]}
dummy: false

class org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeATestRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
         }
objc_protocols: {}
methods: {
            RuleMemberValidator$MethodMustBeATestRule.<init>() 
            RuleMemberValidator$MethodMustBeATestRule.<init>(RuleMemberValidator$1) 
            void RuleMemberValidator$MethodMustBeATestRule.validate(FrameworkMember,Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 256, column 31]}]}
dummy: false
class org.junit.rules.MethodRulesTest$CustomTestName
fields: {
           java.lang.String* name <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement MethodRulesTest$CustomTestName.apply(Statement,Description) 
            MethodRulesTest$CustomTestName.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 278, column 24]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MultiCategoryTest.inheritanceAllIncluded() 
            void MultiCategoryTest.runSuite() 
            MultiCategoryTest.<init>() 
            void MultiCategoryTest.inheritanceAllAny() 
            void MultiCategoryTest.inheritanceAnyAll() 
            void MultiCategoryTest.inheritanceAnyIncluded()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 19]}]}
dummy: false
class org.junit.rules.TestWatchman$1
fields: {
           org.junit.runners.model.FrameworkMethod* val$method <_final> 
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.TestWatchman* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            TestWatchman$1.<init>(TestWatchman,FrameworkMethod,Statement) 
            void TestWatchman$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 48, column 31]}]}
dummy: false
class java.util.ArrayList
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.hamcrest.core.ShortcutCombination
fields: {
           java.lang.Iterable* matchers <_final>
         }
statics: {}
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            boolean ShortcutCombination.matches(Object) 
            ShortcutCombination.<init>(Iterable) 
            void ShortcutCombination.describeTo(Description,String) 
            boolean ShortcutCombination.matches(Object,boolean) 
            void ShortcutCombination.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.runner.notification.SynchronizedRunListenerTest$NamedListener
fields: {
           java.lang.String* fName <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            String SynchronizedRunListenerTest$NamedListener.toString() 
            SynchronizedRunListenerTest$NamedListener.<init>(String) 
            boolean SynchronizedRunListenerTest$NamedListener.equals(Object) 
            int SynchronizedRunListenerTest$NamedListener.hashCode()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 74, column 25]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithParameterSupplier$TestClassUsingSupplierWithTwoConstructors
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            WithParameterSupplier$TestClassUsingSupplierWithTwoConstructors.<init>() 
            void WithParameterSupplier$TestClassUsingSupplierWithTwoConstructors.theory(String)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 125, column 24]}]}
dummy: false
class java.lang.IllegalArgumentException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.RuleMemberValidatorTest$TestWithNonStaticClassRule
fields: {
           org.junit.rules.TestRule* temporaryFolder <_org.junit.ClassRule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestWithNonStaticClassRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 24]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$ThrowingMethodRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            SampleJUnit4Tests$ThrowingMethodRule.<init>() 
            Statement SampleJUnit4Tests$ThrowingMethodRule.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 76, column 24]}]}
dummy: false
class org.junit.validator.AnnotationsValidator$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$NonStaticOneTimeSetup
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationTest$NonStaticOneTimeSetup.aTest() 
            AnnotationTest$NonStaticOneTimeSetup.<init>() 
            void AnnotationTest$NonStaticOneTimeSetup.once()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 348, column 24]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$TestWithThrowingTestRule
fields: {
           org.junit.rules.TestRule* rule <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SampleJUnit4Tests$TestWithThrowingTestRule.alwaysPasses() 
            SampleJUnit4Tests$TestWithThrowingTestRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 56, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod.<clinit>() 
            String OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod.access$284(Object) 
            void OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod.orderingBackwardWorksOnTestClassRunner() 
            void OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod.resetLog() 
            OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod.<init>() 
            void OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod.orderingForwardWorksOnTestClassRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 181, column 24]}]}
dummy: false
class junit.tests.framework.TestCaseTest$6
fields: {
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestCaseTest$6.<init>(TestCaseTest,String) 
            void TestCaseTest$6.runTest() 
            void TestCaseTest$6.tearDown()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 103, column 49]}]}
dummy: false
class java.util.concurrent.ConcurrentHashMap
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.running.methods.AnnotationTest$SubStaticFieldShadowing$1
fields: {}
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            AnnotationTest$SubStaticFieldShadowing$1.<init>() 
            void AnnotationTest$SubStaticFieldShadowing$1.after() 
            void AnnotationTest$SubStaticFieldShadowing$1.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 665, column 61]}]}
dummy: false
class junit.tests.WasRun
fields: {
           _Bool fWasRun <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            WasRun.<init>() 
            void WasRun.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.builders.IgnoredBuilder
fields: {
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.RunnerBuilder
         }
objc_protocols: {}
methods: {
            IgnoredBuilder.<init>() 
            Runner IgnoredBuilder.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.framework.TestCaseTest$TornDown
fields: {
           _Bool fTornDown <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestCaseTest$TornDown.<init>() 
            void TestCaseTest$TornDown.runTest() 
            void TestCaseTest$TornDown.tearDown()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 17]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$InfiniteLoop
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$InfiniteLoop.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.SuiteTest$InfiniteLoop")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 156, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SimpleTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$SimpleTest.<init>() 
            void AnnotationTest$SimpleTest.success()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 24]}]}
dummy: false
class org.junit.runner.manipulation.Orderable
fields: {}
statics: {}
supers: {
           class org.junit.runner.manipulation.Sortable
         }
objc_protocols: {}
methods: {
            void Orderable.order(Orderer)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.internal.runners.JUnit38ClassRunner
fields: {
           junit.framework.Test* test <_volatile>
         }
statics: {}
supers: {
           class org.junit.runner.Runner 
           class org.junit.runner.manipulation.Filterable 
           class org.junit.runner.manipulation.Orderable
         }
objc_protocols: {}
methods: {
            Annotation[] JUnit38ClassRunner.getAnnotations(TestCase) 
            void JUnit38ClassRunner.run(RunNotifier) 
            String JUnit38ClassRunner.createSuiteDescription(TestSuite) 
            void JUnit38ClassRunner.setTest(Test) 
            void JUnit38ClassRunner.filter(Filter) 
            JUnit38ClassRunner.<init>(Test) 
            JUnit38ClassRunner.<init>(Class) 
            Test JUnit38ClassRunner.getTest() 
            TestListener JUnit38ClassRunner.createAdaptingListener(RunNotifier) 
            void JUnit38ClassRunner.order(Orderer) 
            void JUnit38ClassRunner.sort(Sorter) 
            Description JUnit38ClassRunner.getDescription() 
            Description JUnit38ClassRunner.makeDescription(Test)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.internal.builders.AnnotatedBuilderTest$OuterClass$InnerClassWithOwnRunWith
fields: {
           org.junit.internal.builders.AnnotatedBuilderTest$OuterClass* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotatedBuilderTest$OuterClass$InnerClassWithOwnRunWith.<init>(AnnotatedBuilderTest$OuterClass) 
            void AnnotatedBuilderTest$OuterClass$InnerClassWithOwnRunWith.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.internal.builders.AnnotatedBuilderTest$InnerRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 83, column 21]}]}
dummy: false
class java.lang.ThreadDeath
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runners.model.FrameworkField
fields: {
           java.lang.reflect.Field* field <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.FrameworkMember
         }
objc_protocols: {}
methods: {
            Class FrameworkField.getDeclaringClass() 
            Field FrameworkField.getField() 
            int FrameworkField.getModifiers() 
            Object FrameworkField.get(Object) 
            boolean FrameworkField.isShadowedBy(FrameworkMember) 
            Annotation FrameworkField.getAnnotation(Class) 
            String FrameworkField.getName() 
            String FrameworkField.toString() 
            boolean FrameworkField.isShadowedBy(FrameworkField) 
            boolean FrameworkField.isBridgeMethod() 
            FrameworkField.<init>(Field) 
            Class FrameworkField.getType() 
            Annotation[] FrameworkField.getAnnotations()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.notification.AllNotificationTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllNotificationTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.runner.notification.ConcurrentRunNotifierTest, org.junit.runner.notification.RunNotifierTest, org.junit.runner.notification.SynchronizedRunListenerTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.FailingDataPointMethods$HasIgnoredFailingSingleDataPointMethod
fields: {}
statics: {
            int num <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FailingDataPointMethods$HasIgnoredFailingSingleDataPointMethod.<clinit>() 
            void FailingDataPointMethods$HasIgnoredFailingSingleDataPointMethod.theory(int) 
            FailingDataPointMethods$HasIgnoredFailingSingleDataPointMethod.<init>() 
            int FailingDataPointMethods$HasIgnoredFailingSingleDataPointMethod.failingDataPoint()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 57, column 24]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerTest$TestTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParentRunnerTest$TestTest.pass() 
            ParentRunnerTest$TestTest.<init>() 
            void ParentRunnerTest$TestTest.assumptionFail() 
            void ParentRunnerTest$TestTest.ignore() 
            void ParentRunnerTest$TestTest.fail()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 211, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithDataPointMethod$HasDateMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithDataPointMethod$HasDateMethod.allIntsOk(int) 
            void WithDataPointMethod$HasDateMethod.onlyStringsOk(String) 
            WithDataPointMethod$HasDateMethod.<init>() 
            int WithDataPointMethod$HasDateMethod.oneHundred() 
            Date WithDataPointMethod$HasDateMethod.notADataPoint() 
            void WithDataPointMethod$HasDateMethod.onlyDatesOk(Date)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 70, column 24]}]}
dummy: false
class java.util.List
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.ErrorCollectorTest$AddSingleError
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$AddSingleError.<init>() 
            void ErrorCollectorTest$AddSingleError.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 109, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$CustomTestName$1
fields: {
           org.junit.rules.TestRuleTest$CustomTestName* this$0 <_final> 
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.runner.Description* val$description <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            TestRuleTest$CustomTestName$1.<init>(TestRuleTest$CustomTestName,Description,Statement) 
            void TestRuleTest$CustomTestName$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 221, column 35]}]}
dummy: false
class org.junit.runners.ParentRunner$1
fields: {
           org.junit.runners.ParentRunner* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.model.RunnerScheduler
         }
objc_protocols: {}
methods: {
            void ParentRunner$1.finished() 
            void ParentRunner$1.schedule(Runnable) 
            ParentRunner$1.<init>(ParentRunner)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 77, column 71]}]}
dummy: false
class org.junit.runner.OrderWithValidator
fields: {}
statics: {
            java.util.List* NO_VALIDATION_ERRORS <_final>
          }
supers: {
           class org.junit.validator.AnnotationValidator
         }
objc_protocols: {}
methods: {
            List OrderWithValidator.validateAnnotatedClass(TestClass) 
            OrderWithValidator.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 19]}]}
dummy: false
class org.junit.runner.manipulation.Alphanumeric$1
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int Alphanumeric$1.compare(Object,Object) 
            Alphanumeric$1.<init>() 
            int Alphanumeric$1.compare(Description,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 92]}]}
dummy: false
class org.junit.rules.MethodRulesTest$NonPublicExampleTest
fields: {
           org.junit.rules.MethodRule* example <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$NonPublicExampleTest.nothing() 
            MethodRulesTest$NonPublicExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 47, column 26]}]}
dummy: false

class org.junit.tests.manipulation.OrderableTest$TestOrderableClassRunnerIsSortable$OrderableRunner
fields: {
           org.junit.runners.BlockJUnit4ClassRunner* delegate <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Runner 
           class org.junit.runner.manipulation.Orderable
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestOrderableClassRunnerIsSortable$OrderableRunner.run(RunNotifier) 
            void OrderableTest$TestOrderableClassRunnerIsSortable$OrderableRunner.order(Orderer) 
            Description OrderableTest$TestOrderableClassRunnerIsSortable$OrderableRunner.getDescription() 
            OrderableTest$TestOrderableClassRunnerIsSortable$OrderableRunner.<init>(Class) 
            void OrderableTest$TestOrderableClassRunnerIsSortable$OrderableRunner.sort(Sorter)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 157, column 28]}]}
dummy: false
class org.junit.rules.MethodRulesTest$SonOfExampleTest
fields: {
           org.junit.rules.MethodRule* example <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.rules.MethodRulesTest$ExampleTest
         }
objc_protocols: {}
methods: {
            MethodRulesTest$SonOfExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 63, column 24]}]}
dummy: false
class org.junit.runner.notification.RunNotifierTest$FailureListener
fields: {
           org.junit.runner.notification.Failure* failure <>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            Failure RunNotifierTest$FailureListener.access$200(RunNotifierTest$FailureListener) 
            RunNotifierTest$FailureListener.<init>() 
            RunNotifierTest$FailureListener.<init>(RunNotifierTest$1) 
            void RunNotifierTest$FailureListener.testFailure(Failure)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 109, column 25]}]}
dummy: false
class org.junit.internal.Throwables$State$1
fields: {}
statics: {
            org.junit.internal.Throwables$State* PROCESSING_OTHER_CODE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_TEST_FRAMEWORK_CODE <_final> 
            org.junit.internal.Throwables$State*[_*_](*) $VALUES <_final> 
            org.junit.internal.Throwables$State* DONE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_REFLECTION_CODE <_final>
          }
supers: {
           class org.junit.internal.Throwables$State
         }
objc_protocols: {}
methods: {
            Throwables$State$1.<init>(String,int) 
            Throwables$State Throwables$State$1.processLine(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithExtendedParameterSources$DataPointArrays
fields: {}
statics: {
            java.lang.String*[_*_](*) STRINGS <_org.junit.experimental.theories.DataPoints> 
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithExtendedParameterSources$DataPointArrays.<clinit>() 
            void WithExtendedParameterSources$DataPointArrays.addToLog(String) 
            WithExtendedParameterSources$DataPointArrays.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 88, column 24]}]}
dummy: false
class org.junit.rules.EventCollector$1
fields: {
           int val$numberOfFailures <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            boolean EventCollector$1.matchesSafely(Object) 
            void EventCollector$1.describeMismatchSafely(EventCollector,Description) 
            EventCollector$1.<init>(int) 
            void EventCollector$1.describeTo(Description) 
            void EventCollector$1.describeMismatchSafely(Object,Description) 
            boolean EventCollector$1.matchesSafely(EventCollector)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 53]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SampleJUnit4Tests.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false

class org.junit.rules.MethodRulesTest$CallsMethodReturningRuleOnlyOnce$Dummy$1
fields: {
           org.junit.rules.MethodRulesTest$CallsMethodReturningRuleOnlyOnce$Dummy* this$0 <_final> 
           org.junit.runners.model.Statement* val$base <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$CallsMethodReturningRuleOnlyOnce$Dummy$1.evaluate() 
            MethodRulesTest$CallsMethodReturningRuleOnlyOnce$Dummy$1.<init>(MethodRulesTest$CallsMethodReturningRuleOnlyOnce$Dummy,Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 385, column 39]}]}
dummy: false
class org.junit.experimental.theories.DataPoint
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            String[] DataPoint.value() 
            Class[] DataPoint.ignoredExceptions()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD")>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.tests.running.methods.AllMethodsTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllMethodsTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.methods.AnnotationTest, org.junit.tests.running.methods.ExpectedTest, org.junit.tests.running.methods.InheritedTestTest, org.junit.tests.running.methods.ParameterizedTestMethodTest, org.junit.tests.running.methods.TestMethodTest, org.junit.tests.running.methods.TimeoutTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false
class org.junit.internal.MethodSorter
fields: {}
statics: {
            java.util.Comparator* NAME_ASCENDING <_final> 
            java.util.Comparator* DEFAULT <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodSorter.<clinit>() 
            MethodSorter.<init>() 
            Method[] MethodSorter.getDeclaredMethods(Class) 
            Comparator MethodSorter.getSorter(FixMethodOrder)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$BeforeParamAndAfterParamErrorNumberOfParameters
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$BeforeParamAndAfterParamErrorNumberOfParameters.beforeParam(String,String) 
            ParameterizedTestTest$BeforeParamAndAfterParamErrorNumberOfParameters.<init>(String) 
            void ParameterizedTestTest$BeforeParamAndAfterParamErrorNumberOfParameters.afterParam(String,String,String) 
            void ParameterizedTestTest$BeforeParamAndAfterParamErrorNumberOfParameters.test() 
            Collection ParameterizedTestTest$BeforeParamAndAfterParamErrorNumberOfParameters.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 455, column 24]}]}
dummy: false
class org.junit.runner.FilterFactoriesTest$DummySuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FilterFactoriesTest$DummySuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.runner.FilterFactoriesTest$DummyTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 129, column 24]}]}
dummy: false
class org.junit.internal.runners.model.EachTestNotifier
fields: {
           org.junit.runner.Description* description <_final> 
           org.junit.runner.notification.RunNotifier* notifier <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void EachTestNotifier.fireTestSuiteStarted() 
            void EachTestNotifier.fireTestStarted() 
            void EachTestNotifier.fireTestSuiteFinished() 
            void EachTestNotifier.addFailedAssumption(AssumptionViolatedException) 
            void EachTestNotifier.addMultipleFailureException(MultipleFailureException) 
            void EachTestNotifier.fireTestIgnored() 
            void EachTestNotifier.fireTestFinished() 
            void EachTestNotifier.addFailure(Throwable) 
            EachTestNotifier.<init>(RunNotifier,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.tests.experimental.AssumptionTest
fields: {}
statics: {
            java.lang.String* message <_final> 
            int assumptionFailures <> 
            java.lang.Throwable* e <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AssumptionTest.<clinit>() 
            void AssumptionTest.assumeNotNullIncludesParameterList() 
            void AssumptionTest.assertCompletesNormally() 
            void AssumptionTest.assumptionsWithMessage() 
            void AssumptionTest.failedAssumptionsMeanPassing() 
            void AssumptionTest.failingAssumptionInBeforePreventsTestRun() 
            List AssumptionTest.runAndGetAssumptionFailures(Class) 
            void AssumptionTest.assumeThatPassesOnStrings() 
            int AssumptionTest.access$008() 
            void AssumptionTest.assumeTrueWorks() 
            void AssumptionTest.failedAssumptionsWithMessage() 
            void AssumptionTest.assumeThatWorks() 
            AssumptionTest.<init>() 
            void AssumptionTest.failingAssumptionInConstructorIgnoresClass() 
            void AssumptionTest.assumeNotNullThrowsExceptionForNullArray() 
            void AssumptionTest.failedAssumptionsCanBeDetectedByListeners() 
            void AssumptionTest.assumeNoExceptionThrows() 
            void AssumptionTest.assumptionsWithMessageAndCause() 
            void AssumptionTest.passingAssumptionsScootThrough() 
            void AssumptionTest.failingAssumptionInBeforeClassIgnoresClass() 
            void AssumptionTest.assumeNotNullThrowsException() 
            void AssumptionTest.assumeFalseWorks() 
            void AssumptionTest.assumeThatPasses() 
            void AssumptionTest.assumeWithExpectedExceptionShouldThrowAssumptionViolatedException() 
            void AssumptionTest.assumeNotNullPasses()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 30, column 13]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodUsesCustomMethodRule
fields: {
           org.junit.rules.TestRuleTest$CustomTestName* counter <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$MethodUsesCustomMethodRule.foo() 
            TestRuleTest$MethodUsesCustomMethodRule.<init>() 
            TestRuleTest$CustomTestName TestRuleTest$MethodUsesCustomMethodRule.getCounter()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 452, column 24]}]}
dummy: false
class org.junit.rules.TestWatchmanTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestWatchmanTest.neitherLogSuccessNorFailedForViolatedAssumption() 
            TestWatchmanTest.<init>() 
            void TestWatchmanTest.logFailingTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$EmptyCategoriesSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$EmptyCategoriesSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="java.lang.Runnable") _org.junit.experimental.categories.Categories$ExcludeCategory(value="java.lang.Runnable") _org.junit.runners.Suite$SuiteClasses(value="")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 438, column 24]}]}
dummy: false
class junit.tests.framework.TestListenerTest$3
fields: {
           junit.tests.framework.TestListenerTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestListenerTest$3.<init>(TestListenerTest,String) 
            void TestListenerTest$3.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 71, column 45]}]}
dummy: false
class org.junit.tests.running.classes.UseSuiteAsASuperclassTest$TestA
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UseSuiteAsASuperclassTest$TestA.pass() 
            UseSuiteAsASuperclassTest$TestA.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$OrderedAlphanumerically
fields: {}
statics: {}
supers: {
           class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$Unordered
         }
objc_protocols: {}
methods: {
            OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$OrderedAlphanumerically.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.OrderWith(value="org.junit.tests.manipulation.AlphanumericOrdering")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 28]}]}
dummy: false

class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesRunner
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesRunner.<init>(Class) 
            List BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesRunner.getTestRules(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 64, column 24]}]}
dummy: false
class org.junit.runners.model.TestClassTest$PublicClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$PublicClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 226, column 24]}]}
dummy: false
class java.lang.ThreadLocal
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.experimental.theories.PotentialAssignmentTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void PotentialAssignmentTest.shouldReturnGivenValue() 
            void PotentialAssignmentTest.shouldUseQuotedValueInDescription() 
            void PotentialAssignmentTest.shouldIncludeFailureInDescriptionIfToStringFails() 
            PotentialAssignmentTest.<init>() 
            void PotentialAssignmentTest.shouldNotUseQuotesForNullValueDescriptions()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false

class org.junit.experimental.categories.CategoryTest$NoIncludeCategoryAnnotationTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoryTest$NoIncludeCategoryAnnotationTest.test1() 
            CategoryTest$NoIncludeCategoryAnnotationTest.<init>() 
            void CategoryTest$NoIncludeCategoryAnnotationTest.test2()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="java.lang.CharSequence")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 543, column 24]}]}
dummy: false
class org.junit.tests.running.core.CommandLineTest$Example
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CommandLineTest$Example.<init>() 
            void CommandLineTest$Example.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$FailureTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationTest$FailureTest.error() 
            AnnotationTest$FailureTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 98, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestWatcherTest$CallbackArguments.skipped() 
            void TestWatcherTest$CallbackArguments.succeeded() 
            TestWatcherTest$CallbackArguments.<init>() 
            void TestWatcherTest$CallbackArguments.starting() 
            void TestWatcherTest$CallbackArguments.deprecatedSkipped() 
            void TestWatcherTest$CallbackArguments.failed() 
            void TestWatcherTest$CallbackArguments.finished()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 189, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$DeprecatedSkipped$1
fields: {
           org.junit.rules.TestWatcherTest$CallbackArguments$DeprecatedSkipped* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            void TestWatcherTest$CallbackArguments$DeprecatedSkipped$1.skipped(AssumptionViolatedException,Description) 
            TestWatcherTest$CallbackArguments$DeprecatedSkipped$1.<init>(TestWatcherTest$CallbackArguments$DeprecatedSkipped)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 275, column 62]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Failed$1
fields: {
           org.junit.rules.TestWatcherTest$CallbackArguments$Failed* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            TestWatcherTest$CallbackArguments$Failed$1.<init>(TestWatcherTest$CallbackArguments$Failed) 
            void TestWatcherTest$CallbackArguments$Failed$1.failed(Throwable,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 219, column 62]}]}
dummy: false
class java.util.Map
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.tests.runner.TextFeedbackTest$6
fields: {
           junit.tests.runner.TextFeedbackTest* this$0 <_final> 
           java.io.PrintStream* fWriter <> 
           int fColumn <>
         }
statics: {}
supers: {
           class junit.tests.runner.TextFeedbackTest$TestResultPrinter
         }
objc_protocols: {}
methods: {
            TextFeedbackTest$6.<init>(TextFeedbackTest,PrintStream) 
            void TextFeedbackTest$6.printErrors(TestResult)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.notification.ConcurrentRunNotifierTest$1
fields: {
           org.junit.runner.notification.ConcurrentRunNotifierTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.lang.Runnable
         }
objc_protocols: {}
methods: {
            ConcurrentRunNotifierTest$1.<init>(ConcurrentRunNotifierTest) 
            void ConcurrentRunNotifierTest$1.run()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 39]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SubInheritance
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.AnnotationTest$SuperInheritance
         }
objc_protocols: {}
methods: {
            void AnnotationTest$SubInheritance.afterSub() 
            void AnnotationTest$SubInheritance.afterClassSub() 
            void AnnotationTest$SubInheritance.beforeSuper() 
            AnnotationTest$SubInheritance.<init>() 
            void AnnotationTest$SubInheritance.beforeClassSub() 
            void AnnotationTest$SubInheritance.afterSuper() 
            void AnnotationTest$SubInheritance.beforeSub() 
            void AnnotationTest$SubInheritance.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 428, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.TestedOnSupplierTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestedOnSupplierTest.descriptionStatesParameterName() 
            TestedOnSupplierTest.<init>() 
            void TestedOnSupplierTest.foo(int) 
            ParameterSignature TestedOnSupplierTest.signatureOfFoo()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false
class org.junit.runner.FilterFactory$FilterNotCreatedException
fields: {}
statics: {}
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            FilterFactory$FilterNotCreatedException.<init>(Exception)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.validator.AnnotationsValidator$ClassValidator
fields: {}
statics: {
            org.junit.validator.AnnotationValidatorFactory* ANNOTATION_VALIDATOR_FACTORY <_final>
          }
supers: {
           class org.junit.validator.AnnotationsValidator$AnnotatableValidator
         }
objc_protocols: {}
methods: {
            AnnotationsValidator$ClassValidator.<init>() 
            List AnnotationsValidator$ClassValidator.validateAnnotatable(AnnotationValidator,Annotatable) 
            List AnnotationsValidator$ClassValidator.validateAnnotatable(AnnotationValidator,TestClass) 
            Iterable AnnotationsValidator$ClassValidator.getAnnotatablesForTestClass(TestClass) 
            AnnotationsValidator$ClassValidator.<init>(AnnotationsValidator$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 79, column 25]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UnsuccessfulWithDataPointFields.nullsUsedUnlessProhibited() 
            void UnsuccessfulWithDataPointFields.dataPointFieldsMustBePublic() 
            void UnsuccessfulWithDataPointFields.theoryClassMethodsShowUp() 
            void UnsuccessfulWithDataPointFields.dataPointFieldsMustBeStatic() 
            UnsuccessfulWithDataPointFields.<init>() 
            void UnsuccessfulWithDataPointFields.canRunTheories() 
            void UnsuccessfulWithDataPointFields.theoriesMustBePublic() 
            void UnsuccessfulWithDataPointFields.dataPointMethodsMustBePublic() 
            void UnsuccessfulWithDataPointFields.theoryAnnotationsAreRetained() 
            void UnsuccessfulWithDataPointFields.dataPointMethodsMustBeStatic() 
            void UnsuccessfulWithDataPointFields.reportBadParams()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class org.junit.rules.RuleChainTest$RuleChainWithNullRules
fields: {
           org.junit.rules.RuleChain* chain <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleChainTest$RuleChainWithNullRules.<init>() 
            void RuleChainTest$RuleChainWithNullRules.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 77, column 24]}]}
dummy: false
class junit.samples.money.MoneyTest
fields: {
           junit.samples.money.Money* f7USD <> 
           junit.samples.money.IMoney* fMB1 <> 
           junit.samples.money.Money* f12CHF <> 
           junit.samples.money.Money* f21USD <> 
           junit.samples.money.IMoney* fMB2 <> 
           junit.samples.money.Money* f14CHF <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void MoneyTest.testBagNotEquals() 
            void MoneyTest.testNormalize4() 
            void MoneyTest.testMoneyHash() 
            void MoneyTest.testSimpleMultiply() 
            void MoneyTest.testBagSubtract() 
            void MoneyTest.testMoneyBagHash() 
            void MoneyTest.testSimpleAdd() 
            void MoneyTest.testBagNegate() 
            MoneyTest.<init>() 
            void MoneyTest.testNormalize2() 
            void MoneyTest.testSimpleSubtract() 
            void MoneyTest.testIsZero() 
            void MoneyTest.main(String[]) 
            void MoneyTest.testMoneyBagEquals() 
            void MoneyTest.testPrint() 
            void MoneyTest.testBagMultiply() 
            void MoneyTest.testSimplify() 
            void MoneyTest.setUp() 
            void MoneyTest.testSimpleNegate() 
            void MoneyTest.testBagSumAdd() 
            void MoneyTest.testMoneyEquals() 
            void MoneyTest.testSimpleBagAdd() 
            void MoneyTest.testBagSimpleAdd() 
            void MoneyTest.testNormalize3() 
            void MoneyTest.testMixedSimpleAdd()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 5, column 13]}]}
dummy: false

class org.junit.tests.manipulation.OrderableTest$TestClassRunnerIsOrderable$Enclosing$A
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestClassRunnerIsOrderable$Enclosing$A.c() 
            OrderableTest$TestClassRunnerIsOrderable$Enclosing$A.<init>() 
            void OrderableTest$TestClassRunnerIsOrderable$Enclosing$A.b() 
            void OrderableTest$TestClassRunnerIsOrderable$Enclosing$A.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 97, column 32]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$TestClassRunnerIsSortableWithSuiteMethod$SortMe
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SortableTest$TestClassRunnerIsSortableWithSuiteMethod$SortMe.c() 
            SortableTest$TestClassRunnerIsSortableWithSuiteMethod$SortMe.<init>() 
            void SortableTest$TestClassRunnerIsSortableWithSuiteMethod$SortMe.b() 
            Test SortableTest$TestClassRunnerIsSortableWithSuiteMethod$SortMe.suite() 
            void SortableTest$TestClassRunnerIsSortableWithSuiteMethod$SortMe.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 159, column 28]}]}
dummy: false
class org.junit.rules.TestWatchmanTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$Category1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$Category1.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 115, column 24]}]}
dummy: false
class org.junit.rules.ExternalResourceRuleTest$UsesExternalResource
fields: {
           org.junit.rules.ExternalResource* resource <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExternalResourceRuleTest$UsesExternalResource.<init>() 
            void ExternalResourceRuleTest$UsesExternalResource.testFoo()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 35, column 24]}]}
dummy: false
class org.junit.tests.listening.ListenerTest
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ListenerTest.<init>() 
            void ListenerTest.notifyListenersInTheOrderInWhichTheyAreAdded() 
            String ListenerTest.access$084(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false

class org.junit.tests.experimental.max.MaxStarterTest$MalformedJUnit38TestMethod
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            MaxStarterTest$MalformedJUnit38TestMethod.<init>() 
            void MaxStarterTest$MalformedJUnit38TestMethod.testNothing()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 245, column 24]}]}
dummy: false
class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$ErrorTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ForwardCompatibilityTest$ErrorTest.error() 
            ForwardCompatibilityTest$ErrorTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 61, column 24]}]}
dummy: false
class org.junit.tests.running.core.JUnitCoreReturnsCorrectExitCodeTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JUnitCoreReturnsCorrectExitCodeTest.successCausesExitCodeOf0() 
            void JUnitCoreReturnsCorrectExitCodeTest.failureCausesExitCodeOf1() 
            JUnitCoreReturnsCorrectExitCodeTest.<init>() 
            void JUnitCoreReturnsCorrectExitCodeTest.runClass(String,int) 
            void JUnitCoreReturnsCorrectExitCodeTest.missingClassCausesExitCodeOf1()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.rules.EventCollector
fields: {
           java.util.List* fAssumptionFailures <_final> 
           java.util.List* fTestsStarted <_final> 
           java.util.List* fTestRunsStarted <_final> 
           java.util.List* fTestsIgnored <_final> 
           java.util.List* fFailures <_final> 
           java.util.List* fTestsFinished <_final> 
           java.util.List* fTestRunsFinished <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            Matcher EventCollector.hasNumberOfFailures(int) 
            void EventCollector.testAssumptionFailure(Failure) 
            String EventCollector.toString() 
            List EventCollector.access$100(EventCollector) 
            void EventCollector.testRunFinished(Result) 
            Matcher EventCollector.failureIs(Matcher) 
            EventCollector.<init>() 
            Matcher EventCollector.hasSingleFailureWithMessage(String) 
            void EventCollector.testFinished(Description) 
            Matcher EventCollector.hasNoFailure() 
            Matcher EventCollector.hasNumberOfAssumptionFailures(int) 
            void EventCollector.testIgnored(Description) 
            Matcher EventCollector.hasSingleFailure() 
            Matcher EventCollector.everyTestRunSuccessful() 
            void EventCollector.testStarted(Description) 
            Matcher EventCollector.hasSingleFailureWithMessage(Matcher) 
            List EventCollector.access$000(EventCollector) 
            void EventCollector.testRunStarted(Description) 
            Matcher EventCollector.hasSingleAssumptionFailure() 
            void EventCollector.testFailure(Failure) 
            Matcher EventCollector.hasNoAssumptionFailure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.listening.TestListenerTest$ErrorListener
fields: {
           org.junit.tests.listening.TestListenerTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            TestListenerTest$ErrorListener.<init>(TestListenerTest) 
            void TestListenerTest$ErrorListener.testRunStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 10]}]}
dummy: false
class org.junit.internal.runners.TestMethod
fields: {
           java.lang.reflect.Method* method <_final> 
           org.junit.internal.runners.TestClass* testClass <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            boolean TestMethod.isIgnored() 
            List TestMethod.getAfters() 
            boolean TestMethod.expectsException() 
            Class TestMethod.getExpectedException() 
            List TestMethod.getBefores() 
            void TestMethod.invoke(Object) 
            boolean TestMethod.isUnexpected(Throwable) 
            TestMethod.<init>(Method,TestClass) 
            long TestMethod.getTimeout()
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.JavadocTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JavadocTest.<init>() 
            void JavadocTest.slowTests() 
            void JavadocTest.fastSmokeTests()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class junit.tests.framework.ComparisonFailureTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void ComparisonFailureTest.testExceptionToStringWithMessage() 
            void ComparisonFailureTest.testConnection() 
            ComparisonFailureTest.<init>() 
            void ComparisonFailureTest.testExceptionToStringWithoutMessage() 
            void ComparisonFailureTest.testThrowing()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 13]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$ImpatientLoopTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TimeoutTest$ImpatientLoopTest.infiniteLoop() 
            TimeoutTest$ImpatientLoopTest.<init>() 
            void TimeoutTest$ImpatientLoopTest.failure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 118, column 24]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$InheritsAll
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.classes.SuiteTest$All
         }
objc_protocols: {}
methods: {
            SuiteTest$InheritsAll.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 57, column 24]}]}
dummy: false
class org.junit.internal.requests.ClassRequest$CustomSuiteMethodBuilder
fields: {
           org.junit.internal.requests.ClassRequest* this$0 <_final> 
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.internal.builders.SuiteMethodBuilder
         }
objc_protocols: {}
methods: {
            ClassRequest$CustomSuiteMethodBuilder.<init>(ClassRequest) 
            ClassRequest$CustomSuiteMethodBuilder.<init>(ClassRequest,ClassRequest$1) 
            Runner ClassRequest$CustomSuiteMethodBuilder.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 44, column 18]}]}
dummy: false
class org.junit.internal.management.ManagementFactory$FactoryHolder
fields: {}
statics: {
            java.lang.Class* MANAGEMENT_FACTORY_CLASS <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ManagementFactory$FactoryHolder.<clinit>() 
            ManagementFactory$FactoryHolder.<init>() 
            Object ManagementFactory$FactoryHolder.getBeanObject(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 29]}]}
dummy: false
class junit.tests.extensions.ExtensionTest$5
fields: {
           junit.tests.extensions.ExtensionTest* this$0 <_final> 
           junit.framework.Test* fTest <>
         }
statics: {}
supers: {
           class junit.extensions.TestSetup
         }
objc_protocols: {}
methods: {
            void ExtensionTest$5.setUp() 
            ExtensionTest$5.<init>(ExtensionTest,Test)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 90, column 48]}]}
dummy: false
class org.junit.rules.RuleChain
fields: {
           java.util.List* rulesStartingWithInnerMost <>
         }
statics: {
            org.junit.rules.RuleChain* EMPTY_CHAIN <_final>
          }
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            void RuleChain.<clinit>() 
            RuleChain.<init>(List) 
            RuleChain RuleChain.around(TestRule) 
            Statement RuleChain.apply(Statement,Description) 
            RuleChain RuleChain.outerRule(TestRule) 
            RuleChain RuleChain.emptyRuleChain()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 58, column 13]}]}
dummy: false
class junit.tests.runner.ResultTest
fields: {
           org.junit.runner.Result* fromStream <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void ResultTest.testRunAssumptionFailedResultCanBeSerialised() 
            void ResultTest.testRunSuccessResultCanBeReserialised_v4_12() 
            void ResultTest.assertResultSerializable(Result) 
            void ResultTest.testRunAssumptionFailedResultCanBeReserialised_v4_13() 
            ResultTest.<init>() 
            void ResultTest.assertSerializedCorrectly(Result,Result,ResultTest$SerializationFormat) 
            void ResultTest.testRunFailureResultCanBeSerialised() 
            void ResultTest.testRunAssumptionFailedResultCanBeReserialised_v4_12() 
            void ResultTest.testRunSuccessResultCanBeReserialised_v4_13() 
            void ResultTest.assertResultReserializable(Result,ResultTest$SerializationFormat) 
            void ResultTest.testRunSuccessResultCanBeSerialised() 
            void ResultTest.testRunFailureResultCanBeReserialised_v4_12()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class junit.tests.runner.TextFeedbackTest
fields: {
           junit.textui.TestRunner* runner <> 
           java.io.OutputStream* output <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void TextFeedbackTest.testOneTest() 
            void TextFeedbackTest.testTwoTests() 
            TextFeedbackTest.<init>() 
            void TextFeedbackTest.main(String[]) 
            void TextFeedbackTest.testEmptySuite() 
            void TextFeedbackTest.setUp() 
            void TextFeedbackTest.testError() 
            String TextFeedbackTest.expected(String[]) 
            void TextFeedbackTest.testFailure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.experimental.categories.Categories$ExcludeCategory
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            Class[] Categories$ExcludeCategory.value() 
            boolean Categories$ExcludeCategory.matchAny()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 101, column 22]}]}
dummy: false
class java.lang.reflect.Type
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.experimental.theories.runner.TypeMatchingBetweenMultiDataPointsMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TypeMatchingBetweenMultiDataPointsMethod.pickUpMultiPointDataPointMethods() 
            TypeMatchingBetweenMultiDataPointsMethod.<init>() 
            void TypeMatchingBetweenMultiDataPointsMethod.ignoreWrongTypedDataPointsMethod()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.runner.Result$Listener
fields: {
           org.junit.runner.Result* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void Result$Listener.testRunFinished(Result) 
            void Result$Listener.testFailure(Failure) 
            void Result$Listener.testIgnored(Description) 
            void Result$Listener.testAssumptionFailure(Failure) 
            void Result$Listener.testFinished(Description) 
            Result$Listener.<init>(Result) 
            Result$Listener.<init>(Result,Result$1) 
            void Result$Listener.testRunStarted(Description)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.notification.RunListener$ThreadSafe>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 128, column 18]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Finished
fields: {
           org.junit.rules.TestRule* watcher <_final _org.junit.Rule>
         }
statics: {
            org.junit.runner.Description* catchedDescription <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWatcherTest$CallbackArguments$Finished.<init>() 
            Description TestWatcherTest$CallbackArguments$Finished.access$1102(Description) 
            Description TestWatcherTest$CallbackArguments$Finished.access$1100() 
            void TestWatcherTest$CallbackArguments$Finished.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 323, column 28]}]}
dummy: false
class org.junit.rules.MethodRulesTest$OnFailureTest
fields: {
           org.junit.rules.MethodRule* watchman <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$OnFailureTest.nothing() 
            MethodRulesTest$OnFailureTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 137, column 24]}]}
dummy: false
class org.junit.experimental.runners.Enclosed
fields: {
           java.util.List* runners <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.Suite
         }
objc_protocols: {}
methods: {
            Enclosed.<init>(Class,RunnerBuilder) 
            Class[] Enclosed.filterAbstractClasses(Class[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 13]}]}
dummy: false

class org.junit.internal.runners.rules.RuleMemberValidator$DeclaringClassMustBePublic
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
         }
objc_protocols: {}
methods: {
            RuleMemberValidator$DeclaringClassMustBePublic.<init>() 
            RuleMemberValidator$DeclaringClassMustBePublic.<init>(RuleMemberValidator$1) 
            void RuleMemberValidator$DeclaringClassMustBePublic.validate(FrameworkMember,Class,List) 
            boolean RuleMemberValidator$DeclaringClassMustBePublic.isDeclaringClassPublic(FrameworkMember)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 203, column 31]}]}
dummy: false
class junit.tests.extensions.ActiveTestTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void ActiveTestTest.testActiveRepeatedTest0() 
            ActiveTestTest.<init>() 
            ActiveTestSuite ActiveTestTest.createActiveTestSuite() 
            void ActiveTestTest.testActiveTest() 
            void ActiveTestTest.testActiveRepeatedTest1() 
            void ActiveTestTest.testActiveRepeatedTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false

class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesRunner$1
fields: {
           org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesRunner* this$0 <_final> 
           java.lang.Object* val$test <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesRunner$1.<init>(BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesRunner,Object) 
            Statement BlockJUnit4ClassRunnerOverrideTest$OverrideTestRulesRunner$1.apply(Statement,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 74, column 43]}]}
dummy: false
class junit.framework.Protectable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void Protectable.protect()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [Some line 8, column 17]}]}
dummy: false
class org.hamcrest.BaseDescription
fields: {}
statics: {
            org.hamcrest.Description* NONE <>
          }
supers: {
           class java.lang.Object 
           class org.hamcrest.Description
         }
objc_protocols: {}
methods: {
            Description BaseDescription.appendValue(Object) 
            Description BaseDescription.appendValueList(String,String,String,Iterator) 
            Description BaseDescription.appendValueList(String,String,String,Object[]) 
            void BaseDescription.toJavaSyntax(String) 
            void BaseDescription.append(String) 
            BaseDescription.<init>() 
            void BaseDescription.toJavaSyntax(char) 
            Description BaseDescription.appendDescriptionOf(SelfDescribing) 
            Description BaseDescription.appendValueList(String,String,String,Iterable) 
            Description BaseDescription.appendList(String,String,String,Iterable) 
            Description BaseDescription.appendText(String) 
            Description BaseDescription.appendList(String,String,String,Iterator) 
            void BaseDescription.append(char) 
            String BaseDescription.descriptionOf(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.rules.ErrorCollectorTest$CheckCallableWithFailingAssumption
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckCallableWithFailingAssumption.<init>() 
            void ErrorCollectorTest$CheckCallableWithFailingAssumption.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 238, column 24]}]}
dummy: false
class org.junit.tests.deprecated.JUnit4ClassRunnerTest$UnconstructableExample
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnit4ClassRunnerTest$UnconstructableExample.<init>() 
            void JUnit4ClassRunnerTest$UnconstructableExample.failure() 
            void JUnit4ClassRunnerTest$UnconstructableExample.success()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.internal.runners.JUnit4ClassRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 42, column 24]}]}
dummy: false

class org.junit.rules.TestWatcherTest$InterplayWithOtherRules$ErrorCollectorTest
fields: {
           org.junit.rules.ErrorCollector* collector <_final _org.junit.Rule> 
           org.junit.rules.TestRule* a <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWatcherTest$InterplayWithOtherRules$ErrorCollectorTest.<init>() 
            void TestWatcherTest$InterplayWithOtherRules$ErrorCollectorTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 375, column 28]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$IncludedTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$IncludedTest.<init>() 
            void CategoryTest$IncludedTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 493, column 24]}]}
dummy: false
class org.junit.rules.TimeoutRuleTest$HasGlobalLongTimeout
fields: {
           org.junit.rules.TestRule* globalTimeout <_final _org.junit.Rule> 
           org.junit.rules.TemporaryFolder* tmpFile <_final _org.junit.Rule>
         }
statics: {
            java.lang.StringBuffer* logger <_final>
          }
supers: {
           class org.junit.rules.TimeoutRuleTest$AbstractTimeoutTest
         }
objc_protocols: {}
methods: {
            TimeoutRuleTest$HasGlobalLongTimeout.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 91, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$InterplayWithOtherRules
fields: {}
statics: {
            java.lang.StringBuilder* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            StringBuilder TestWatcherTest$InterplayWithOtherRules.access$1200() 
            TestWatcherTest$InterplayWithOtherRules.<init>() 
            void TestWatcherTest$InterplayWithOtherRules.testIsSeenAsFailedBecauseOfCollectedError() 
            void TestWatcherTest$InterplayWithOtherRules.expectedExceptionIsSeenAsSuccessfulTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 349, column 24]}]}
dummy: false
class org.junit.runners.CustomBlockJUnit4ClassRunnerTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.InexactComparisonCriteria
fields: {
           java.lang.Object* fDelta <>
         }
statics: {
            java.lang.Object* END_OF_ARRAY_SENTINEL <_final>
          }
supers: {
           class org.junit.internal.ComparisonCriteria
         }
objc_protocols: {}
methods: {
            InexactComparisonCriteria.<init>(double) 
            void InexactComparisonCriteria.assertElementsEqual(Object,Object) 
            InexactComparisonCriteria.<init>(float)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.runner.notification.ConcurrentRunNotifierTest$ExaminedListener
fields: {
           _Bool throwFromTestStarted <_final> 
           _Bool hasTestFailure <_volatile>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            ConcurrentRunNotifierTest$ExaminedListener.<init>(boolean) 
            void ConcurrentRunNotifierTest$ExaminedListener.testStarted(Description) 
            void ConcurrentRunNotifierTest$ExaminedListener.testFailure(Failure)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 66, column 25]}]}
dummy: false
class org.junit.tests.running.core.JUnitCoreReturnsCorrectExitCodeTest$Fail
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JUnitCoreReturnsCorrectExitCodeTest$Fail.kaboom() 
            JUnitCoreReturnsCorrectExitCodeTest$Fail.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.extendingwithstubs.StubbedTheories$StubbedTheoryAnchor
fields: {
           java.util.List* queues <> 
           org.junit.runners.model.FrameworkMethod* testMethod <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           int successes <> 
           java.util.List* fInvalidParameters <>
         }
statics: {}
supers: {
           class org.junit.experimental.theories.Theories$TheoryAnchor
         }
objc_protocols: {}
methods: {
            GuesserQueue StubbedTheories$StubbedTheoryAnchor.createGuesserQueue(Assignments) 
            void StubbedTheories$StubbedTheoryAnchor.handleAssumptionViolation(AssumptionViolatedException) 
            StubbedTheories$StubbedTheoryAnchor.<init>(FrameworkMethod,TestClass) 
            void StubbedTheories$StubbedTheoryAnchor.runWithIncompleteAssignment(Assignments)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 24]}]}
dummy: false
class org.junit.tests.running.classes.UseSuiteAsASuperclassTest$MySuite
fields: {
           java.util.List* runners <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.Suite
         }
objc_protocols: {}
methods: {
            UseSuiteAsASuperclassTest$MySuite.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 24]}]}
dummy: false
class org.junit.experimental.ParallelComputer$1
fields: {
           java.util.concurrent.ExecutorService* fService <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.model.RunnerScheduler
         }
objc_protocols: {}
methods: {
            ParallelComputer$1.<init>() 
            void ParallelComputer$1.finished() 
            void ParallelComputer$1.schedule(Runnable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 34, column 74]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$AllIncludedMustMatched
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$AllIncludedMustMatched.<init>() 
            void CategoryTest$AllIncludedMustMatched.b() 
            void CategoryTest$AllIncludedMustMatched.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 343, column 24]}]}
dummy: false
class junit.tests.framework.NoArgTestCaseTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            NoArgTestCaseTest.<init>() 
            void NoArgTestCaseTest.testNothing()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 5, column 13]}]}
dummy: false
class java.util.concurrent.Callable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.reflect.Array
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsSortableViaOrderWith$SortedAlphanumerically
fields: {}
statics: {}
supers: {
           class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsSortableViaOrderWith$Unordered
         }
objc_protocols: {}
methods: {
            OrderWithTest$TestClassRunnerIsSortableViaOrderWith$SortedAlphanumerically.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.OrderWith(value="org.junit.runner.manipulation.Alphanumeric")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 157, column 28]}]}
dummy: false
class java.io.FileInputStream
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasDataPointsListField
fields: {}
statics: {
            java.util.List* list <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AllMembersSupplierTest$HasDataPointsListField.<clinit>() 
            AllMembersSupplierTest$HasDataPointsListField.<init>() 
            void AllMembersSupplierTest$HasDataPointsListField.theory(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 157, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$CallMethodOnlyOnceRule
fields: {
           int countOfMethodCalls <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestRuleTest$CallMethodOnlyOnceRule.<init>() 
            TestRuleTest$CallMethodOnlyOnceRule$Dummy TestRuleTest$CallMethodOnlyOnceRule.both() 
            void TestRuleTest$CallMethodOnlyOnceRule.onlyOnce()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 513, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$IgnoredTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$IgnoredTest.<init>() 
            void CategoryTest$IgnoredTest.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="java.lang.Runnable")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 450, column 24]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$TestClassRunnerIsSortable$Enclosing
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SortableTest$TestClassRunnerIsSortable$Enclosing.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 103, column 28]}]}
dummy: false

class org.junit.tests.running.methods.AnnotationTest$SuperStaticMethodShadowing$1
fields: {}
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            AnnotationTest$SuperStaticMethodShadowing$1.<init>() 
            void AnnotationTest$SuperStaticMethodShadowing$1.after() 
            void AnnotationTest$SuperStaticMethodShadowing$1.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 552, column 42]}]}
dummy: false

class org.junit.tests.manipulation.OrderableTest$TestClassRunnerIsOrderable$Enclosing
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            OrderableTest$TestClassRunnerIsOrderable$Enclosing.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 96, column 28]}]}
dummy: false

class org.junit.tests.description.AnnotatedDescriptionTest$ValueAnnotatedClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotatedDescriptionTest$ValueAnnotatedClass.<init>() 
            void AnnotatedDescriptionTest$ValueAnnotatedClass.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.tests.description.AnnotatedDescriptionTest$ValuedAnnotation(value="hello")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 58, column 24]}]}
dummy: false

class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters$InjectionType
fields: {}
statics: {
            org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters$InjectionType* CONSTRUCTOR <_final> 
            org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters$InjectionType*[_*_](*) $VALUES <_final> 
            org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters$InjectionType* FIELD <_final>
          }
supers: {
           class java.lang.Enum
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerWithParameters$InjectionType.<clinit>() 
            BlockJUnit4ClassRunnerWithParameters$InjectionType.<init>(String,int) 
            BlockJUnit4ClassRunnerWithParameters$InjectionType[] BlockJUnit4ClassRunnerWithParameters$InjectionType.values() 
            BlockJUnit4ClassRunnerWithParameters$InjectionType BlockJUnit4ClassRunnerWithParameters$InjectionType.valueOf(String) 
            BlockJUnit4ClassRunnerWithParameters$InjectionType[] BlockJUnit4ClassRunnerWithParameters$InjectionType.$values()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 17]}]}
dummy: false
class java.lang.Thread$State
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.internal.requests.FilterRequest
fields: {
           org.junit.runner.manipulation.Filter* fFilter <_final> 
           org.junit.runner.Request* request <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Request
         }
objc_protocols: {}
methods: {
            FilterRequest.<init>(Request,Filter) 
            Runner FilterRequest.getRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 19]}]}
dummy: false
class org.junit.runners.BlockJUnit4ClassRunner$1
fields: {
           org.junit.runners.model.FrameworkMethod* val$method <_final> 
           org.junit.runners.BlockJUnit4ClassRunner* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunner$1.<init>(BlockJUnit4ClassRunner,FrameworkMethod) 
            void BlockJUnit4ClassRunner$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 97, column 50]}]}
dummy: false
class org.junit.tests.experimental.max.JUnit38SortingTest$JUnit38Test
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void JUnit38SortingTest$JUnit38Test.testSucceedsToo() 
            JUnit38SortingTest$JUnit38Test.<init>() 
            void JUnit38SortingTest$JUnit38Test.testSucceeds() 
            void JUnit38SortingTest$JUnit38Test.testFails()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 40, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$OrderTestRule$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.TestRuleTest$OrderTestRule* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            TestRuleTest$OrderTestRule$1.<init>(TestRuleTest$OrderTestRule,Statement) 
            void TestRuleTest$OrderTestRule$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 481, column 35]}]}
dummy: false
class java.util.concurrent.Executors
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runners.model.InvalidTestClassErrorTest$SampleTestClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            InvalidTestClassErrorTest$SampleTestClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 25]}]}
dummy: false
class org.junit.samples.AllSamplesTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllSamplesTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.samples.ListTest, org.junit.samples.money.MoneyTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.internal.requests.ClassRequest
fields: {
           _Bool canUseSuiteMethod <_final> 
           java.lang.Class* fTestClass <_final> 
           java.util.concurrent.locks.Lock* runnerLock <_final> 
           org.junit.runner.Runner* runner <_volatile>
         }
statics: {}
supers: {
           class org.junit.internal.requests.MemoizingRequest
         }
objc_protocols: {}
methods: {
            Class ClassRequest.access$200(ClassRequest) 
            Runner ClassRequest.createRunner() 
            ClassRequest.<init>(Class,boolean) 
            ClassRequest.<init>(Class) 
            boolean ClassRequest.access$300(ClassRequest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodNoRulesTest
fields: {
           int x <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$MethodNoRulesTest.nothing() 
            TestRuleTest$MethodNoRulesTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 363, column 24]}]}
dummy: false
class org.junit.internal.ExactComparisonCriteria
fields: {}
statics: {
            java.lang.Object* END_OF_ARRAY_SENTINEL <_final>
          }
supers: {
           class org.junit.internal.ComparisonCriteria
         }
objc_protocols: {}
methods: {
            void ExactComparisonCriteria.assertElementsEqual(Object,Object) 
            ExactComparisonCriteria.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SuperFieldShadowing
fields: {
           org.junit.rules.TestRule* rule <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$SuperFieldShadowing.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 599, column 33]}]}
dummy: false
class org.junit.runners.MethodSorters
fields: {
           java.util.Comparator* comparator <_final>
         }
statics: {
            org.junit.runners.MethodSorters* DEFAULT <_final> 
            org.junit.runners.MethodSorters* NAME_ASCENDING <_final> 
            org.junit.runners.MethodSorters*[_*_](*) $VALUES <_final> 
            org.junit.runners.MethodSorters* JVM <_final>
          }
supers: {
           class java.lang.Enum
         }
objc_protocols: {}
methods: {
            void MethodSorters.<clinit>() 
            MethodSorters MethodSorters.valueOf(String) 
            MethodSorters[] MethodSorters.$values() 
            MethodSorters.<init>(String,int,Comparator) 
            MethodSorters[] MethodSorters.values() 
            Comparator MethodSorters.getComparator()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.management.ThreadMXBean
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            long ThreadMXBean.getThreadCpuTime(long) 
            boolean ThreadMXBean.isThreadCpuTimeSupported()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.tests.junit3compatibility.AllTestsTest
fields: {}
statics: {
            _Bool run <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AllTestsTest.exceptionThrownWhenSuiteIsBad() 
            void AllTestsTest.ensureTestIsRun() 
            AllTestsTest.<init>() 
            void AllTestsTest.someUsefulDescription() 
            void AllTestsTest.correctTestCount() 
            boolean AllTestsTest.access$002(boolean) 
            void AllTestsTest.correctTestCountAdapted()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false
class org.junit.rules.Stopwatch
fields: {
           org.junit.rules.Stopwatch$Clock* clock <_final> 
           long endNanos <_volatile> 
           long startNanos <_volatile>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            long Stopwatch.access$200(Stopwatch) 
            void Stopwatch.starting() 
            void Stopwatch.failed(long,Throwable,Description) 
            void Stopwatch.access$300(Stopwatch) 
            Stopwatch.<init>() 
            void Stopwatch.stopping() 
            long Stopwatch.runtime(TimeUnit) 
            void Stopwatch.finished(long,Description) 
            Stopwatch.<init>(Stopwatch$Clock) 
            Statement Stopwatch.apply(Statement,Description) 
            void Stopwatch.skipped(long,AssumptionViolatedException,Description) 
            void Stopwatch.succeeded(long,Description) 
            long Stopwatch.getNanos() 
            void Stopwatch.access$100(Stopwatch)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 79, column 13]}]}
dummy: false
class org.junit.tests.manipulation.OrderableTest$TestClassRunnerIsOrderable
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestClassRunnerIsOrderable.<clinit>() 
            void OrderableTest$TestClassRunnerIsOrderable.orderingBackwardWorksOnTestClassRunner() 
            void OrderableTest$TestClassRunnerIsOrderable.orderingBackwardDoesNothingOnTestClassRunnerWithFixMethodOrder() 
            void OrderableTest$TestClassRunnerIsOrderable.resetLog() 
            OrderableTest$TestClassRunnerIsOrderable.<init>() 
            void OrderableTest$TestClassRunnerIsOrderable.orderingBackwardWorksOnSuite() 
            void OrderableTest$TestClassRunnerIsOrderable.orderingForwardWorksOnSuite() 
            void OrderableTest$TestClassRunnerIsOrderable.orderingForwardWorksOnTestClassRunner() 
            String OrderableTest$TestClassRunnerIsOrderable.access$084(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 24]}]}
dummy: false
class java.util.concurrent.locks.ReentrantLock
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.internal.Throwables$State$3
fields: {}
statics: {
            org.junit.internal.Throwables$State* PROCESSING_OTHER_CODE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_TEST_FRAMEWORK_CODE <_final> 
            org.junit.internal.Throwables$State*[_*_](*) $VALUES <_final> 
            org.junit.internal.Throwables$State* DONE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_REFLECTION_CODE <_final>
          }
supers: {
           class org.junit.internal.Throwables$State
         }
objc_protocols: {}
methods: {
            Throwables$State$3.<init>(String,int) 
            Throwables$State Throwables$State$3.processLine(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.running.classes.ParentRunnerFilteringTest$SuiteWithUnmodifiableChildList
fields: {
           java.util.List* runners <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.Suite
         }
objc_protocols: {}
methods: {
            List ParentRunnerFilteringTest$SuiteWithUnmodifiableChildList.getChildren() 
            ParentRunnerFilteringTest$SuiteWithUnmodifiableChildList.<init>(Class,RunnerBuilder)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 98, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$HasATwoParameterTheory
fields: {}
statics: {
            int ONE <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuccessfulWithDataPointFields$HasATwoParameterTheory.<clinit>() 
            SuccessfulWithDataPointFields$HasATwoParameterTheory.<init>() 
            void SuccessfulWithDataPointFields$HasATwoParameterTheory.allIntsAreEqual(int,int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 24]}]}
dummy: false
class junit.samples.SimpleTest
fields: {
           int fValue2 <> 
           int unused <> 
           int fValue1 <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void SimpleTest.testEquals() 
            SimpleTest.<init>() 
            void SimpleTest.testAdd() 
            void SimpleTest.main(String[]) 
            void SimpleTest.setUp() 
            Test SimpleTest.suite() 
            void SimpleTest.testDivideByZero()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false
class org.junit.runners.ParentRunner$5
fields: {
           org.junit.runner.manipulation.Sorter* val$sorter <_final> 
           org.junit.runners.ParentRunner* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int ParentRunner$5.compare(Object,Object) 
            ParentRunner$5.<init>(ParentRunner,Sorter)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 549, column 35]}]}
dummy: false
class junit.framework.ComparisonFailure
fields: {
           java.lang.String* fActual <> 
           java.lang.String* fExpected <>
         }
statics: {
            long serialVersionUID <_final> 
            int MAX_CONTEXT_LENGTH <_final> 
            long serialVersionUID <_final>
          }
supers: {
           class junit.framework.AssertionFailedError
         }
objc_protocols: {}
methods: {
            ComparisonFailure.<init>(String,String,String) 
            String ComparisonFailure.getMessage() 
            String ComparisonFailure.getExpected() 
            String ComparisonFailure.getActual()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.validation.ValidationTest$WrongBeforeClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            int ValidationTest$WrongBeforeClass.a() 
            ValidationTest$WrongBeforeClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.extendingwithstubs.Correspondent
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            String Correspondent.getAnswer(String,String[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [Some line 3, column 17]}]}
dummy: false
class org.junit.tests.experimental.theories.runner.WithDataPointMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithDataPointMethod.pickUpDataPointMethods() 
            List WithDataPointMethod.failures(Class) 
            WithDataPointMethod.<init>() 
            void WithDataPointMethod.ignoreDataPointMethodsWithWrongTypes() 
            void WithDataPointMethod.mutableObjectsAreCreatedAfresh() 
            Matcher WithDataPointMethod.empty() 
            void WithDataPointMethod.ignoreDataPointMethodsWithoutAnnotation()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.ForwardCompatibilityTest
fields: {
           java.lang.String* fName <>
         }
statics: {
            java.lang.Exception* exception <> 
            _Bool wasRun <> 
            java.lang.String* fLog <> 
            java.lang.String* log <>
          }
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void ForwardCompatibilityTest.<clinit>() 
            void ForwardCompatibilityTest.testRunWithClass() 
            void ForwardCompatibilityTest.testUseGlobalCache() 
            void ForwardCompatibilityTest.testExpected() 
            void ForwardCompatibilityTest.testNotifyResult() 
            ForwardCompatibilityTest.<init>() 
            void ForwardCompatibilityTest.testCompatibility() 
            void ForwardCompatibilityTest.testExceptionInBefore() 
            void ForwardCompatibilityTest.testToStringSuite() 
            void ForwardCompatibilityTest.testException() 
            void ForwardCompatibilityTest.testBeforeAndAfterClass() 
            boolean ForwardCompatibilityTest.access$002(boolean) 
            void ForwardCompatibilityTest.testNoException() 
            void ForwardCompatibilityTest.testToString() 
            void ForwardCompatibilityTest.testInvalidMethod()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithParameterSupplier$TestClassUsingSupplierWithTestClassConstructor
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            WithParameterSupplier$TestClassUsingSupplierWithTestClassConstructor.<init>() 
            void WithParameterSupplier$TestClassUsingSupplierWithTestClassConstructor.theory(String)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 152, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$PositiveIntsWithNegativeField
fields: {
           int x <>
         }
statics: {
            int NEGONE <_final _org.junit.experimental.theories.DataPoint> 
            int ONE <_final _org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuccessfulWithDataPointFields$PositiveIntsWithNegativeField.haveAPostiveSquare() 
            SuccessfulWithDataPointFields$PositiveIntsWithNegativeField.<init>(int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 89, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$ExceptionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationTest$ExceptionTest.expectedException() 
            AnnotationTest$ExceptionTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 242, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$PrivateConstructor
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$PrivateConstructor.aTest() 
            ParameterizedTestTest$PrivateConstructor.<init>(int) 
            Collection ParameterizedTestTest$PrivateConstructor.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 566, column 24]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$FailureWithTimeoutTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutTest$FailureWithTimeoutTest.<init>() 
            void TimeoutTest$FailureWithTimeoutTest.failure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 24]}]}
dummy: false
class org.junit.rules.RuleChainTest$LoggingRule
fields: {
           java.lang.String* label <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            RuleChainTest$LoggingRule.<init>(String) 
            void RuleChainTest$LoggingRule.finished(Description) 
            void RuleChainTest$LoggingRule.starting(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 25]}]}
dummy: false
class org.junit.rules.MethodRulesTest$TestMethodRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            MethodRulesTest$TestMethodRule.<init>() 
            Statement MethodRulesTest$TestMethodRule.apply(Statement,FrameworkMethod,Object) 
            MethodRulesTest$TestMethodRule.<init>(MethodRulesTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 25]}]}
dummy: false
class org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest$2
fields: {
           org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void ForwardCompatibilityPrintingTest$2.runTest() 
            ForwardCompatibilityPrintingTest$2.<init>(ForwardCompatibilityPrintingTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.methods.InheritedTestTest$SubWithBefore
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.InheritedTestTest$Super
         }
objc_protocols: {}
methods: {
            InheritedTestTest$SubWithBefore.<init>() 
            void InheritedTestTest$SubWithBefore.gack()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 24]}]}
dummy: false
class org.junit.rules.ExternalResource
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            ExternalResource.<init>() 
            void ExternalResource.after() 
            Statement ExternalResource.apply(Statement,Description) 
            void ExternalResource.before() 
            Statement ExternalResource.statement(Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 41, column 22]}]}
dummy: false
class org.junit.tests.experimental.theories.runner.TheoriesPerformanceTest
fields: {}
statics: {
            _Bool TESTING_PERFORMANCE <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TheoriesPerformanceTest.<init>() 
            void TheoriesPerformanceTest.tryCombinationsQuickly()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.runners.BlockJUnit4ClassRunner
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.ParentRunner
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunner.<clinit>() 
            List BlockJUnit4ClassRunner.rules(Object) 
            void BlockJUnit4ClassRunner.validateTestMethods(List) 
            void BlockJUnit4ClassRunner.validateInstanceMethods(List) 
            Class BlockJUnit4ClassRunner.getExpectedException(Test) 
            Object BlockJUnit4ClassRunner.createTest(FrameworkMethod) 
            List BlockJUnit4ClassRunner.computeTestMethods() 
            Statement BlockJUnit4ClassRunner.withBefores(FrameworkMethod,Object,Statement) 
            void BlockJUnit4ClassRunner.validateOnlyOneConstructor(List) 
            BlockJUnit4ClassRunner.<init>(TestClass) 
            String BlockJUnit4ClassRunner.testName(FrameworkMethod) 
            Statement BlockJUnit4ClassRunner.possiblyExpectingExceptions(FrameworkMethod,Object,Statement) 
            Description BlockJUnit4ClassRunner.describeChild(Object) 
            boolean BlockJUnit4ClassRunner.isIgnored(Object) 
            void BlockJUnit4ClassRunner.validateMethods(List) 
            void BlockJUnit4ClassRunner.collectInitializationErrors(List) 
            long BlockJUnit4ClassRunner.getTimeout(Test) 
            void BlockJUnit4ClassRunner.validateNoNonStaticInnerClass(List) 
            Statement BlockJUnit4ClassRunner.withRules(FrameworkMethod,Object,Statement) 
            boolean BlockJUnit4ClassRunner.hasOneConstructor() 
            boolean BlockJUnit4ClassRunner.isIgnored(FrameworkMethod) 
            Statement BlockJUnit4ClassRunner.methodInvoker(FrameworkMethod,Object) 
            void BlockJUnit4ClassRunner.runChild(Object,RunNotifier) 
            void BlockJUnit4ClassRunner.validateFields(List) 
            ThreadLocal BlockJUnit4ClassRunner.access$100() 
            void BlockJUnit4ClassRunner.validatePublicConstructor(List) 
            void BlockJUnit4ClassRunner.runChild(FrameworkMethod,RunNotifier) 
            Statement BlockJUnit4ClassRunner.withAfters(FrameworkMethod,Object,Statement) 
            BlockJUnit4ClassRunner.<init>(Class) 
            void BlockJUnit4ClassRunner.validateZeroArgConstructor(List) 
            Description BlockJUnit4ClassRunner.describeChild(FrameworkMethod) 
            Statement BlockJUnit4ClassRunner.withPotentialTimeout(FrameworkMethod,Object,Statement) 
            List BlockJUnit4ClassRunner.getChildren() 
            Object BlockJUnit4ClassRunner.createTest() 
            void BlockJUnit4ClassRunner.validateConstructor(List) 
            Statement BlockJUnit4ClassRunner.methodBlock(FrameworkMethod) 
            List BlockJUnit4ClassRunner.getTestRules(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 63, column 13]}]}
dummy: false

class org.junit.experimental.categories.MultiCategoryTest$InheritanceAnyAllTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MultiCategoryTest$InheritanceAnyAllTest.t() 
            void MultiCategoryTest$InheritanceAnyAllTest.z() 
            MultiCategoryTest$InheritanceAnyAllTest.<init>() 
            void MultiCategoryTest$InheritanceAnyAllTest.q() 
            void MultiCategoryTest$InheritanceAnyAllTest.w() 
            void MultiCategoryTest$InheritanceAnyAllTest.y() 
            void MultiCategoryTest$InheritanceAnyAllTest.x() 
            void MultiCategoryTest$InheritanceAnyAllTest.runnable()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 150, column 30]}]}
dummy: false
class org.junit.runners.CustomBlockJUnit4ClassRunnerTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CustomBlockJUnit4ClassRunnerTest.exceptionsFromMethodBlockMustNotResultInUnrootedTests() 
            CustomBlockJUnit4ClassRunnerTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.runner.RequestTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RequestTest.createsADescriptionWithANameForClasses() 
            RequestTest.<init>() 
            void RequestTest.reportsInitializationErrorThrownWhileCreatingSuite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit4TestAdapterTest$Test3
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void JUnit4TestAdapterTest$Test3.testPass() 
            JUnit4TestAdapterTest$Test3.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 51, column 24]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$InfiniteLoopTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TimeoutTest$InfiniteLoopTest.infiniteLoop() 
            TimeoutTest$InfiniteLoopTest.<init>() 
            void TimeoutTest$InfiniteLoopTest.failure()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 92, column 24]}]}
dummy: false
class org.junit.matchers.JUnitMatchers
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Matcher JUnitMatchers.containsString(String) 
            Matcher JUnitMatchers.isException(Matcher) 
            Matcher JUnitMatchers.hasItem(Matcher) 
            CombinableMatcher$CombinableEitherMatcher JUnitMatchers.either(Matcher) 
            JUnitMatchers.<init>() 
            Matcher JUnitMatchers.hasItems(Matcher[]) 
            CombinableMatcher$CombinableBothMatcher JUnitMatchers.both(Matcher) 
            Matcher JUnitMatchers.hasItems(Object[]) 
            Matcher JUnitMatchers.isThrowable(Matcher) 
            Matcher JUnitMatchers.hasItem(Object) 
            Matcher JUnitMatchers.everyItem(Matcher)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.manipulation.FilterTest$NamedFilter
fields: {
           java.lang.String* fName <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            FilterTest$NamedFilter.<init>(String) 
            boolean FilterTest$NamedFilter.shouldRun(Description) 
            String FilterTest$NamedFilter.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 24]}]}
dummy: false

class org.junit.validator.AnnotationValidatorFactoryTest$ValidatorThatThrowsException
fields: {}
statics: {
            java.util.List* NO_VALIDATION_ERRORS <_final>
          }
supers: {
           class org.junit.validator.AnnotationValidator
         }
objc_protocols: {}
methods: {
            AnnotationValidatorFactoryTest$ValidatorThatThrowsException.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 42, column 24]}]}
dummy: false
class org.junit.runners.model.TestClassTest$DummyClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$DummyClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 204, column 25]}]}
dummy: false

class org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest$CantInitialize
fields: {}
statics: {
            java.lang.String* UNIQUE_ERROR_MESSAGE <_final>
          }
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void InitializationErrorForwardCompatibilityTest$CantInitialize.run(RunNotifier) 
            Description InitializationErrorForwardCompatibilityTest$CantInitialize.getDescription() 
            InitializationErrorForwardCompatibilityTest$CantInitialize.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 24]}]}
dummy: false
class org.junit.tests.running.methods.TestMethodTest$SubShadows
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.TestMethodTest$SuperWrong
         }
objc_protocols: {}
methods: {
            void TestMethodTest$SubShadows.notPublic() 
            TestMethodTest$SubShadows.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 160, column 24]}]}
dummy: false

class org.junit.tests.running.methods.AnnotationTest$SuperStaticFieldShadowing
fields: {}
statics: {
            org.junit.rules.TestRule* rule <_org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationTest$SuperStaticFieldShadowing.<clinit>() 
            AnnotationTest$SuperStaticFieldShadowing.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 646, column 33]}]}
dummy: false
class org.junit.rules.ClassRulesTest$ClassRulesModifiableListEmpty
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ClassRulesTest$ClassRulesModifiableListEmpty.<init>() 
            void ClassRulesTest$ClassRulesModifiableListEmpty.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.rules.ClassRulesTest$RunnerWithClassRuleAddedProgrammatically")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 331, column 24]}]}
dummy: false
class org.junit.internal.runners.rules.RuleMemberValidator$MethodMustBeARule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
         }
objc_protocols: {}
methods: {
            RuleMemberValidator$MethodMustBeARule.<init>() 
            RuleMemberValidator$MethodMustBeARule.<init>(RuleMemberValidator$1) 
            void RuleMemberValidator$MethodMustBeARule.validate(FrameworkMember,Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 244, column 31]}]}
dummy: false

class org.junit.tests.running.methods.AnnotationTest$SuperStaticMethodShadowing
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$SuperStaticMethodShadowing.<init>() 
            TestRule AnnotationTest$SuperStaticMethodShadowing.rule()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 548, column 33]}]}
dummy: false
class org.hamcrest.CoreMatchers
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Matcher CoreMatchers.not(Object) 
            Matcher CoreMatchers.containsString(String) 
            AnyOf CoreMatchers.anyOf(Iterable) 
            Matcher CoreMatchers.allOf(Iterable) 
            Matcher CoreMatchers.is(Matcher) 
            Matcher CoreMatchers.theInstance(Object) 
            Matcher CoreMatchers.is(Object) 
            AnyOf CoreMatchers.anyOf(Matcher,Matcher,Matcher,Matcher,Matcher,Matcher) 
            Matcher CoreMatchers.hasItem(Matcher) 
            Matcher CoreMatchers.allOf(Matcher,Matcher,Matcher) 
            Matcher CoreMatchers.anything(String) 
            Matcher CoreMatchers.notNullValue(Class) 
            CombinableMatcher$CombinableEitherMatcher CoreMatchers.either(Matcher) 
            AnyOf CoreMatchers.anyOf(Matcher,Matcher,Matcher,Matcher) 
            Matcher CoreMatchers.allOf(Matcher[]) 
            Matcher CoreMatchers.isA(Class) 
            CoreMatchers.<init>() 
            Matcher CoreMatchers.endsWith(String) 
            AnyOf CoreMatchers.anyOf(Matcher[]) 
            Matcher CoreMatchers.hasItems(Matcher[]) 
            Matcher CoreMatchers.allOf(Matcher,Matcher,Matcher,Matcher,Matcher) 
            Matcher CoreMatchers.any(Class) 
            Matcher CoreMatchers.nullValue(Class) 
            CombinableMatcher$CombinableBothMatcher CoreMatchers.both(Matcher) 
            AnyOf CoreMatchers.anyOf(Matcher,Matcher,Matcher) 
            Matcher CoreMatchers.is(Class) 
            Matcher CoreMatchers.startsWith(String) 
            AnyOf CoreMatchers.anyOf(Matcher,Matcher) 
            Matcher CoreMatchers.hasItems(Object[]) 
            Matcher CoreMatchers.allOf(Matcher,Matcher,Matcher,Matcher) 
            Matcher CoreMatchers.equalTo(Object) 
            Matcher CoreMatchers.sameInstance(Object) 
            Matcher CoreMatchers.instanceOf(Class) 
            AnyOf CoreMatchers.anyOf(Matcher,Matcher,Matcher,Matcher,Matcher) 
            Matcher CoreMatchers.nullValue() 
            Matcher CoreMatchers.hasItem(Object) 
            Matcher CoreMatchers.allOf(Matcher,Matcher) 
            Matcher CoreMatchers.anything() 
            Matcher CoreMatchers.notNullValue() 
            Matcher CoreMatchers.describedAs(String,Matcher,Object[]) 
            Matcher CoreMatchers.everyItem(Matcher) 
            Matcher CoreMatchers.allOf(Matcher,Matcher,Matcher,Matcher,Matcher,Matcher) 
            Matcher CoreMatchers.not(Matcher)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.lang.Object
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.reflect.Modifier
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.experimental.theories.extendingwithstubs.StringableObject
fields: {
           java.lang.Object* obj <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String StringableObject.toString() 
            StringableObject.<init>(Object) 
            boolean StringableObject.isListableArray() 
            Object StringableObject.stringableObject()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith.<clinit>() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith.orderingBackwardWorksOnTestClassRunner() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith.resetLog() 
            OrderWithTest$TestClassRunnerIsOrderableViaOrderWith.<init>() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith.orderingBackwardWorksOnSuite() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith.orderingForwardWorksOnSuite() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith.orderingForwardWorksOnTestClassRunner() 
            String OrderWithTest$TestClassRunnerIsOrderableViaOrderWith.access$084(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 24]}]}
dummy: false
class org.junit.tests.manipulation.AlphanumericOrdering
fields: {}
statics: {
            org.junit.tests.manipulation.ComparatorBasedOrdering* INSTANCE <_final>
          }
supers: {
           class java.lang.Object 
           class org.junit.runner.manipulation.Ordering$Factory
         }
objc_protocols: {}
methods: {
            void AlphanumericOrdering.<clinit>() 
            AlphanumericOrdering.<init>() 
            Ordering AlphanumericOrdering.create(Ordering$Context)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 19]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$MultipleBeforeParamAndAfterParam
fields: {
           java.lang.String* x <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$MultipleBeforeParamAndAfterParam.second() 
            ParameterizedTestTest$MultipleBeforeParamAndAfterParam.<init>(String) 
            void ParameterizedTestTest$MultipleBeforeParamAndAfterParam.before2(String) 
            void ParameterizedTestTest$MultipleBeforeParamAndAfterParam.after1(String) 
            void ParameterizedTestTest$MultipleBeforeParamAndAfterParam.after2() 
            void ParameterizedTestTest$MultipleBeforeParamAndAfterParam.before1() 
            Collection ParameterizedTestTest$MultipleBeforeParamAndAfterParam.data() 
            void ParameterizedTestTest$MultipleBeforeParamAndAfterParam.first()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized") _org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.NAME_ASCENDING")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 323, column 24]}]}
dummy: false
class org.junit.tests.running.AllRunningTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllRunningTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.AllClassesTests, org.junit.tests.running.core.AllCoreTests, org.junit.tests.running.methods.AllMethodsTests")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsSortableViaOrderWith
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithTest$TestClassRunnerIsSortableViaOrderWith.<clinit>() 
            void OrderWithTest$TestClassRunnerIsSortableViaOrderWith.sortingBackwardWorksOnTestClassRunner() 
            void OrderWithTest$TestClassRunnerIsSortableViaOrderWith.resetLog() 
            OrderWithTest$TestClassRunnerIsSortableViaOrderWith.<init>() 
            String OrderWithTest$TestClassRunnerIsSortableViaOrderWith.access$184(Object) 
            void OrderWithTest$TestClassRunnerIsSortableViaOrderWith.sortingForwardWorksOnTestClassRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 131, column 24]}]}
dummy: false
class org.junit.internal.builders.NullBuilder
fields: {
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.RunnerBuilder
         }
objc_protocols: {}
methods: {
            NullBuilder.<init>() 
            Runner NullBuilder.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.runner.ResultTest$SerializationFormat
fields: {}
statics: {
            junit.tests.runner.ResultTest$SerializationFormat*[_*_](*) $VALUES <_final> 
            junit.tests.runner.ResultTest$SerializationFormat* V4_12 <_final> 
            junit.tests.runner.ResultTest$SerializationFormat* V4_13 <_final>
          }
supers: {
           class java.lang.Enum
         }
objc_protocols: {}
methods: {
            void ResultTest$SerializationFormat.<clinit>() 
            ResultTest$SerializationFormat ResultTest$SerializationFormat.valueOf(String) 
            ResultTest$SerializationFormat[] ResultTest$SerializationFormat.values() 
            ResultTest$SerializationFormat[] ResultTest$SerializationFormat.$values() 
            ResultTest$SerializationFormat.<init>(String,int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 71, column 17]}]}
dummy: false
class junit.tests.runner.TextFeedbackTest$4
fields: {
           junit.tests.runner.TextFeedbackTest* this$0 <_final> 
           java.io.PrintStream* fWriter <> 
           int fColumn <>
         }
statics: {}
supers: {
           class junit.tests.runner.TextFeedbackTest$TestResultPrinter
         }
objc_protocols: {}
methods: {
            TextFeedbackTest$4.<init>(TextFeedbackTest,PrintStream) 
            void TextFeedbackTest$4.printFailures(TestResult)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 87, column 37]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$InheritanceAnyTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MultiCategoryTest$InheritanceAnyTest.t() 
            void MultiCategoryTest$InheritanceAnyTest.z() 
            MultiCategoryTest$InheritanceAnyTest.<init>() 
            void MultiCategoryTest$InheritanceAnyTest.q() 
            void MultiCategoryTest$InheritanceAnyTest.w() 
            void MultiCategoryTest$InheritanceAnyTest.y() 
            void MultiCategoryTest$InheritanceAnyTest.x() 
            void MultiCategoryTest$InheritanceAnyTest.runnable()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 130, column 30]}]}
dummy: false
class org.junit.tests.experimental.theories.PotentialAssignmentTest$1
fields: {
           org.junit.tests.experimental.theories.PotentialAssignmentTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String PotentialAssignmentTest$1.toString() 
            PotentialAssignmentTest$1.<init>(PotentialAssignmentTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 36]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$FakeClassUnderTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SampleJUnit4Tests$FakeClassUnderTest.<init>(SampleJUnit4Tests$1) 
            void SampleJUnit4Tests$FakeClassUnderTest.throwsExceptionWithCause() 
            SampleJUnit4Tests$FakeClassUnderTest.<init>() 
            void SampleJUnit4Tests$FakeClassUnderTest.doThrowExceptionWithoutCause() 
            void SampleJUnit4Tests$FakeClassUnderTest.throwsExceptionWithoutCause() 
            void SampleJUnit4Tests$FakeClassUnderTest.doThrowExceptionWithCause()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 114, column 25]}]}
dummy: false
class java.lang.Boolean
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.ClassRulesTest$CustomCounter
fields: {
           int count <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement ClassRulesTest$CustomCounter.apply(Statement,Description) 
            ClassRulesTest$CustomCounter.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 74, column 24]}]}
dummy: false
class org.junit.rules.LoggingMethodRule
fields: {
           java.lang.String* name <_final> 
           java.lang.StringBuilder* log <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            Statement LoggingMethodRule.apply(Statement,FrameworkMethod,Object) 
            LoggingMethodRule.<init>(StringBuilder,String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 6]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithExtendedParameterSources$DataPointArrayMethod
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithExtendedParameterSources$DataPointArrayMethod.<clinit>() 
            void WithExtendedParameterSources$DataPointArrayMethod.addToLog(String) 
            WithExtendedParameterSources$DataPointArrayMethod.<init>() 
            String[] WithExtendedParameterSources$DataPointArrayMethod.STRINGS()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 108, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SubFieldShadowing
fields: {
           org.junit.rules.TestRule* rule <_final _org.junit.Rule> 
           org.junit.rules.TestRule* rule <_final _org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.tests.running.methods.AnnotationTest$SuperFieldShadowing
         }
objc_protocols: {}
methods: {
            AnnotationTest$SubFieldShadowing.<init>() 
            void AnnotationTest$SubFieldShadowing.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 615, column 24]}]}
dummy: false

class org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
         }
objc_protocols: {}
methods: {
            RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule.<init>() 
            RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule.<init>(RuleMemberValidator$1) 
            void RuleMemberValidator$MemberMustBeNonStaticOrAlsoClassRule.validate(FrameworkMember,Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 166, column 31]}]}
dummy: false
class org.junit.internal.ComparisonCriteria$1
fields: {
           java.lang.String* val$string <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ComparisonCriteria$1.<init>(String) 
            String ComparisonCriteria$1.toString()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 110, column 28]}]}
dummy: false
class org.junit.internal.StackTracesTest$StackTraceLineMatcher
fields: {
           java.lang.String* method <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            java.util.regex.Pattern* PATTERN <_final> 
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.junit.internal.StackTracesTest$StringMatcher
         }
objc_protocols: {}
methods: {
            void StackTracesTest$StackTraceLineMatcher.<clinit>() 
            boolean StackTracesTest$StackTraceLineMatcher.matchesSafely(String) 
            StackTracesTest$StackTraceLineMatcher.<init>(String) 
            boolean StackTracesTest$StackTraceLineMatcher.matchesSafely(Object) 
            void StackTracesTest$StackTraceLineMatcher.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 219, column 25]}]}
dummy: false
class java.util.concurrent.atomic.AtomicInteger
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.ClassRulesTest$CustomCounter$1
fields: {
           org.junit.rules.ClassRulesTest$CustomCounter* this$0 <_final> 
           org.junit.runners.model.Statement* val$base <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$CustomCounter$1.evaluate() 
            ClassRulesTest$CustomCounter$1.<init>(ClassRulesTest$CustomCounter,Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 78, column 35]}]}
dummy: false
class org.junit.experimental.theories.PotentialAssignment$1
fields: {
           java.lang.String* val$name <_final> 
           java.lang.Object* val$value <_final>
         }
statics: {}
supers: {
           class org.junit.experimental.theories.PotentialAssignment
         }
objc_protocols: {}
methods: {
            String PotentialAssignment$1.getDescription() 
            Object PotentialAssignment$1.getValue() 
            String PotentialAssignment$1.toString() 
            PotentialAssignment$1.<init>(Object,String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 41]}]}
dummy: false

class org.junit.experimental.categories.CategoryTest$NoIncludeCategoryAnnotationSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$NoIncludeCategoryAnnotationSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$ExcludeCategory(value="java.lang.String") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$NoIncludeCategoryAnnotationTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 539, column 24]}]}
dummy: false
class org.junit.runner.notification.RunNotifierTest$ThreadSafeListener
fields: {
           java.util.concurrent.atomic.AtomicInteger* fTestStarted <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifierTest$CountingListener
         }
objc_protocols: {}
methods: {
            RunNotifierTest$ThreadSafeListener.<init>() 
            RunNotifierTest$ThreadSafeListener.<init>(RunNotifierTest$1)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.notification.RunListener$ThreadSafe>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 128, column 25]}]}
dummy: false

class org.junit.tests.experimental.theories.extendingwithstubs.StubbedTheoriesTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            StubbedTheoriesTest.<init>() 
            void StubbedTheoriesTest.ask(Correspondent)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.experimental.theories.extendingwithstubs.StubbedTheories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 10, column 13]}]}
dummy: false
class org.junit.runners.model.TestClass$MethodComparator
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int TestClass$MethodComparator.compare(Object,Object) 
            TestClass$MethodComparator.<init>() 
            int TestClass$MethodComparator.compare(FrameworkMethod,FrameworkMethod) 
            TestClass$MethodComparator.<init>(TestClass$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 342, column 25]}]}
dummy: false
class java.io.File
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.manipulation.OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderMe
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderMe.c() 
            OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderMe.<init>() 
            void OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderMe.b() 
            Test OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderMe.suite() 
            void OrderableTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderMe.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 228, column 28]}]}
dummy: false
class org.junit.validator.AnnotationsValidatorTest$ExampleAnnotationValidator
fields: {}
statics: {
            java.lang.String* ANNOTATED_CLASS_CALLED <_final> 
            java.lang.String* ANNOTATED_METHOD_CALLED <_final> 
            java.lang.String* ANNOTATED_FIELD_CALLED <_final> 
            java.util.List* NO_VALIDATION_ERRORS <_final>
          }
supers: {
           class org.junit.validator.AnnotationValidator
         }
objc_protocols: {}
methods: {
            List AnnotationsValidatorTest$ExampleAnnotationValidator.validateAnnotatedClass(TestClass) 
            List AnnotationsValidatorTest$ExampleAnnotationValidator.validateAnnotatedMethod(FrameworkMethod) 
            AnnotationsValidatorTest$ExampleAnnotationValidator.<init>() 
            List AnnotationsValidatorTest$ExampleAnnotationValidator.validateAnnotatedField(FrameworkField)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 24]}]}
dummy: false
class java.util.concurrent.atomic.AtomicReference
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.methods.ParameterizedTestMethodTest
fields: {
           int fErrorCount <> 
           java.lang.Class* fClass <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            List ParameterizedTestMethodTest.validateAllMethods(Class) 
            Collection ParameterizedTestMethodTest.params() 
            void ParameterizedTestMethodTest.testFailures() 
            ParameterizedTestMethodTest.<init>(Class,int) 
            Test ParameterizedTestMethodTest.suite()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class java.lang.reflect.WildcardType
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.classes.parent.TestWithClassRule$CustomRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement TestWithClassRule$CustomRule.apply(Statement,Description) 
            TestWithClassRule$CustomRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 30]}]}
dummy: false
class org.junit.runners.parameterized.TestWithParametersTest$DummyClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWithParametersTest$DummyClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 132, column 25]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SubShadowing$1
fields: {
           org.junit.tests.running.methods.AnnotationTest$SubShadowing* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            AnnotationTest$SubShadowing$1.<init>(AnnotationTest$SubShadowing) 
            void AnnotationTest$SubShadowing$1.after() 
            void AnnotationTest$SubShadowing$1.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 495, column 42]}]}
dummy: false
class org.junit.rules.MethodRulesTest$NoRulesTest
fields: {
           int x <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$NoRulesTest.nothing() 
            MethodRulesTest$NoRulesTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 121, column 24]}]}
dummy: false

class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideCreateTestRunner
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            _Bool $assertionsDisabled <_final> 
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerOverrideTest$OverrideCreateTestRunner.<clinit>() 
            BlockJUnit4ClassRunnerOverrideTest$OverrideCreateTestRunner.<init>(Class) 
            Object BlockJUnit4ClassRunnerOverrideTest$OverrideCreateTestRunner.createTest(FrameworkMethod)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 99, column 24]}]}
dummy: false
class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideCreateTest
fields: {
           org.junit.runners.model.FrameworkMethod* method <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerOverrideTest$OverrideCreateTest.testMethodA() 
            BlockJUnit4ClassRunnerOverrideTest$OverrideCreateTest.<init>() 
            void BlockJUnit4ClassRunnerOverrideTest$OverrideCreateTest.testMethodB()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideCreateTestRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 117, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$Callbacks$ViolatedAssumptionTest
fields: {
           org.junit.rules.TestRule* watcher <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWatcherTest$Callbacks$ViolatedAssumptionTest.<init>() 
            void TestWatcherTest$Callbacks$ViolatedAssumptionTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 178, column 28]}]}
dummy: false
class org.junit.internal.matchers.StacktracePrintingMatcher
fields: {
           org.hamcrest.Matcher* throwableMatcher <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            Matcher StacktracePrintingMatcher.isException(Matcher) 
            void StacktracePrintingMatcher.describeMismatchSafely(Throwable,Description) 
            StacktracePrintingMatcher.<init>(Matcher) 
            String StacktracePrintingMatcher.readStacktrace(Throwable) 
            void StacktracePrintingMatcher.describeMismatchSafely(Object,Description) 
            boolean StacktracePrintingMatcher.matchesSafely(Throwable) 
            Matcher StacktracePrintingMatcher.isThrowable(Matcher) 
            boolean StacktracePrintingMatcher.matchesSafely(Object) 
            void StacktracePrintingMatcher.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.ClassRulesTest$CallMethodOnlyOnceRule$Dummy$1
fields: {
           org.junit.rules.ClassRulesTest$CallMethodOnlyOnceRule$Dummy* this$0 <_final> 
           org.junit.runners.model.Statement* val$base <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            ClassRulesTest$CallMethodOnlyOnceRule$Dummy$1.<init>(ClassRulesTest$CallMethodOnlyOnceRule$Dummy,Statement) 
            void ClassRulesTest$CallMethodOnlyOnceRule$Dummy$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 226, column 39]}]}
dummy: false
class org.junit.rules.StopwatchTest$FailedTest
fields: {
           org.junit.rules.Stopwatch* stopwatch <_final> 
           org.junit.rules.RuleChain* chain <_final _org.junit.Rule> 
           org.junit.rules.TestWatcher* watcher <_final> 
           org.junit.rules.Stopwatch$Clock* fakeClock <_final>
         }
statics: {}
supers: {
           class org.junit.rules.StopwatchTest$AbstractStopwatchTest
         }
objc_protocols: {}
methods: {
            void StopwatchTest$FailedTest.failedTest() 
            StopwatchTest$FailedTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 112, column 24]}]}
dummy: false
class java.text.MessageFormat
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$MarkerRunner
fields: {}
statics: {}
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void ForwardCompatibilityTest$MarkerRunner.run(RunNotifier) 
            Description ForwardCompatibilityTest$MarkerRunner.getDescription() 
            int ForwardCompatibilityTest$MarkerRunner.testCount() 
            ForwardCompatibilityTest$MarkerRunner.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 218, column 24]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Starting$1
fields: {
           org.junit.rules.TestWatcherTest$CallbackArguments$Starting* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            TestWatcherTest$CallbackArguments$Starting$1.<init>(TestWatcherTest$CallbackArguments$Starting) 
            void TestWatcherTest$CallbackArguments$Starting$1.starting(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 304, column 62]}]}
dummy: false

class org.junit.runners.CustomBlockJUnit4ClassRunnerTest$CustomBlockJUnit4ClassRunnerTestCase
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CustomBlockJUnit4ClassRunnerTest$CustomBlockJUnit4ClassRunnerTestCase.<init>() 
            void CustomBlockJUnit4ClassRunnerTest$CustomBlockJUnit4ClassRunnerTestCase.throwException() 
            void CustomBlockJUnit4ClassRunnerTest$CustomBlockJUnit4ClassRunnerTestCase.shouldPass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 21]}]}
dummy: false
class org.junit.tests.experimental.results.PrintableResultTest
fields: {}
statics: {
            java.lang.String* SHELL_POINT <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void PrintableResultTest.<clinit>() 
            void PrintableResultTest.includeMultipleFailures(String) 
            PrintableResultTest.<init>() 
            void PrintableResultTest.backTraceHasGoodToString(String,String)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class org.junit.runners.model.AllModelTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllModelTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.runners.model.FrameworkFieldTest, org.junit.runners.model.FrameworkMethodTest, org.junit.runners.model.InvalidTestClassErrorTest, org.junit.runners.model.TestClassTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.tests.listening.ListenerTest$OneTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ListenerTest$OneTest.nothing() 
            ListenerTest$OneTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasDataPointMethodWithOverlyGeneralTypes
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Integer AllMembersSupplierTest$HasDataPointMethodWithOverlyGeneralTypes.object() 
            AllMembersSupplierTest$HasDataPointMethodWithOverlyGeneralTypes.<init>() 
            void AllMembersSupplierTest$HasDataPointMethodWithOverlyGeneralTypes.theory(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 61, column 24]}]}
dummy: false
class org.junit.tests.experimental.results.AllResultsTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllResultsTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.experimental.results.PrintableResultTest, org.junit.tests.experimental.results.ResultMatchersTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsSortableViaOrderWith$Unordered
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithTest$TestClassRunnerIsSortableViaOrderWith$Unordered.c() 
            OrderWithTest$TestClassRunnerIsSortableViaOrderWith$Unordered.<init>() 
            void OrderWithTest$TestClassRunnerIsSortableViaOrderWith$Unordered.b() 
            void OrderWithTest$TestClassRunnerIsSortableViaOrderWith$Unordered.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 134, column 28]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Succeeded$1
fields: {
           org.junit.rules.TestWatcherTest$CallbackArguments$Succeeded* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            void TestWatcherTest$CallbackArguments$Succeeded$1.succeeded(Description) 
            TestWatcherTest$CallbackArguments$Succeeded$1.<init>(TestWatcherTest$CallbackArguments$Succeeded)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 195, column 62]}]}
dummy: false
class org.junit.experimental.theories.Theories$TheoryAnchor
fields: {
           org.junit.runners.model.FrameworkMethod* testMethod <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           int successes <> 
           java.util.List* fInvalidParameters <>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void Theories$TheoryAnchor.runWithCompleteAssignment(Assignments) 
            void Theories$TheoryAnchor.handleDataPointSuccess() 
            void Theories$TheoryAnchor.reportParameterizedError(Throwable,Object[]) 
            boolean Theories$TheoryAnchor.access$000(Theories$TheoryAnchor) 
            Statement Theories$TheoryAnchor.methodCompletesWithParameters(FrameworkMethod,Assignments,Object) 
            Statement Theories$TheoryAnchor.access$100(Theories$TheoryAnchor,FrameworkMethod,Assignments,Object) 
            Theories$TheoryAnchor.<init>(FrameworkMethod,TestClass) 
            TestClass Theories$TheoryAnchor.getTestClass() 
            void Theories$TheoryAnchor.handleAssumptionViolation(AssumptionViolatedException) 
            void Theories$TheoryAnchor.runWithAssignment(Assignments) 
            boolean Theories$TheoryAnchor.nullsOk() 
            void Theories$TheoryAnchor.evaluate() 
            void Theories$TheoryAnchor.runWithIncompleteAssignment(Assignments)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 173, column 24]}]}
dummy: false
class java.io.BufferedReader
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.hamcrest.core.IsEqual
fields: {
           java.lang.Object* expectedValue <_final>
         }
statics: {}
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            boolean IsEqual.isArray(Object) 
            boolean IsEqual.areEqual(Object,Object) 
            Matcher IsEqual.equalTo(Object) 
            IsEqual.<init>(Object) 
            boolean IsEqual.matches(Object) 
            boolean IsEqual.areArrayLengthsEqual(Object,Object) 
            boolean IsEqual.areArraysEqual(Object,Object) 
            void IsEqual.describeTo(Description) 
            boolean IsEqual.areArrayElementsEqual(Object,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.junit3compatibility.SuiteMethodTest$OldTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void SuiteMethodTest$OldTest.notObviouslyATest() 
            SuiteMethodTest$OldTest.<init>(String) 
            Test SuiteMethodTest$OldTest.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 24]}]}
dummy: false
class org.junit.rules.DisableOnDebugTest$PostJava5DebugArgumentsTest
fields: {
           org.junit.rules.TestRule* failOnExecution <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.rules.DisableOnDebugTest$AbstractDisableOnDebugTest
         }
objc_protocols: {}
methods: {
            DisableOnDebugTest$PostJava5DebugArgumentsTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 84, column 24]}]}
dummy: false

class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$InvalidMethodTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ForwardCompatibilityTest$InvalidMethodTest.aTest() 
            ForwardCompatibilityTest$InvalidMethodTest.<init>() 
            void ForwardCompatibilityTest$InvalidMethodTest.shouldBeStatic()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 197, column 24]}]}
dummy: false
class junit.tests.framework.SuiteTest
fields: {
           junit.framework.TestResult* fResult <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void SuiteTest.testNotPublicTestCase() 
            void SuiteTest.testInheritedTests() 
            void SuiteTest.testShadowedTests() 
            SuiteTest.<init>(String) 
            void SuiteTest.testOneTestCase() 
            void SuiteTest.testNoTestCases() 
            void SuiteTest.testCreateSuiteFromArray() 
            void SuiteTest.testNotVoidTestCase() 
            void SuiteTest.setUp() 
            void SuiteTest.testNoTestCaseClass() 
            void SuiteTest.testAddTestSuite() 
            void SuiteTest.testOneTestCaseEclipseSeesSameStructureAs381() 
            void SuiteTest.testNotExistingTestCase() 
            Test SuiteTest.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$NonPublicSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$NonPublicSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.SuiteTest$TestA")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 47, column 17]}]}
dummy: false
class org.junit.rules.TestWatchmanTest$LoggingTestWatchman
fields: {
           java.lang.StringBuilder* log <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatchman
         }
objc_protocols: {}
methods: {
            void TestWatchmanTest$LoggingTestWatchman.failed(Throwable,FrameworkMethod) 
            void TestWatchmanTest$LoggingTestWatchman.finished(FrameworkMethod) 
            TestWatchmanTest$LoggingTestWatchman.<init>(StringBuilder) 
            void TestWatchmanTest$LoggingTestWatchman.starting(FrameworkMethod) 
            TestWatchmanTest$LoggingTestWatchman.<init>(StringBuilder,TestWatchmanTest$1) 
            void TestWatchmanTest$LoggingTestWatchman.succeeded(FrameworkMethod)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 63, column 25]}]}
dummy: false

class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$ExpectedTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityTest$ExpectedTest.<init>() 
            void ForwardCompatibilityTest$ExpectedTest.expected()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 116, column 24]}]}
dummy: false
class org.hamcrest.collection.IsArray
fields: {
           org.hamcrest.Matcher*[_*_](*) elementMatchers <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            IsArray.<init>(Matcher[]) 
            boolean IsArray.matchesSafely(Object[]) 
            boolean IsArray.matchesSafely(Object) 
            String IsArray.descriptionSeparator() 
            void IsArray.describeMismatchSafely(Object[],Description) 
            String IsArray.descriptionStart() 
            IsArray IsArray.array(Matcher[]) 
            void IsArray.describeTo(Description) 
            void IsArray.describeMismatchSafely(Object,Description) 
            String IsArray.descriptionEnd()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeoutTest$StuckStatement
fields: {}
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            FailOnTimeoutTest$StuckStatement.<init>(FailOnTimeoutTest$1) 
            void FailOnTimeoutTest$StuckStatement.theRealCauseOfTheTimeout() 
            FailOnTimeoutTest$StuckStatement.<init>() 
            void FailOnTimeoutTest$StuckStatement.evaluate() 
            void FailOnTimeoutTest$StuckStatement.notTheRealCauseOfTheTimeout()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 158, column 31]}]}
dummy: false
class org.junit.tests.validation.AllValidationTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllValidationTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.validation.BadlyFormedClassesTest, org.junit.tests.validation.FailedConstructionTest, org.junit.tests.validation.ValidationTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SetupFailureTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$SetupFailureTest.<init>() 
            void AnnotationTest$SetupFailureTest.before() 
            void AnnotationTest$SetupFailureTest.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 113, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$OldSuiteTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            AnnotationTest$OldSuiteTest.<init>() 
            void AnnotationTest$OldSuiteTest.testOne()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 229, column 24]}]}
dummy: false
class org.junit.runner.FilterFactoriesTest$NonInstantiableFilterFactory
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runner.FilterFactory
         }
objc_protocols: {}
methods: {
            FilterFactoriesTest$NonInstantiableFilterFactory.<init>() 
            Filter FilterFactoriesTest$NonInstantiableFilterFactory.createFilter(FilterFactoryParams)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 87, column 24]}]}
dummy: false
class java.lang.reflect.GenericArrayType
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.methods.AnnotationTest$SubShadowing
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.AnnotationTest$SuperShadowing
         }
objc_protocols: {}
methods: {
            void AnnotationTest$SubShadowing.anotherAfter() 
            AnnotationTest$SubShadowing.<init>() 
            void AnnotationTest$SubShadowing.after() 
            TestRule AnnotationTest$SubShadowing.rule() 
            void AnnotationTest$SubShadowing.before() 
            void AnnotationTest$SubShadowing.test() 
            void AnnotationTest$SubShadowing.anotherBefore()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 490, column 24]}]}
dummy: false
class org.junit.runner.notification.ConcurrentRunNotifierTest
fields: {
           org.junit.runner.notification.RunNotifier* fNotifier <_final>
         }
statics: {
            long TIMEOUT <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ConcurrentRunNotifierTest.realUsage() 
            int ConcurrentRunNotifierTest.countReportedTestFailures(ConcurrentRunNotifierTest$ExaminedListener[]) 
            int ConcurrentRunNotifierTest.access$200(ConcurrentRunNotifierTest$ExaminedListener[]) 
            ConcurrentRunNotifierTest.<init>() 
            void ConcurrentRunNotifierTest.reportConcurrentFailuresAfterAddListener() 
            RunNotifier ConcurrentRunNotifierTest.access$100(ConcurrentRunNotifierTest) 
            void ConcurrentRunNotifierTest.reportConcurrentFailuresAfterAddFirstListener()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 19]}]}
dummy: false
class org.junit.internal.runners.ErrorReportingRunnerTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ErrorReportingRunnerTest.cannotCreateWithNullClasses() 
            void ErrorReportingRunnerTest.cannotCreateWithNullClass() 
            ErrorReportingRunnerTest.<init>() 
            void ErrorReportingRunnerTest.givenInvalidTestClassErrorAsCause() 
            void ErrorReportingRunnerTest.cannotCreateWithoutClass() 
            void ErrorReportingRunnerTest.cannotCreateWithNullClass2() 
            void ErrorReportingRunnerTest.givenInvalidTestClass_integrationTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.tests.running.classes.RunWithTest$ExampleRunner
fields: {}
statics: {}
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void RunWithTest$ExampleRunner.run(RunNotifier) 
            Description RunWithTest$ExampleRunner.getDescription() 
            int RunWithTest$ExampleRunner.testCount() 
            RunWithTest$ExampleRunner.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 24]}]}
dummy: false
class org.junit.rules.ClassRulesTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.manipulation.Filter$1
fields: {}
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            void Filter$1.apply(Object) 
            Filter Filter$1.intersect(Filter) 
            Filter$1.<init>() 
            boolean Filter$1.shouldRun(Description) 
            String Filter$1.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 50]}]}
dummy: false
class java.util.concurrent.CyclicBarrier
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.experimental.categories.MultiCategoryTest$X
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.experimental.categories.MultiCategoryTest$A
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$X.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 100, column 24]}]}
dummy: false
class org.junit.tests.manipulation.Comparators
fields: {}
statics: {
            java.util.Comparator* ALPHANUMERIC <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void Comparators.<clinit>() 
            Comparators.<init>() 
            Comparator Comparators.alphanumeric()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.internal.runners.statements.FailOnTimeoutTest$DelegatingStatement
fields: {
           org.junit.runners.model.Statement* delegate <_volatile>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            FailOnTimeoutTest$DelegatingStatement.<init>(FailOnTimeoutTest$1) 
            FailOnTimeoutTest$DelegatingStatement.<init>() 
            void FailOnTimeoutTest$DelegatingStatement.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 245, column 25]}]}
dummy: false
class org.junit.tests.manipulation.OrderableTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            OrderableTest.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.runner.notification.RunNotifier$2
fields: {
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           org.junit.runner.Result* val$result <_final> 
           org.junit.runner.notification.RunNotifier* this$0 <_final> 
           java.util.List* currentListeners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunNotifier$SafeNotifier
         }
objc_protocols: {}
methods: {
            RunNotifier$2.<init>(RunNotifier,Result) 
            void RunNotifier$2.notifyListener(RunListener)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 100, column 27]}]}
dummy: false
class org.junit.tests.experimental.theories.internal.AllTheoriesInternalTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllTheoriesInternalTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.experimental.theories.internal.AllMembersSupplierTest, org.junit.tests.experimental.theories.internal.ParameterizedAssertionErrorTest, org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithDataPointMethod$HasDataPointMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithDataPointMethod$HasDataPointMethod.allIntsOk(int) 
            WithDataPointMethod$HasDataPointMethod.<init>() 
            int WithDataPointMethod$HasDataPointMethod.oneHundred()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodSonOfExampleTest
fields: {
           org.junit.rules.TestRule* example <>
         }
statics: {}
supers: {
           class org.junit.rules.TestRuleTest$MethodExampleTest
         }
objc_protocols: {}
methods: {
            TestRuleTest$MethodSonOfExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 312, column 24]}]}
dummy: false
class org.junit.runners.model.Annotatable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            Annotation Annotatable.getAnnotation(Class) 
            Annotation[] Annotatable.getAnnotations()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class junit.tests.framework.NoTestCaseClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            NoTestCaseClass.<init>() 
            void NoTestCaseClass.testSuccess()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 13]}]}
dummy: false
class org.junit.validator.PublicClassValidatorTest$NonPublicClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            PublicClassValidatorTest$NonPublicClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 17]}]}
dummy: false
class org.junit.runner.Result$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$JustA
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$JustA.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoryTest$SlowTests") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$A")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 102, column 24]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ThrowExpectedNullCause
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ThrowExpectedNullCause.throwExpectedNullCause() 
            ExpectedExceptionTest$ThrowExpectedNullCause.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 306, column 24]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$W
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.experimental.categories.MultiCategoryTest$A 
           class org.junit.experimental.categories.MultiCategoryTest$B 
           class org.junit.experimental.categories.MultiCategoryTest$C
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$W.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 103, column 24]}]}
dummy: false
class org.junit.rules.ClassRulesTest$RunnerWithClassRuleAddedProgrammatically
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            List ClassRulesTest$RunnerWithClassRuleAddedProgrammatically.classRules() 
            ClassRulesTest$RunnerWithClassRuleAddedProgrammatically.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 317, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoriesAndParameterizedTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoriesAndParameterizedTest.runsTestMethodWithCategory() 
            CategoriesAndParameterizedTest.<init>() 
            void CategoriesAndParameterizedTest.doesNotRunTestsWithoutCategory() 
            void CategoriesAndParameterizedTest.runsTestsWithoutCategory()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class junit.tests.framework.NoTestCases
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            NoTestCases.<init>() 
            void NoTestCases.noTestCase()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class org.junit.tests.SampleJUnit4Tests$TestWithSuppressedException
fields: {}
statics: {
            java.lang.reflect.Method* addSuppressed <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SampleJUnit4Tests$TestWithSuppressedException.<clinit>() 
            Method SampleJUnit4Tests$TestWithSuppressedException.initAddSuppressed() 
            SampleJUnit4Tests$TestWithSuppressedException.<init>() 
            void SampleJUnit4Tests$TestWithSuppressedException.alwaysThrows()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 95, column 24]}]}
dummy: false
class org.junit.runner.FilterFactoriesTest$NonFilterFactory
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FilterFactoriesTest$NonFilterFactory.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 84, column 24]}]}
dummy: false
class junit.tests.framework.TestListenerTest$2
fields: {
           junit.tests.framework.TestListenerTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestListenerTest$2.<init>(TestListenerTest,String) 
            void TestListenerTest$2.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 59, column 45]}]}
dummy: false

class org.junit.tests.experimental.theories.extendingwithstubs.Guesser$GuessMap
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.util.HashMap 
           class java.lang.reflect.InvocationHandler
         }
objc_protocols: {}
methods: {
            Guesser$GuessMap.<init>(Guesser$GuessMap) 
            Guesser$GuessMap.<init>() 
            Guesser$GuessMap Guesser$GuessMap.replaceGuess(Object,Object) 
            Object Guesser$GuessMap.invoke(Object,Method,Object[]) 
            Object Guesser$GuessMap.generateGuess(Class) 
            Object Guesser$GuessMap.getGuess(MethodCall)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 17]}]}
dummy: false
class org.junit.internal.runners.rules.RuleMemberValidator$MemberMustBeStatic
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
         }
objc_protocols: {}
methods: {
            RuleMemberValidator$MemberMustBeStatic.<init>() 
            RuleMemberValidator$MemberMustBeStatic.<init>(RuleMemberValidator$1) 
            void RuleMemberValidator$MemberMustBeStatic.validate(FrameworkMember,Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 191, column 31]}]}
dummy: false
class junit.framework.TestListener
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void TestListener.addFailure(Test,AssertionFailedError) 
            void TestListener.startTest(Test) 
            void TestListener.endTest(Test) 
            void TestListener.addError(Test,Throwable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckMatcherThatFailsWithProvidedReason
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ErrorCollectorTest$CheckMatcherThatFailsWithProvidedReason.<init>() 
            void ErrorCollectorTest$CheckMatcherThatFailsWithProvidedReason.example()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 170, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.extendingwithstubs.StubbedTheories
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.experimental.theories.Theories
         }
objc_protocols: {}
methods: {
            Statement StubbedTheories.methodBlock(FrameworkMethod) 
            StubbedTheories.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false
class org.junit.runners.Parameterized$AssumptionViolationRunner
fields: {
           org.junit.internal.AssumptionViolatedException* exception <_final> 
           org.junit.runner.Description* description <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void Parameterized$AssumptionViolationRunner.run(RunNotifier) 
            Parameterized$AssumptionViolationRunner.<init>(TestClass,String,AssumptionViolatedException) 
            Description Parameterized$AssumptionViolationRunner.getDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 337, column 25]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$TimeOutZero
fields: {
           org.junit.rules.Timeout* timeout <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutTest$TimeOutZero.<init>() 
            void TimeoutTest$TimeOutZero.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 284, column 24]}]}
dummy: false
class org.junit.tests.validation.BadlyFormedClassesTest$NoTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BadlyFormedClassesTest$NoTests.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 43, column 24]}]}
dummy: false

class org.junit.experimental.categories.CategoryTest$MultipleIncludesAndExcludeOnMethod
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$MultipleIncludesAndExcludeOnMethod.<init>() 
            void CategoryTest$MultipleIncludesAndExcludeOnMethod.b() 
            void CategoryTest$MultipleIncludesAndExcludeOnMethod.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 371, column 24]}]}
dummy: false
class org.hamcrest.MatcherAssert
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MatcherAssert.assertThat(Object,Matcher) 
            MatcherAssert.<init>() 
            void MatcherAssert.assertThat(String,Object,Matcher) 
            void MatcherAssert.assertThat(String,boolean)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.extensions.ActiveTestTest$SuccessTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            ActiveTestTest$SuccessTest.<init>() 
            void ActiveTestTest$SuccessTest.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 24]}]}
dummy: false

class org.junit.rules.ExpectedExceptionTest$FailedAssumptionAndExpectException
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$FailedAssumptionAndExpectException.<init>() 
            void ExpectedExceptionTest$FailedAssumptionAndExpectException.failedAssumption()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 279, column 24]}]}
dummy: false
class org.junit.runners.parameterized.TestWithParametersTest
fields: {
           org.junit.rules.ExpectedException* thrown <_final _org.junit.Rule>
         }
statics: {
            java.lang.String* DUMMY_NAME <_final> 
            java.util.List* DUMMY_PARAMETERS <_final> 
            org.junit.runners.model.TestClass* DUMMY_TEST_CLASS <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestWithParametersTest.<clinit>() 
            void TestWithParametersTest.isNotEqualToTestWithDifferentName() 
            void TestWithParametersTest.hasSameHashCodeAsEqualTest() 
            void TestWithParametersTest.cannotBeCreatedWithoutParameters() 
            void TestWithParametersTest.isNotEqualToTestWithDifferentParameters() 
            void TestWithParametersTest.cannotBeCreatedWithoutAName() 
            TestWithParametersTest.<init>() 
            void TestWithParametersTest.doesNotConsiderParametersWhichChangedAfterTestInstantiation() 
            void TestWithParametersTest.isNotEqualToTestWithDifferentTestClass() 
            void TestWithParametersTest.hasMeaningfulToString() 
            void TestWithParametersTest.doesNotAllowToModifyProvidedParameters() 
            void TestWithParametersTest.isNotEqualToObjectWithDifferentClass() 
            void TestWithParametersTest.cannotBeCreatedWithoutTestClass() 
            void TestWithParametersTest.isEqualToTestWithSameNameAndTestClassAndParameters()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false
class java.util.Random
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.classes.SuiteTest$WithoutDefaultConstructor
fields: {
           org.junit.tests.running.classes.SuiteTest* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$WithoutDefaultConstructor.<init>(SuiteTest,int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 198, column 17]}]}
dummy: false
class org.junit.runners.BlockJUnit4ClassRunner$RuleCollector
fields: {
           java.util.List* result <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.model.MemberValueConsumer
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunner$RuleCollector.<init>(BlockJUnit4ClassRunner$1) 
            void BlockJUnit4ClassRunner$RuleCollector.accept(FrameworkMember,Object) 
            BlockJUnit4ClassRunner$RuleCollector.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 459, column 25]}]}
dummy: false

class org.junit.experimental.categories.CategoriesAndParameterizedTest$SuiteWithParameterizedTestWithMethodWithCategory
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoriesAndParameterizedTest$SuiteWithParameterizedTestWithMethodWithCategory.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoriesAndParameterizedTest$Token") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoriesAndParameterizedTest$ParameterizedTestWithMethodWithCategory")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 117, column 24]}]}
dummy: false
class org.junit.tests.listening.UserStopTest
fields: {
           org.junit.runner.notification.RunNotifier* fNotifier <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void UserStopTest.createNotifier() 
            void UserStopTest.stopClassRunner() 
            UserStopTest.<init>() 
            void UserStopTest.userStop()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.runner.OrderWithValidatorTest$TestWithNoValidationErrors
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithValidatorTest$TestWithNoValidationErrors.passes() 
            OrderWithValidatorTest$TestWithNoValidationErrors.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.JUnit4") _org.junit.runner.OrderWith(value="org.junit.runner.manipulation.Alphanumeric")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 24]}]}
dummy: false
class org.junit.internal.runners.statements.RunBefores
fields: {
           java.util.List* befores <_final> 
           java.lang.Object* target <_final> 
           org.junit.runners.model.Statement* next <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void RunBefores.invokeMethod(FrameworkMethod) 
            RunBefores.<init>(Statement,List,Object) 
            void RunBefores.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions$2
fields: {
           org.junit.rules.ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            Object ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions$2.call() 
            Integer ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions$2.call() 
            ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions$2.<init>(ErrorCollectorTest$CheckTwoCallablesThatThrowExceptions)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 216, column 60]}]}
dummy: false
class org.junit.internal.matchers.ThrowableCauseMatcher
fields: {
           org.hamcrest.Matcher* causeMatcher <_final> 
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            void ThrowableCauseMatcher.describeMismatchSafely(Throwable,Description) 
            ThrowableCauseMatcher.<init>(Matcher) 
            void ThrowableCauseMatcher.describeMismatchSafely(Object,Description) 
            boolean ThrowableCauseMatcher.matchesSafely(Throwable) 
            boolean ThrowableCauseMatcher.matchesSafely(Object) 
            Matcher ThrowableCauseMatcher.hasCause(Matcher) 
            void ThrowableCauseMatcher.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.AllTests
fields: {
           junit.framework.Test* test <_volatile>
         }
statics: {}
supers: {
           class org.junit.internal.runners.SuiteMethod
         }
objc_protocols: {}
methods: {
            AllTests.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.extendingwithstubs.GuesserQueue$ReguessableDecorator
fields: {
           org.junit.experimental.theories.PotentialAssignment* delegate <_final>
         }
statics: {}
supers: {
           class org.junit.tests.experimental.theories.extendingwithstubs.ReguessableValue
         }
objc_protocols: {}
methods: {
            Object GuesserQueue$ReguessableDecorator.getValue() 
            GuesserQueue$ReguessableDecorator.<init>(PotentialAssignment) 
            String GuesserQueue$ReguessableDecorator.getDescription() 
            List GuesserQueue$ReguessableDecorator.reguesses(AssumptionViolatedException)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 17]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithDataPointMethod$DataPointMethodReturnsMutableObject
fields: {}
statics: {
            int TWO <_org.junit.experimental.theories.DataPoint> 
            int ONE <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithDataPointMethod$DataPointMethodReturnsMutableObject.<clinit>() 
            List WithDataPointMethod$DataPointMethodReturnsMutableObject.empty() 
            WithDataPointMethod$DataPointMethodReturnsMutableObject.<init>() 
            void WithDataPointMethod$DataPointMethodReturnsMutableObject.everythingsEmpty(List,int)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 45, column 24]}]}
dummy: false
class org.junit.runner.notification.RunNotifierTest$CountingListener
fields: {
           java.util.concurrent.atomic.AtomicInteger* fTestStarted <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            RunNotifierTest$CountingListener.<init>() 
            RunNotifierTest$CountingListener.<init>(RunNotifierTest$1) 
            void RunNotifierTest$CountingListener.testStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 118, column 25]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ThrowExceptionWithWrongType
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$ThrowExceptionWithWrongType.<init>() 
            void ExpectedExceptionTest$ThrowExceptionWithWrongType.throwsNullPointerException()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 147, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$SuiteOrderedAlphanumerically
fields: {}
statics: {}
supers: {
           class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$UnorderedSuite
         }
objc_protocols: {}
methods: {
            OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$SuiteOrderedAlphanumerically.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.OrderWith(value="org.junit.tests.manipulation.AlphanumericOrdering")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 107, column 28]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields$DataPointMethodsMustBePublic
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            int UnsuccessfulWithDataPointFields$DataPointMethodsMustBePublic.five() 
            void UnsuccessfulWithDataPointFields$DataPointMethodsMustBePublic.numbers(int) 
            int UnsuccessfulWithDataPointFields$DataPointMethodsMustBePublic.three() 
            UnsuccessfulWithDataPointFields$DataPointMethodsMustBePublic.<init>() 
            int UnsuccessfulWithDataPointFields$DataPointMethodsMustBePublic.four() 
            int[] UnsuccessfulWithDataPointFields$DataPointMethodsMustBePublic.fives() 
            int[] UnsuccessfulWithDataPointFields$DataPointMethodsMustBePublic.threes() 
            int[] UnsuccessfulWithDataPointFields$DataPointMethodsMustBePublic.fours()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 194, column 24]}]}
dummy: false
class org.junit.internal.runners.ClassRoadie
fields: {
           java.lang.Runnable* runnable <_final> 
           org.junit.runner.Description* description <> 
           org.junit.runner.notification.RunNotifier* notifier <> 
           org.junit.internal.runners.TestClass* testClass <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRoadie.runAfters() 
            void ClassRoadie.runBefores() 
            void ClassRoadie.runProtected() 
            ClassRoadie.<init>(RunNotifier,TestClass,Description,Runnable) 
            void ClassRoadie.addFailure(Throwable) 
            void ClassRoadie.runUnprotected()
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false
class java.util.concurrent.ConcurrentLinkedQueue
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.util.regex.Matcher
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.tests.framework.TestImplementorTest$1
fields: {
           junit.tests.framework.TestImplementorTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestImplementorTest$1.<init>(TestImplementorTest) 
            void TestImplementorTest$1.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 39, column 43]}]}
dummy: false

class org.junit.runners.parameterized.TestWithParametersTest$AnotherDummyClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWithParametersTest$AnotherDummyClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 135, column 25]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ThrowUnexpectedCause
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ThrowUnexpectedCause.throwWithCause() 
            ExpectedExceptionTest$ThrowUnexpectedCause.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 320, column 24]}]}
dummy: false
class junit.extensions.TestDecorator
fields: {
           junit.framework.Test* fTest <>
         }
statics: {}
supers: {
           class junit.framework.Assert 
           class junit.framework.Test
         }
objc_protocols: {}
methods: {
            void TestDecorator.run(TestResult) 
            int TestDecorator.countTestCases() 
            String TestDecorator.toString() 
            TestDecorator.<init>(Test) 
            Test TestDecorator.getTest() 
            void TestDecorator.basicRun(TestResult)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$TestWithStaticMethodRule
fields: {}
statics: {
            org.junit.rules.MethodRule* someMethodRule <_org.junit.Rule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleMemberValidatorTest$TestWithStaticMethodRule.<clinit>() 
            RuleMemberValidatorTest$TestWithStaticMethodRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 192, column 24]}]}
dummy: false
class java.lang.String
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParametersFactory
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.runners.parameterized.ParametersRunnerFactory
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerWithParametersFactory.<init>() 
            Runner BlockJUnit4ClassRunnerWithParametersFactory.createRunnerForTestWithParameters(TestWithParameters)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 13]}]}
dummy: false
class junit.framework.AssertionFailedError
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.AssertionError
         }
objc_protocols: {}
methods: {
            AssertionFailedError.<init>(String) 
            AssertionFailedError.<init>() 
            String AssertionFailedError.defaultString(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class junit.tests.runner.TextFeedbackTest$5
fields: {
           junit.tests.runner.TextFeedbackTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TextFeedbackTest$5.<init>(TextFeedbackTest) 
            void TextFeedbackTest$5.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 107, column 37]}]}
dummy: false
class org.junit.tests.running.classes.ParameterizedTestTest$ThreeFailures
fields: {
           int unused <_org.junit.runners.Parameterized$Parameter>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParameterizedTestTest$ThreeFailures.<init>() 
            void ParameterizedTestTest$ThreeFailures.testSomething() 
            Collection ParameterizedTestTest$ThreeFailures.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 88, column 24]}]}
dummy: false
class junit.tests.runner.TextRunnerSingleMethodTest$InvocationTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void TextRunnerSingleMethodTest$InvocationTest.testWasInvoked() 
            TextRunnerSingleMethodTest$InvocationTest.<init>() 
            void TextRunnerSingleMethodTest$InvocationTest.testNotInvoked()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$OneOfEach
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoryTest$OneOfEach.c() 
            CategoryTest$OneOfEach.<init>() 
            void CategoryTest$OneOfEach.b() 
            void CategoryTest$OneOfEach.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 48, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$OrderedReverseAlphanumerically
fields: {}
statics: {}
supers: {
           class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$Unordered
         }
objc_protocols: {}
methods: {
            OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$OrderedReverseAlphanumerically.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.OrderWith(value="org.junit.tests.manipulation.ReverseAlphanumericOrdering")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 45, column 28]}]}
dummy: false
class org.junit.rules.RuleChainTest
fields: {}
statics: {
            java.util.List* LOG <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleChainTest.<clinit>() 
            List RuleChainTest.access$000() 
            void RuleChainTest.aroundShouldNotAllowNullRules() 
            RuleChainTest.<init>() 
            void RuleChainTest.whenRuleChainHasNullRuleTheStacktraceShouldPointToIt() 
            void RuleChainTest.executeRulesInCorrectOrder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.validator.AnnotationsValidatorTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationsValidatorTest.validatorIsCalledForAField() 
            void AnnotationsValidatorTest.assertClassHasFailureMessage(Class,String) 
            AnnotationsValidatorTest.<init>() 
            void AnnotationsValidatorTest.validatorIsCalledForAClass() 
            void AnnotationsValidatorTest.validatorIsCalledForAMethod()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$TimeOutOneSecond
fields: {
           org.junit.tests.running.methods.TimeoutTest$TimeoutSubclass* timeout <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutTest$TimeOutOneSecond.<init>() 
            void TimeoutTest$TimeOutOneSecond.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 317, column 24]}]}
dummy: false
class org.junit.runners.model.InvalidTestClassError
fields: {
           java.lang.String* message <_final> 
           java.util.List* fErrors <_final>
         }
statics: {
            long serialVersionUID <_final> 
            long serialVersionUID <_final>
          }
supers: {
           class org.junit.runners.model.InitializationError
         }
objc_protocols: {}
methods: {
            InvalidTestClassError.<init>(Class,List) 
            String InvalidTestClassError.getMessage() 
            String InvalidTestClassError.createMessage(Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.junit3compatibility.InitializationErrorForwardCompatibilityTest$InitializesWithError
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            InitializationErrorForwardCompatibilityTest$InitializesWithError.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 96, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SetupTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$SetupTest.<init>() 
            void AnnotationTest$SetupTest.before() 
            void AnnotationTest$SetupTest.success()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 64, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SubTest
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.AnnotationTest$SuperTest
         }
objc_protocols: {}
methods: {
            AnnotationTest$SubTest.<init>() 
            void AnnotationTest$SubTest.one()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 705, column 24]}]}
dummy: false
class java.util.concurrent.atomic.AtomicBoolean
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.internal.builders.AnnotatedBuilderTest$OuterClass$InnerClassWithoutOwnRunWith$MostInnerClass
fields: {
           org.junit.internal.builders.AnnotatedBuilderTest$OuterClass$InnerClassWithoutOwnRunWith* this$1 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotatedBuilderTest$OuterClass$InnerClassWithoutOwnRunWith$MostInnerClass.<init>(AnnotatedBuilderTest$OuterClass$InnerClassWithoutOwnRunWith) 
            void AnnotatedBuilderTest$OuterClass$InnerClassWithoutOwnRunWith$MostInnerClass.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 75, column 25]}]}
dummy: false
class org.junit.tests.experimental.max.DescriptionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void DescriptionTest.parseMethod_whenCantParse() 
            void DescriptionTest.usesPassedInClassObject() 
            void DescriptionTest.parseClassAndMethodWithAnnotations() 
            void DescriptionTest.createSuiteDescription_whenNull() 
            DescriptionTest.<init>() 
            void DescriptionTest.sameNamesButDifferentUniqueIdAreNotEqual() 
            void DescriptionTest.createSuiteDescription_whenZeroLength() 
            void DescriptionTest.parseClassNameAndMethodUniqueId() 
            void DescriptionTest.parseClassAndMethodNoAnnotations() 
            void DescriptionTest.parseClass_whenCantParse()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class org.junit.rules.StopwatchTest$SuccessfulTest
fields: {
           org.junit.rules.Stopwatch* stopwatch <_final> 
           org.junit.rules.RuleChain* chain <_final _org.junit.Rule> 
           org.junit.rules.TestWatcher* watcher <_final> 
           org.junit.rules.Stopwatch$Clock* fakeClock <_final>
         }
statics: {}
supers: {
           class org.junit.rules.StopwatchTest$AbstractStopwatchTest
         }
objc_protocols: {}
methods: {
            StopwatchTest$SuccessfulTest.<init>() 
            void StopwatchTest$SuccessfulTest.successfulTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 106, column 24]}]}
dummy: false
class org.junit.tests.running.classes.ParameterizedTestTest$AdditionTest
fields: {
           int firstSummand <> 
           int sum <> 
           int secondSummand <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParameterizedTestTest$AdditionTest.<init>(int,int,int) 
            Iterable ParameterizedTestTest$AdditionTest.data() 
            void ParameterizedTestTest$AdditionTest.test()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 42, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest
fields: {
           org.junit.rules.ExpectedException* expected <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AllMembersSupplierTest.dataPointsArrayShouldBeRecognized() 
            void AllMembersSupplierTest.dataPointsCollectionMethodShouldBeRecognized() 
            void AllMembersSupplierTest.dataPointsArrayFieldMayContainNullValue() 
            void AllMembersSupplierTest.dataPointMethodShouldBeRecognizedForOverlyGeneralParameters() 
            AllMembersSupplierTest.<init>() 
            List AllMembersSupplierTest.allMemberValuesFor(Class,Class[]) 
            void AllMembersSupplierTest.allMembersFailsOnFailingDataPointsArrayMethod() 
            void AllMembersSupplierTest.dataPointsArrayShouldBeRecognizedOnValueTypeNotFieldType() 
            void AllMembersSupplierTest.dataPointsCollectionShouldBeRecognizedIgnoringStrangeTypes() 
            void AllMembersSupplierTest.dataPointsArrayMethodMayContainNullValue() 
            void AllMembersSupplierTest.dataPointsAnnotationMeansTreatAsArrayOnly() 
            void AllMembersSupplierTest.dataPointsCollectionFieldsShouldBeRecognized()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.runner.FilterOptionIntegrationTest$DummyTestClass01
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FilterOptionIntegrationTest$DummyTestClass01.<init>() 
            void FilterOptionIntegrationTest$DummyTestClass01.dummyTest()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="org.junit.runner.FilterOptionIntegrationTest$DummyCategory0, org.junit.runner.FilterOptionIntegrationTest$DummyCategory1")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 171, column 24]}]}
dummy: false
class org.junit.runner.Computer
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Computer Computer.serial() 
            Runner Computer.getRunner(RunnerBuilder,Class) 
            Computer.<init>() 
            Runner Computer.getSuite(RunnerBuilder,Class[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.internal.StackTracesTest$StringMatcher
fields: {
           java.lang.Class* expectedType <_final>
         }
statics: {
            org.hamcrest.internal.ReflectiveTypeFinder* TYPE_FINDER <_final>
          }
supers: {
           class org.hamcrest.TypeSafeMatcher
         }
objc_protocols: {}
methods: {
            StackTracesTest$StringMatcher.<init>() 
            StackTracesTest$StringMatcher.<init>(StackTracesTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 188, column 34]}]}
dummy: false
class org.junit.rules.ExternalResourceRuleTest$UsesExternalResource$1
fields: {
           org.junit.rules.ExternalResourceRuleTest$UsesExternalResource* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            ExternalResourceRuleTest$UsesExternalResource$1.<init>(ExternalResourceRuleTest$UsesExternalResource) 
            void ExternalResourceRuleTest$UsesExternalResource$1.after() 
            void ExternalResourceRuleTest$UsesExternalResource$1.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 66]}]}
dummy: false
class org.junit.tests.manipulation.FilterableTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FilterableTest.testFilterInRunnerConstructor() 
            FilterableTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.tests.running.classes.EnclosedTest$Enclosing$A
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            EnclosedTest$Enclosing$A.<init>() 
            void EnclosedTest$Enclosing$A.b() 
            void EnclosedTest$Enclosing$A.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 28]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$UseNoCustomMessage
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$UseNoCustomMessage.<init>() 
            void ExpectedExceptionTest$UseNoCustomMessage.noThrow()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 335, column 24]}]}
dummy: false

class org.junit.runners.parameterized.ParameterizedNamesTest$ParameterizedWithSpecialCharsInName
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParameterizedNamesTest$ParameterizedWithSpecialCharsInName.<init>(String) 
            void ParameterizedNamesTest$ParameterizedWithSpecialCharsInName.test() 
            Collection ParameterizedNamesTest$ParameterizedWithSpecialCharsInName.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 20, column 24]}]}
dummy: false
class org.junit.runner.Request$1
fields: {
           org.junit.runner.Runner* val$runner <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Request
         }
objc_protocols: {}
methods: {
            Request$1.<init>(Runner) 
            Runner Request$1.getRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 109, column 29]}]}
dummy: false
class java.lang.IllegalAccessException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class junit.tests.framework.TestCaseTest$3
fields: {
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestCaseTest$3.<init>(TestCaseTest,String) 
            void TestCaseTest$3.runTest() 
            void TestCaseTest$3.setUp()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 64, column 49]}]}
dummy: false
class org.junit.runners.parameterized.ParameterizedNamesTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedNamesTest.parameterizedTestsWithSpecialCharsInName() 
            ParameterizedNamesTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.experimental.max.MaxCore$1
fields: {
           org.junit.experimental.max.MaxCore* this$0 <_final> 
           java.util.List* val$runners <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Request
         }
objc_protocols: {}
methods: {
            Runner MaxCore$1.getRunner() 
            MaxCore$1.<init>(MaxCore,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 110, column 29]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$EmptyTestExpectingNoException
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$EmptyTestExpectingNoException.<init>() 
            void ExpectedExceptionTest$EmptyTestExpectingNoException.throwsNothing()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 115, column 24]}]}
dummy: false

class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest$JUnit3ClassWithAnnotatedMethod
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void JUnit38ClassRunnerTest$JUnit3ClassWithAnnotatedMethod.testNotAnnotated() 
            JUnit38ClassRunnerTest$JUnit3ClassWithAnnotatedMethod.<init>() 
            void JUnit38ClassRunnerTest$JUnit3ClassWithAnnotatedMethod.testAnnotated()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 99, column 24]}]}
dummy: false
class org.hamcrest.core.IsNull
fields: {}
statics: {}
supers: {
           class org.hamcrest.BaseMatcher
         }
objc_protocols: {}
methods: {
            Matcher IsNull.notNullValue(Class) 
            Matcher IsNull.nullValue(Class) 
            Matcher IsNull.nullValue() 
            boolean IsNull.matches(Object) 
            IsNull.<init>() 
            Matcher IsNull.notNullValue() 
            void IsNull.describeTo(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.lang.Runtime
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.UnsupportedOperationException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.manipulation.OrderableTest$TestClassRunnerIsOrderable$Enclosing$B
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderableTest$TestClassRunnerIsOrderable$Enclosing$B.c() 
            OrderableTest$TestClassRunnerIsOrderable$Enclosing$B.<init>() 
            void OrderableTest$TestClassRunnerIsOrderable$Enclosing$B.b() 
            void OrderableTest$TestClassRunnerIsOrderable$Enclosing$B.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 114, column 32]}]}
dummy: false
class org.junit.experimental.max.MaxHistory$TestComparator
fields: {
           org.junit.experimental.max.MaxHistory* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int MaxHistory$TestComparator.compare(Object,Object) 
            Long MaxHistory$TestComparator.getFailure(Description) 
            MaxHistory$TestComparator.<init>(MaxHistory) 
            int MaxHistory$TestComparator.compare(Description,Description) 
            MaxHistory$TestComparator.<init>(MaxHistory,MaxHistory$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 138, column 18]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$TestWithNonStaticTestRule
fields: {
           org.junit.rules.TestRule* temporaryFolder <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$TestWithNonStaticTestRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 168, column 24]}]}
dummy: false
class org.junit.rules.StopwatchTest$DurationDuringTestTest
fields: {
           org.junit.rules.Stopwatch* stopwatch <_final> 
           org.junit.rules.RuleChain* chain <_final _org.junit.Rule> 
           org.junit.rules.TestWatcher* watcher <_final> 
           org.junit.rules.Stopwatch$Clock* fakeClock <_final>
         }
statics: {}
supers: {
           class org.junit.rules.StopwatchTest$AbstractStopwatchTest
         }
objc_protocols: {}
methods: {
            StopwatchTest$DurationDuringTestTest.<init>() 
            void StopwatchTest$DurationDuringTestTest.duration()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 126, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$MultipleRuleTest
fields: {
           org.junit.rules.TestRule* incrementor2 <_org.junit.Rule> 
           org.junit.rules.TestRule* incrementor1 <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$MultipleRuleTest.nothing() 
            TestRuleTest$MultipleRuleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 98, column 24]}]}
dummy: false
class org.junit.runner.Request
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Request Request.orderWith(Ordering) 
            Request Request.classWithoutSuiteMethod(Class) 
            Request Request.runner(Runner) 
            Request Request.aClass(Class) 
            Request.<init>() 
            Request Request.classes(Class[]) 
            Request Request.errorReport(Class,Throwable) 
            Request Request.filterWith(Description) 
            Runner Request.getRunner() 
            Request Request.classes(Computer,Class[]) 
            Request Request.method(Class,String) 
            Request Request.sortWith(Comparator) 
            Request Request.filterWith(Filter)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryValidatorTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoryValidatorTest.errorIsAddedWhenCategoryIsUsedWithBeforeClass() 
            void CategoryValidatorTest.errorIsNotAddedWhenCategoryIsNotCombinedWithIllegalCombination() 
            void CategoryValidatorTest.errorIsAddedWhenCategoryIsUsedWithBefore() 
            CategoryValidatorTest.<init>() 
            void CategoryValidatorTest.testAndAssertErrorMessage(FrameworkMethod,String) 
            void CategoryValidatorTest.errorIsAddedWhenCategoryIsUsedWithAfterClass() 
            void CategoryValidatorTest.errorIsAddedWhenCategoryIsUsedWithAfter()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false
class org.junit.rules.MethodRulesTest$Increment$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.MethodRulesTest$Increment* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            MethodRulesTest$Increment$1.<init>(MethodRulesTest$Increment,Statement) 
            void MethodRulesTest$Increment$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 90, column 35]}]}
dummy: false
class org.junit.runner.FilterFactoriesTest$DummyTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FilterFactoriesTest$DummyTest.passes() 
            FilterFactoriesTest$DummyTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 132, column 24]}]}
dummy: false
class org.junit.experimental.theories.internal.SpecificDataPointsSupplier
fields: {
           org.junit.runners.model.TestClass* clazz <_final>
         }
statics: {}
supers: {
           class org.junit.experimental.theories.internal.AllMembersSupplier
         }
objc_protocols: {}
methods: {
            SpecificDataPointsSupplier.<init>(TestClass) 
            Collection SpecificDataPointsSupplier.getSingleDataPointMethods(ParameterSignature) 
            Collection SpecificDataPointsSupplier.getSingleDataPointFields(ParameterSignature) 
            Collection SpecificDataPointsSupplier.getDataPointsFields(ParameterSignature) 
            Collection SpecificDataPointsSupplier.getDataPointsMethods(ParameterSignature)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false

class org.junit.rules.RuleMemberValidatorTest$MethodTestWithProtectedClassRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$MethodTestWithProtectedClassRule.<init>() 
            TestRule RuleMemberValidatorTest$MethodTestWithProtectedClassRule.getTemporaryFolder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 233, column 24]}]}
dummy: false
class org.junit.internal.runners.ErrorReportingRunner
fields: {
           java.util.List* causes <_final> 
           java.lang.String* classNames <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void ErrorReportingRunner.run(RunNotifier) 
            Description ErrorReportingRunner.describeCause() 
            String ErrorReportingRunner.getClassNames(Class[]) 
            void ErrorReportingRunner.runCause(Throwable,RunNotifier) 
            ErrorReportingRunner.<init>(Class,Throwable) 
            ErrorReportingRunner.<init>(Throwable,Class[]) 
            Description ErrorReportingRunner.getDescription() 
            List ErrorReportingRunner.getCauses(Throwable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 13]}]}
dummy: false
class org.junit.internal.builders.JUnit4Builder
fields: {
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.RunnerBuilder
         }
objc_protocols: {}
methods: {
            JUnit4Builder.<init>() 
            Runner JUnit4Builder.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$FlipBitRule
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerOverrideTest$FlipBitRule.<init>() 
            Statement BlockJUnit4ClassRunnerOverrideTest$FlipBitRule.apply(Statement,FrameworkMethod,Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 21, column 24]}]}
dummy: false
class java.lang.Enum
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.running.classes.IgnoreClassTest$IgnoreMe
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void IgnoreClassTest$IgnoreMe.iFailToo() 
            IgnoreClassTest$IgnoreMe.<init>() 
            void IgnoreClassTest$IgnoreMe.iFail()
          }
exported_obj_methods: {}
annots: {<_org.junit.Ignore(value="For a good reason")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 24]}]}
dummy: false
class junit.textui.TestRunner
fields: {
           junit.textui.ResultPrinter* fPrinter <> 
           _Bool fLoading <>
         }
statics: {
            int FAILURE_EXIT <_final> 
            int SUCCESS_EXIT <_final> 
            int EXCEPTION_EXIT <_final> 
            _Bool fgFilterStack <> 
            java.lang.String* SUITE_METHODNAME <_final> 
            int fgMaxMessageLength <> 
            java.util.Properties* fPreferences <>
          }
supers: {
           class junit.runner.BaseTestRunner
         }
objc_protocols: {}
methods: {
            void TestRunner.pause(boolean) 
            void TestRunner.setPrinter(ResultPrinter) 
            TestResult TestRunner.doRun(Test) 
            void TestRunner.testFailed(int,Test,Throwable) 
            TestResult TestRunner.runSingleMethod(String,String,boolean) 
            TestRunner.<init>(ResultPrinter) 
            TestResult TestRunner.start(String[]) 
            TestRunner.<init>() 
            TestResult TestRunner.createTestResult() 
            TestRunner.<init>(PrintStream) 
            void TestRunner.run(Class) 
            void TestRunner.main(String[]) 
            TestResult TestRunner.doRun(Test,boolean) 
            TestResult TestRunner.run(Test) 
            void TestRunner.testEnded(String) 
            void TestRunner.runAndWait(Test) 
            void TestRunner.runFailed(String) 
            void TestRunner.testStarted(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 30, column 13]}]}
dummy: false
class org.junit.internal.runners.MethodRoadie$2
fields: {
           org.junit.internal.runners.MethodRoadie* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.lang.Runnable
         }
objc_protocols: {}
methods: {
            MethodRoadie$2.<init>(MethodRoadie) 
            void MethodRoadie$2.run()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 87, column 52]}]}
dummy: false
class org.junit.rules.DisableOnDebugTest$PreJava5DebugArgumentsReversedTest
fields: {
           org.junit.rules.TestRule* failOnExecution <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.rules.DisableOnDebugTest$AbstractDisableOnDebugTest
         }
objc_protocols: {}
methods: {
            DisableOnDebugTest$PreJava5DebugArgumentsReversedTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 75, column 24]}]}
dummy: false

class org.junit.rules.ErrorCollectorTest$CheckRunnableThatThrowsUnexpectedTypeOfException$1
fields: {
           org.junit.rules.ErrorCollectorTest$CheckRunnableThatThrowsUnexpectedTypeOfException* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.function.ThrowingRunnable
         }
objc_protocols: {}
methods: {
            void ErrorCollectorTest$CheckRunnableThatThrowsUnexpectedTypeOfException$1.run() 
            ErrorCollectorTest$CheckRunnableThatThrowsUnexpectedTypeOfException$1.<init>(ErrorCollectorTest$CheckRunnableThatThrowsUnexpectedTypeOfException)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 288, column 89]}]}
dummy: false
class org.junit.tests.junit3compatibility.SuiteMethodTest$NewTestSuiteFails
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuiteMethodTest$NewTestSuiteFails.sample() 
            SuiteMethodTest$NewTestSuiteFails.<init>() 
            Test SuiteMethodTest$NewTestSuiteFails.suite()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 84, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$ParametersNotIterable
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$ParametersNotIterable.aTest() 
            String ParameterizedTestTest$ParametersNotIterable.data() 
            ParameterizedTestTest$ParametersNotIterable.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 547, column 24]}]}
dummy: false
class org.junit.runner.RequestTest$BarTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RequestTest$BarTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 48, column 25]}]}
dummy: false
class org.junit.runner.manipulation.Alphanumeric
fields: {
           java.util.Comparator* comparator <_final>
         }
statics: {
            java.util.Comparator* COMPARATOR <_final> 
            org.junit.runner.manipulation.Sorter* NULL <_final> 
            java.lang.String* CONSTRUCTOR_ERROR_FORMAT <_final>
          }
supers: {
           class org.junit.runner.manipulation.Sorter 
           class org.junit.runner.manipulation.Ordering$Factory
         }
objc_protocols: {}
methods: {
            void Alphanumeric.<clinit>() 
            Alphanumeric.<init>() 
            Ordering Alphanumeric.create(Ordering$Context)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 12, column 19]}]}
dummy: false
class org.junit.rules.MethodRulesTest
fields: {}
statics: {
            int runCount <> 
            _Bool ruleWasEvaluated <> 
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest.runsAllMethodRulesThatAreReturnedByMethods() 
            void MethodRulesTest.validateWrongTypedFieldInSuperclass() 
            void MethodRulesTest.multipleRulesAreRun() 
            String MethodRulesTest.access$484(Object) 
            void MethodRulesTest.ruleIsIntroducedAndEvaluatedOnSubclass() 
            void MethodRulesTest.ruleIsIntroducedAndEvaluated() 
            void MethodRulesTest.succeeded() 
            void MethodRulesTest.useCustomMethodRule() 
            MethodRulesTest.<init>() 
            void MethodRulesTest.beforesAndAfters() 
            void MethodRulesTest.onFailure() 
            int MethodRulesTest.access$208() 
            void MethodRulesTest.callsMethodReturningRuleOnlyOnce() 
            void MethodRulesTest.validatePrivateRule() 
            void MethodRulesTest.ignoreNonRules() 
            void MethodRulesTest.ruleIsIntroducedAndEvaluatedOnSubclassOfNonPublicClass() 
            boolean MethodRulesTest.access$002(boolean) 
            void MethodRulesTest.validateWrongTypedField() 
            void MethodRulesTest.runsMethodRuleThatIsReturnedByMethod()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 13]}]}
dummy: false
class org.junit.rules.MethodRulesTest$CallsMethodReturningRuleOnlyOnce
fields: {
           int callCount <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            MethodRule MethodRulesTest$CallsMethodReturningRuleOnlyOnce.methodRule() 
            MethodRulesTest$CallsMethodReturningRuleOnlyOnce.<init>() 
            void MethodRulesTest$CallsMethodReturningRuleOnlyOnce.doNothing()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 380, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ThreadsTest$TestWithInterruptFromAfterClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ThreadsTest$TestWithInterruptFromAfterClass.<init>() 
            void ThreadsTest$TestWithInterruptFromAfterClass.test() 
            void ThreadsTest$TestWithInterruptFromAfterClass.interruptCurrentThread()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.BlockJUnit4ClassRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 55, column 24]}]}
dummy: false
class org.junit.tests.listening.TextListenerTest
fields: {
           java.io.OutputStream* results <> 
           org.junit.runner.JUnitCore* runner <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void TextListenerTest.testTime() 
            TextListenerTest.<init>() 
            String TextListenerTest.convert(String) 
            void TextListenerTest.setUp() 
            void TextListenerTest.testSuccess() 
            void TextListenerTest.testError()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false
class java.util.LinkedHashSet
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.manipulation.SortableTest$TestOnlySortableClassRunnerIsSortable
fields: {}
statics: {
            java.lang.String* log <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SortableTest$TestOnlySortableClassRunnerIsSortable.<clinit>() 
            void SortableTest$TestOnlySortableClassRunnerIsSortable.sortingBackwardWorksOnTestClassRunner() 
            String SortableTest$TestOnlySortableClassRunnerIsSortable.access$484(Object) 
            void SortableTest$TestOnlySortableClassRunnerIsSortable.resetLog() 
            SortableTest$TestOnlySortableClassRunnerIsSortable.<init>() 
            void SortableTest$TestOnlySortableClassRunnerIsSortable.sortingForwardWorksOnTestClassRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 231, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SubStaticFieldShadowing
fields: {}
statics: {
            org.junit.rules.TestRule* rule <_org.junit.ClassRule> 
            org.junit.rules.TestRule* rule <_org.junit.ClassRule>
          }
supers: {
           class org.junit.tests.running.methods.AnnotationTest$SuperStaticFieldShadowing
         }
objc_protocols: {}
methods: {
            void AnnotationTest$SubStaticFieldShadowing.<clinit>() 
            AnnotationTest$SubStaticFieldShadowing.<init>() 
            void AnnotationTest$SubStaticFieldShadowing.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 662, column 24]}]}
dummy: false
class org.junit.internal.builders.AnnotatedBuilderTest
fields: {
           org.junit.internal.builders.AnnotatedBuilder* builder <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotatedBuilderTest.memberClassDeepInsideAnnotatedTopLevelClass_isRunWithTopLevelRunner() 
            void AnnotatedBuilderTest.memberClassDeepInsideAnnotatedMemberClass_isRunWithParentMemberClassRunner() 
            AnnotatedBuilderTest.<init>() 
            void AnnotatedBuilderTest.topLevelTestClassWithAnnotation_isRunWithAnnotatedRunner() 
            void AnnotatedBuilderTest.annotatedMemberClassInsideAnnotatedTopLevelClass_isRunWithOwnRunner() 
            void AnnotatedBuilderTest.topLevelTestClassWithoutAnnotation_isRunWithDefaultRunner() 
            void AnnotatedBuilderTest.memberClassInsideAnnotatedTopLevelClass_isRunWithTopLevelRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false

class org.junit.rules.ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail
fields: {
           org.junit.rules.ExternalResource* resourceRule1 <_org.junit.Rule> 
           org.junit.rules.ExternalResource* resourceRule2 <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail.<init>() 
            void ExternalResourceRuleTest$TestFailsAndTwoClosingResourcesFail.failingTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 86, column 24]}]}
dummy: false
class org.junit.rules.StopwatchTest
fields: {}
statics: {
            org.junit.rules.StopwatchTest$Record* record <> 
            long fakeTimeNanos <> 
            org.junit.rules.StopwatchTest$Record* finishedRecord <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void StopwatchTest.<clinit>() 
            long StopwatchTest.access$008() 
            void StopwatchTest.skipped() 
            void StopwatchTest.simulateTimePassing(long) 
            void StopwatchTest.succeeded() 
            StopwatchTest$Record StopwatchTest.access$102(StopwatchTest$Record) 
            StopwatchTest.<init>() 
            void StopwatchTest.runtimeAfterTestShouldReturnRunDuration() 
            Result StopwatchTest.runTest(Class) 
            StopwatchTest$Record StopwatchTest.access$302(StopwatchTest$Record) 
            void StopwatchTest.runtimeDuringTestShouldReturnTimeSinceStart() 
            void StopwatchTest.failed() 
            void StopwatchTest.access$200(long) 
            void StopwatchTest.init()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 13]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$UnsortableRunnersAreHandledWithoutCrashing
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SortableTest$UnsortableRunnersAreHandledWithoutCrashing.<init>() 
            void SortableTest$UnsortableRunnersAreHandledWithoutCrashing.unsortablesAreHandledWithoutCrashing()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 202, column 24]}]}
dummy: false

class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$UnExpectedExceptionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityTest$UnExpectedExceptionTest.<init>() 
            void ForwardCompatibilityTest$UnExpectedExceptionTest.expected()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 130, column 24]}]}
dummy: false
class org.junit.rules.StopwatchTest$TestStatus
fields: {}
statics: {
            org.junit.rules.StopwatchTest$TestStatus* SUCCEEDED <_final> 
            org.junit.rules.StopwatchTest$TestStatus* SKIPPED <_final> 
            org.junit.rules.StopwatchTest$TestStatus* FAILED <_final> 
            org.junit.rules.StopwatchTest$TestStatus*[_*_](*) $VALUES <_final>
          }
supers: {
           class java.lang.Enum
         }
objc_protocols: {}
methods: {
            void StopwatchTest$TestStatus.<clinit>() 
            StopwatchTest$TestStatus StopwatchTest$TestStatus.valueOf(String) 
            StopwatchTest$TestStatus[] StopwatchTest$TestStatus.$values() 
            StopwatchTest$TestStatus[] StopwatchTest$TestStatus.values() 
            StopwatchTest$TestStatus.<init>(String,int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 27, column 24]}]}
dummy: false
class org.junit.internal.Throwables$State$2
fields: {}
statics: {
            org.junit.internal.Throwables$State* PROCESSING_OTHER_CODE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_TEST_FRAMEWORK_CODE <_final> 
            org.junit.internal.Throwables$State*[_*_](*) $VALUES <_final> 
            org.junit.internal.Throwables$State* DONE <_final> 
            org.junit.internal.Throwables$State* PROCESSING_REFLECTION_CODE <_final>
          }
supers: {
           class org.junit.internal.Throwables$State
         }
objc_protocols: {}
methods: {
            Throwables$State$2.<init>(String,int) 
            Throwables$State Throwables$State$2.processLine(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.model.TestClassTest$NonPublicClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$NonPublicClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 236, column 17]}]}
dummy: false
class junit.tests.runner.TextFeedbackTest$2
fields: {
           junit.tests.runner.TextFeedbackTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TextFeedbackTest$2.<init>(TextFeedbackTest) 
            void TextFeedbackTest$2.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 63, column 37]}]}
dummy: false
class java.util.HashSet
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.Byte
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.TestCouldNotBeSkippedException
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.RuntimeException
         }
objc_protocols: {}
methods: {
            TestCouldNotBeSkippedException.<init>(AssumptionViolatedException)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerFilteringTest$ExampleSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParentRunnerFilteringTest$ExampleSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.ParentRunnerFilteringTest$ExampleTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 83, column 24]}]}
dummy: false

class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters$RunAfterParams
fields: {
           org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters* this$0 <_final> 
           java.lang.Object* target <_final> 
           java.util.List* afters <_final> 
           org.junit.runners.model.Statement* next <_final>
         }
statics: {}
supers: {
           class org.junit.internal.runners.statements.RunAfters
         }
objc_protocols: {}
methods: {
            void BlockJUnit4ClassRunnerWithParameters$RunAfterParams.invokeMethod(FrameworkMethod) 
            BlockJUnit4ClassRunnerWithParameters$RunAfterParams.<init>(BlockJUnit4ClassRunnerWithParameters,Statement,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 178, column 18]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderedReverseAlphanumerically
fields: {}
statics: {}
supers: {
           class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$Unordered
         }
objc_protocols: {}
methods: {
            OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderedReverseAlphanumerically.<init>() 
            Test OrderWithTest$TestClassRunnerIsOrderableWithSuiteMethod$OrderedReverseAlphanumerically.suite()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.OrderWith(value="org.junit.tests.manipulation.ReverseAlphanumericOrdering")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 210, column 28]}]}
dummy: false

class org.junit.experimental.categories.CategoryTest$AllIncludedMustBeMatchedSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$AllIncludedMustBeMatchedSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoryTest$MultiA, org.junit.experimental.categories.CategoryTest$MultiB", matchAny="false") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$AllIncludedMustMatched")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 340, column 24]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$TestOnlySortableClassRunnerIsSortable$SortMe
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SortableTest$TestOnlySortableClassRunnerIsSortable$SortMe.c() 
            SortableTest$TestOnlySortableClassRunnerIsSortable$SortMe.<init>() 
            void SortableTest$TestOnlySortableClassRunnerIsSortable$SortMe.b() 
            Test SortableTest$TestOnlySortableClassRunnerIsSortable$SortMe.suite() 
            void SortableTest$TestOnlySortableClassRunnerIsSortable$SortMe.a()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.manipulation.SortableTest$TestOnlySortableClassRunnerIsSortable$SortableRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 260, column 28]}]}
dummy: false
class org.junit.rules.ExternalResourceRuleTest$1
fields: {
           org.junit.rules.ExternalResourceRuleTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            ExternalResourceRuleTest$1.<init>(ExternalResourceRuleTest) 
            void ExternalResourceRuleTest$1.after()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 65, column 63]}]}
dummy: false
class org.junit.tests.running.methods.InheritedTestTest$Sub
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.InheritedTestTest$Super
         }
objc_protocols: {}
methods: {
            InheritedTestTest$Sub.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 24]}]}
dummy: false
class org.junit.tests.experimental.max.JUnit38SortingTest
fields: {
           org.junit.experimental.max.MaxCore* fMax <> 
           java.io.File* fMaxFile <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JUnit38SortingTest.createMax() 
            JUnit38SortingTest.<init>() 
            void JUnit38SortingTest.preferRecentlyFailed38Test() 
            void JUnit38SortingTest.forgetMax()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false
class org.junit.runner.FilterOptionIntegrationTest$DummyTestClass1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FilterOptionIntegrationTest$DummyTestClass1.<init>() 
            void FilterOptionIntegrationTest$DummyTestClass1.dummyTest()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="org.junit.runner.FilterOptionIntegrationTest$DummyCategory1")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 164, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$SubFieldShadowing$1
fields: {
           org.junit.tests.running.methods.AnnotationTest$SubFieldShadowing* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            AnnotationTest$SubFieldShadowing$1.<init>(AnnotationTest$SubFieldShadowing) 
            void AnnotationTest$SubFieldShadowing$1.after() 
            void AnnotationTest$SubFieldShadowing$1.before()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 618, column 60]}]}
dummy: false
class org.junit.rules.TemporaryFolderRuleAssuredDeletionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TemporaryFolderRuleAssuredDeletionTest.<init>() 
            void TemporaryFolderRuleAssuredDeletionTest.byDefaultTestDoesNotFailWhenCreatedFolderCannotBeDeleted() 
            void TemporaryFolderRuleAssuredDeletionTest.testFailsWhenCreatedFolderCannotBeDeletedButDeletionIsAssured()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.tests.running.classes.parent.ParentRunnerClassLoaderTest$1
fields: {
           org.junit.tests.running.classes.parent.ParentRunnerClassLoaderTest* this$0 <_final> 
           java.lang.Class* val$waitClass <_final> 
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            ParentRunnerClassLoaderTest$1.<init>(ParentRunnerClassLoaderTest,Class,Class) 
            String ParentRunnerClassLoaderTest$1.getName()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 52, column 102]}]}
dummy: false
class org.junit.experimental.categories.ExcludeCategories$ExcludesAny
fields: {
           _Bool includedAny <_final> 
           java.util.Set* included <_final> 
           _Bool excludedAny <_final> 
           java.util.Set* excluded <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.experimental.categories.Categories$CategoryFilter
         }
objc_protocols: {}
methods: {
            ExcludeCategories$ExcludesAny.<init>(List) 
            ExcludeCategories$ExcludesAny.<init>(Set) 
            String ExcludeCategories$ExcludesAny.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 25]}]}
dummy: false
class org.junit.ClassRule
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            int ClassRule.order()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.METHOD")>}
java_class_info: {[Some {kind= Interface; loc= [Some line 109, column 18]}]}
dummy: false
class org.hamcrest.Matchers
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Matcher Matchers.contains(Matcher) 
            AnyOf Matchers.anyOf(Matcher,Matcher) 
            Matcher Matchers.eventFrom(Object) 
            Matcher Matchers.isOneOf(Object[]) 
            Matcher Matchers.is(Class) 
            Matcher Matchers.arrayContaining(List) 
            Matcher Matchers.hasEntry(Object,Object) 
            Matcher Matchers.hasItem(Matcher) 
            AnyOf Matchers.anyOf(Iterable) 
            Matcher Matchers.containsString(String) 
            Matcher Matchers.equalToIgnoringWhiteSpace(String) 
            Matcher Matchers.allOf(Matcher,Matcher,Matcher,Matcher,Matcher) 
            Matcher Matchers.emptyArray() 
            Matcher Matchers.notNullValue(Class) 
            Matcher Matchers.containsInAnyOrder(Matcher[]) 
            Matcher Matchers.hasXPath(String,NamespaceContext) 
            Matcher Matchers.greaterThan(Comparable) 
            Matcher Matchers.endsWith(String) 
            Matcher Matchers.allOf(Matcher,Matcher,Matcher,Matcher,Matcher,Matcher) 
            Matcher Matchers.arrayContainingInAnyOrder(Matcher[]) 
            Matcher Matchers.hasValue(Object) 
            AnyOf Matchers.anyOf(Matcher,Matcher,Matcher,Matcher,Matcher,Matcher) 
            Matcher Matchers.hasToString(Matcher) 
            Matcher Matchers.sameInstance(Object) 
            Matcher Matchers.emptyIterable() 
            Matcher Matchers.containsInAnyOrder(Object[]) 
            Matcher Matchers.equalTo(Object) 
            Matcher Matchers.hasProperty(String,Matcher) 
            Matcher Matchers.closeTo(BigDecimal,BigDecimal) 
            Matcher Matchers.anything(String) 
            Matcher Matchers.nullValue(Class) 
            CombinableMatcher$CombinableBothMatcher Matchers.both(Matcher) 
            Matcher Matchers.arrayContaining(Matcher[]) 
            Matcher Matchers.nullValue() 
            Matcher Matchers.hasKey(Matcher) 
            AnyOf Matchers.anyOf(Matcher,Matcher,Matcher,Matcher) 
            Matcher Matchers.not(Object) 
            Matcher Matchers.isEmptyOrNullString() 
            Matcher Matchers.hasSize(int) 
            Matcher Matchers.hasItems(Object[]) 
            Matchers.<init>() 
            Matcher Matchers.iterableWithSize(Matcher) 
            Matcher Matchers.allOf(Matcher[]) 
            Matcher Matchers.hasXPath(String,NamespaceContext,Matcher) 
            Matcher Matchers.lessThanOrEqualTo(Comparable) 
            Matcher Matchers.instanceOf(Class) 
            Matcher Matchers.arrayWithSize(Matcher) 
            Matcher Matchers.isIn(Collection) 
            Matcher Matchers.not(Matcher) 
            CombinableMatcher$CombinableEitherMatcher Matchers.either(Matcher) 
            Matcher Matchers.hasItemInArray(Object) 
            Matcher Matchers.typeCompatibleWith(Class) 
            Matcher Matchers.contains(Matcher[]) 
            Matcher Matchers.notNullValue() 
            Matcher Matchers.contains(List) 
            Matcher Matchers.hasProperty(String) 
            Matcher Matchers.closeTo(double,double) 
            Matcher Matchers.anything() 
            Matcher Matchers.arrayContaining(Object[]) 
            Matcher Matchers.hasEntry(Matcher,Matcher) 
            AnyOf Matchers.anyOf(Matcher,Matcher,Matcher) 
            Matcher Matchers.startsWith(String) 
            Matcher Matchers.allOf(Matcher,Matcher) 
            Matcher Matchers.isEmptyString() 
            Matcher Matchers.hasSize(Matcher) 
            Matcher Matchers.containsInAnyOrder(Matcher) 
            Matcher Matchers.allOf(Iterable) 
            Matcher Matchers.hasXPath(String) 
            Matcher Matchers.greaterThanOrEqualTo(Comparable) 
            Matcher Matchers.arrayContainingInAnyOrder(Collection) 
            Matcher Matchers.everyItem(Matcher) 
            Matcher Matchers.hasValue(Matcher) 
            AnyOf Matchers.anyOf(Matcher[]) 
            IsArray Matchers.array(Matcher[]) 
            Matcher Matchers.lessThan(Comparable) 
            Matcher Matchers.hasToString(String) 
            Matcher Matchers.emptyIterableOf(Class) 
            Matcher Matchers.containsInAnyOrder(Collection) 
            Matcher Matchers.samePropertyValuesAs(Object) 
            Matcher Matchers.hasItems(Matcher[]) 
            Matcher Matchers.comparesEqualTo(Comparable) 
            Matcher Matchers.theInstance(Object) 
            Matcher Matchers.arrayContainingInAnyOrder(Object[]) 
            Matcher Matchers.empty() 
            Matcher Matchers.hasKey(Object) 
            AnyOf Matchers.anyOf(Matcher,Matcher,Matcher,Matcher,Matcher) 
            Matcher Matchers.any(Class) 
            Matcher Matchers.is(Matcher) 
            Matcher Matchers.stringContainsInOrder(Iterable) 
            Matcher Matchers.emptyCollectionOf(Class) 
            Matcher Matchers.hasItem(Object) 
            Matcher Matchers.iterableWithSize(int) 
            Matcher Matchers.isA(Class) 
            Matcher Matchers.allOf(Matcher,Matcher,Matcher,Matcher) 
            Matcher Matchers.hasXPath(String,Matcher) 
            Matcher Matchers.equalToIgnoringCase(String) 
            Matcher Matchers.allOf(Matcher,Matcher,Matcher) 
            Matcher Matchers.arrayWithSize(int) 
            Matcher Matchers.isIn(Object[]) 
            Matcher Matchers.describedAs(String,Matcher,Object[]) 
            Matcher Matchers.is(Object) 
            Matcher Matchers.hasItemInArray(Matcher) 
            Matcher Matchers.eventFrom(Class,Object) 
            Matcher Matchers.contains(Object[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.ParameterizedTestTest$OneShotIterable
fields: {
           java.util.concurrent.atomic.AtomicBoolean* iterated <_final> 
           java.lang.Iterable* delegate <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.lang.Iterable
         }
objc_protocols: {}
methods: {
            ParameterizedTestTest$OneShotIterable.<init>(Iterable) 
            Iterator ParameterizedTestTest$OneShotIterable.iterator()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 656, column 25]}]}
dummy: false
class org.junit.internal.builders.IgnoredClassRunner
fields: {
           java.lang.Class* clazz <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void IgnoredClassRunner.run(RunNotifier) 
            IgnoredClassRunner.<init>(Class) 
            Description IgnoredClassRunner.getDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithParameterSupplier$SimpleSupplier
fields: {}
statics: {}
supers: {
           class org.junit.experimental.theories.ParameterSupplier
         }
objc_protocols: {}
methods: {
            WithParameterSupplier$SimpleSupplier.<init>() 
            List WithParameterSupplier$SimpleSupplier.getValueSources(ParameterSignature)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 50, column 24]}]}
dummy: false
class org.junit.tests.experimental.theories.ParameterSignatureTest
fields: {}
statics: {
            int ONE <_org.junit.experimental.theories.DataPoint> 
            int ZERO <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterSignatureTest.<clinit>() 
            void ParameterSignatureTest.getType(Method,int) 
            void ParameterSignatureTest.wrapperTypesShouldBeAcceptedAsPrimitiveTypes() 
            void ParameterSignatureTest.integerMethod(Integer) 
            void ParameterSignatureTest.getAnnotations() 
            ParameterSignatureTest.<init>() 
            void ParameterSignatureTest.primitiveTypesShouldBeAcceptedAsWrapperTypes() 
            void ParameterSignatureTest.foo(int) 
            void ParameterSignatureTest.numberMethod(Number) 
            void ParameterSignatureTest.intMethod(int) 
            void ParameterSignatureTest.primitiveTypesShouldBeAcceptedAsWrapperTypeAssignables() 
            Method ParameterSignatureTest.getType()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerTest$NonPublicTestClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParentRunnerTest$NonPublicTestClass.alwaysPasses() 
            ParentRunnerTest$NonPublicTestClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 136, column 17]}]}
dummy: false
class org.junit.runner.FilterOptionIntegrationTest$DummyTestClass0
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            FilterOptionIntegrationTest$DummyTestClass0.<init>() 
            void FilterOptionIntegrationTest$DummyTestClass0.dummyTest()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="org.junit.runner.FilterOptionIntegrationTest$DummyCategory0")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 157, column 24]}]}
dummy: false
class java.util.concurrent.CountDownLatch
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest$1
fields: {
           org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest* this$0 <_final> 
           java.io.PrintStream* fWriter <> 
           int fColumn <>
         }
statics: {}
supers: {
           class org.junit.tests.junit3compatibility.ForwardCompatibilityPrintingTest$TestResultPrinter
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityPrintingTest$1.<init>(ForwardCompatibilityPrintingTest,PrintStream) 
            void ForwardCompatibilityPrintingTest$1.printErrors(TestResult)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 47, column 37]}]}
dummy: false

class org.junit.tests.manipulation.SortableTest$TestClassRunnerIsSortable$Enclosing$A
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SortableTest$TestClassRunnerIsSortable$Enclosing$A.c() 
            SortableTest$TestClassRunnerIsSortable$Enclosing$A.<init>() 
            void SortableTest$TestClassRunnerIsSortable$Enclosing$A.b() 
            void SortableTest$TestClassRunnerIsSortable$Enclosing$A.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 104, column 32]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.FailingDataPointMethods$HasFailingSingleDataPointMethod
fields: {}
statics: {
            int num <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void FailingDataPointMethods$HasFailingSingleDataPointMethod.<clinit>() 
            void FailingDataPointMethods$HasFailingSingleDataPointMethod.theory(int) 
            FailingDataPointMethods$HasFailingSingleDataPointMethod.<init>() 
            int FailingDataPointMethods$HasFailingSingleDataPointMethod.failingDataPoint()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryFilterFactoryTest$DummyFilter
fields: {}
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            boolean CategoryFilterFactoryTest$DummyFilter.shouldRun(Description) 
            CategoryFilterFactoryTest$DummyFilter.<init>() 
            CategoryFilterFactoryTest$DummyFilter.<init>(CategoryFilterFactoryTest$1) 
            String CategoryFilterFactoryTest$DummyFilter.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 55, column 25]}]}
dummy: false
class org.junit.rules.MethodRulesTest$CallsMethodReturningRuleOnlyOnce$Dummy
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.MethodRule
         }
objc_protocols: {}
methods: {
            MethodRulesTest$CallsMethodReturningRuleOnlyOnce$Dummy.<init>() 
            Statement MethodRulesTest$CallsMethodReturningRuleOnlyOnce$Dummy.apply(Statement,FrameworkMethod,Object) 
            MethodRulesTest$CallsMethodReturningRuleOnlyOnce$Dummy.<init>(MethodRulesTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 383, column 29]}]}
dummy: false
class org.junit.rules.StopwatchTest$AbstractStopwatchTest$1
fields: {
           org.junit.rules.StopwatchTest$AbstractStopwatchTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.Stopwatch$Clock
         }
objc_protocols: {}
methods: {
            long StopwatchTest$AbstractStopwatchTest$1.nanoTime() 
            StopwatchTest$AbstractStopwatchTest$1.<init>(StopwatchTest$AbstractStopwatchTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 58, column 72]}]}
dummy: false
class org.junit.rules.ExternalResource$1
fields: {
           org.junit.runners.model.Statement* val$base <_final> 
           org.junit.rules.ExternalResource* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            ExternalResource$1.<init>(ExternalResource,Statement) 
            void ExternalResource$1.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 47, column 31]}]}
dummy: false
class org.junit.tests.manipulation.FilterableTest$FilteredRunner
fields: {
           java.util.List* runners <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.Parameterized
         }
objc_protocols: {}
methods: {
            FilterableTest$FilteredRunner.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 24]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$NonPublicSuiteWithBeforeClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$NonPublicSuiteWithBeforeClass.<init>() 
            void SuiteTest$NonPublicSuiteWithBeforeClass.doesNothing()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.SuiteTest$TestA")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 52, column 17]}]}
dummy: false
class junit.textui.ResultPrinter
fields: {
           java.io.PrintStream* fWriter <> 
           int fColumn <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.TestListener
         }
objc_protocols: {}
methods: {
            void ResultPrinter.printFooter(TestResult) 
            void ResultPrinter.printHeader(long) 
            void ResultPrinter.addFailure(Test,AssertionFailedError) 
            void ResultPrinter.printDefect(TestFailure,int) 
            PrintStream ResultPrinter.getWriter() 
            void ResultPrinter.startTest(Test) 
            void ResultPrinter.printDefects(Enumeration,int,String) 
            void ResultPrinter.endTest(Test) 
            ResultPrinter.<init>(PrintStream) 
            void ResultPrinter.printDefectTrace(TestFailure) 
            String ResultPrinter.elapsedTimeAsString(long) 
            void ResultPrinter.printErrors(TestResult) 
            void ResultPrinter.printWaitPrompt() 
            void ResultPrinter.printDefectHeader(TestFailure,int) 
            void ResultPrinter.print(TestResult,long) 
            void ResultPrinter.addError(Test,Throwable) 
            void ResultPrinter.printFailures(TestResult)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 14, column 13]}]}
dummy: false
class org.junit.experimental.categories.JavadocTest$B
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JavadocTest$B.<init>() 
            void JavadocTest$B.d()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="org.junit.experimental.categories.JavadocTest$SlowTests, org.junit.experimental.categories.JavadocTest$FastTests")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 24]}]}
dummy: false
class org.junit.tests.running.core.AllCoreTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllCoreTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.core.CommandLineTest, org.junit.tests.running.core.JUnitCoreReturnsCorrectExitCodeTest, org.junit.tests.running.core.SystemExitTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$ErrorInBeforeClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotationTest$ErrorInBeforeClass.<init>() 
            void AnnotationTest$ErrorInBeforeClass.before() 
            void AnnotationTest$ErrorInBeforeClass.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 364, column 24]}]}
dummy: false
class org.junit.tests.manipulation.OrderWithTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            OrderWithTest.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 18, column 13]}]}
dummy: false
class org.junit.tests.running.classes.RunWithTest$ExampleTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RunWithTest$ExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.running.classes.RunWithTest$ExampleRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 24]}]}
dummy: false
class junit.tests.framework.TestListenerTest$1
fields: {
           junit.tests.framework.TestListenerTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestListenerTest$1.<init>(TestListenerTest,String) 
            void TestListenerTest$1.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 47, column 45]}]}
dummy: false
class org.junit.tests.assertion.AssertionTest$2
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.function.ThrowingRunnable
         }
objc_protocols: {}
methods: {
            void AssertionTest$2.run() 
            AssertionTest$2.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 992, column 38]}]}
dummy: false
class org.junit.internal.MethodSorterTest$DummySortJvm
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodSorterTest$DummySortJvm.delta() 
            Object MethodSorterTest$DummySortJvm.alpha(int,double,Thread) 
            MethodSorterTest$DummySortJvm.<init>() 
            int MethodSorterTest$DummySortJvm.gamma() 
            void MethodSorterTest$DummySortJvm.epsilon() 
            void MethodSorterTest$DummySortJvm.beta(int[][]) 
            void MethodSorterTest$DummySortJvm.gamma(boolean)
          }
exported_obj_methods: {}
annots: {<_org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.JVM")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 124, column 17]}]}
dummy: false
class org.junit.rules.TestRuleTest$NoRulesTest
fields: {
           int x <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TestRuleTest$NoRulesTest.nothing() 
            TestRuleTest$NoRulesTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 130, column 24]}]}
dummy: false
class org.junit.runner.manipulation.Sorter$1
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int Sorter$1.compare(Object,Object) 
            Sorter$1.<init>() 
            int Sorter$1.compare(Description,Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 22, column 79]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithParameterSupplier$TestClassUsingParameterSupplier
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithParameterSupplier$TestClassUsingParameterSupplier.theoryMethod(String) 
            WithParameterSupplier$TestClassUsingParameterSupplier.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 67, column 24]}]}
dummy: false
class java.util.Date
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.rules.ErrorCollectorTest$CheckCallableThatDoesNotThrowAnException$1
fields: {
           org.junit.rules.ErrorCollectorTest$CheckCallableThatDoesNotThrowAnException* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            Object ErrorCollectorTest$CheckCallableThatDoesNotThrowAnException$1.call() 
            ErrorCollectorTest$CheckCallableThatDoesNotThrowAnException$1.<init>(ErrorCollectorTest$CheckCallableThatDoesNotThrowAnException)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 259, column 75]}]}
dummy: false
class org.junit.runners.ParentRunner$4
fields: {
           java.lang.Object* val$each <_final> 
           org.junit.runner.notification.RunNotifier* val$notifier <_final> 
           org.junit.runners.ParentRunner* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.lang.Runnable
         }
objc_protocols: {}
methods: {
            ParentRunner$4.<init>(ParentRunner,Object,RunNotifier) 
            void ParentRunner$4.run()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 329, column 57]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints$TheoryTestClassWithSpecificBooleanDataPoint
fields: {}
statics: {
            _Bool value <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithAutoGeneratedDataPoints$TheoryTestClassWithSpecificBooleanDataPoint.<clinit>() 
            void WithAutoGeneratedDataPoints$TheoryTestClassWithSpecificBooleanDataPoint.theory(boolean) 
            WithAutoGeneratedDataPoints$TheoryTestClassWithSpecificBooleanDataPoint.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 55, column 24]}]}
dummy: false
class java.util.Properties
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runner.Computer$1
fields: {
           org.junit.runners.model.RunnerBuilder* val$builder <_final> 
           org.junit.runner.Computer* this$0 <_final> 
           java.util.Set* parents <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.RunnerBuilder
         }
objc_protocols: {}
methods: {
            Computer$1.<init>(Computer,RunnerBuilder) 
            Runner Computer$1.runnerForClass(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 45]}]}
dummy: false
class java.util.concurrent.atomic.AtomicLong
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class java.lang.reflect.InvocationTargetException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.validator.AnnotationsValidator$FieldValidator
fields: {}
statics: {
            org.junit.validator.AnnotationValidatorFactory* ANNOTATION_VALIDATOR_FACTORY <_final>
          }
supers: {
           class org.junit.validator.AnnotationsValidator$AnnotatableValidator
         }
objc_protocols: {}
methods: {
            AnnotationsValidator$FieldValidator.<init>() 
            List AnnotationsValidator$FieldValidator.validateAnnotatable(AnnotationValidator,Annotatable) 
            Iterable AnnotationsValidator$FieldValidator.getAnnotatablesForTestClass(TestClass) 
            List AnnotationsValidator$FieldValidator.validateAnnotatable(AnnotationValidator,FrameworkField) 
            AnnotationsValidator$FieldValidator.<init>(AnnotationsValidator$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 107, column 25]}]}
dummy: false
class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$OverrideRulesRunner
fields: {
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerOverrideTest$OverrideRulesRunner.<init>(Class) 
            List BlockJUnit4ClassRunnerOverrideTest$OverrideRulesRunner.rules(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 35, column 24]}]}
dummy: false

class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest$ClassWithInvalidMethod
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void JUnit38ClassRunnerTest$ClassWithInvalidMethod.testInvalid() 
            JUnit38ClassRunnerTest$ClassWithInvalidMethod.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 80, column 24]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$Y
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.experimental.categories.MultiCategoryTest$B
         }
objc_protocols: {}
methods: {
            MultiCategoryTest$Y.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 101, column 24]}]}
dummy: false
class org.junit.rules.MethodRulesTest$ExampleTest
fields: {
           org.junit.rules.MethodRule* example <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodRulesTest$ExampleTest.nothing() 
            MethodRulesTest$ExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 24]}]}
dummy: false
class org.junit.tests.running.methods.ParameterizedTestMethodTest$SubWrong
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.methods.ParameterizedTestMethodTest$SuperWrong
         }
objc_protocols: {}
methods: {
            void ParameterizedTestMethodTest$SubWrong.justFine() 
            ParameterizedTestMethodTest$SubWrong.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 145, column 24]}]}
dummy: false
class org.junit.internal.runners.statements.FailOnTimeoutTest$2
fields: {
           java.lang.ThreadGroup* val$outerThreadGroup <_final> 
           org.junit.internal.runners.statements.FailOnTimeoutTest* this$0 <_final> 
           java.util.concurrent.atomic.AtomicBoolean* val$statementWasExecuted <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void FailOnTimeoutTest$2.evaluate() 
            FailOnTimeoutTest$2.<init>(FailOnTimeoutTest,AtomicBoolean,ThreadGroup)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 216, column 68]}]}
dummy: false
class java.lang.IndexOutOfBoundsException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.internal.runners.JUnit4ClassRunner
fields: {
           java.util.List* testMethods <_final> 
           org.junit.internal.runners.TestClass* testClass <>
         }
statics: {}
supers: {
           class org.junit.runner.Runner 
           class org.junit.runner.manipulation.Filterable 
           class org.junit.runner.manipulation.Sortable
         }
objc_protocols: {}
methods: {
            List JUnit4ClassRunner.getTestMethods() 
            void JUnit4ClassRunner.run(RunNotifier) 
            String JUnit4ClassRunner.testName(Method) 
            Annotation[] JUnit4ClassRunner.classAnnotations() 
            void JUnit4ClassRunner.testAborted(RunNotifier,Description,Throwable) 
            String JUnit4ClassRunner.getName() 
            void JUnit4ClassRunner.filter(Filter) 
            void JUnit4ClassRunner.runMethods(RunNotifier) 
            Annotation[] JUnit4ClassRunner.testAnnotations(Method) 
            TestClass JUnit4ClassRunner.getTestClass() 
            void JUnit4ClassRunner.validate() 
            JUnit4ClassRunner.<init>(Class) 
            TestMethod JUnit4ClassRunner.wrapMethod(Method) 
            Object JUnit4ClassRunner.createTest() 
            void JUnit4ClassRunner.invokeTestMethod(Method,RunNotifier) 
            void JUnit4ClassRunner.sort(Sorter) 
            Description JUnit4ClassRunner.getDescription() 
            Description JUnit4ClassRunner.methodDescription(Method)
          }
exported_obj_methods: {}
annots: {<_java.lang.Deprecated>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 28, column 13]}]}
dummy: false

class org.junit.tests.experimental.AssumptionTest$HasAssumeWithMessageAndCause
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AssumptionTest$HasAssumeWithMessageAndCause.testMethod() 
            AssumptionTest$HasAssumeWithMessageAndCause.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 264, column 24]}]}
dummy: false
class org.junit.rules.ClassRulesTest$ExampleTestWithCustomClassRule
fields: {}
statics: {
            org.junit.rules.ClassRulesTest$CustomCounter* counter <_org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ClassRulesTest$ExampleTestWithCustomClassRule.<clinit>() 
            void ClassRulesTest$ExampleTestWithCustomClassRule.secondTest() 
            ClassRulesTest$ExampleTestWithCustomClassRule.<init>() 
            void ClassRulesTest$ExampleTestWithCustomClassRule.firstTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 88, column 24]}]}
dummy: false
class java.lang.System
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.experimental.theories.runner.WithExtendedParameterSources$ShouldFilterOutNullElementsFromDataPointArrays
fields: {}
statics: {
            java.lang.String*[_*_](*) SOME_NULLS <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithExtendedParameterSources$ShouldFilterOutNullElementsFromDataPointArrays.<clinit>() 
            void WithExtendedParameterSources$ShouldFilterOutNullElementsFromDataPointArrays.allStringsAreNonNull(String) 
            WithExtendedParameterSources$ShouldFilterOutNullElementsFromDataPointArrays.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 57, column 24]}]}
dummy: false
class org.junit.experimental.max.CouldNotReadCoreException
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            CouldNotReadCoreException.<init>(Throwable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 13]}]}
dummy: false
class org.junit.internal.runners.MethodRoadie$1$1
fields: {
           org.junit.internal.runners.MethodRoadie$1* this$1 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            MethodRoadie$1$1.<init>(MethodRoadie$1) 
            Object MethodRoadie$1$1.call()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 62, column 67]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerFilteringTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParentRunnerFilteringTest.testRunSuiteFiltering() 
            void ParentRunnerFilteringTest.testCountSuiteFiltering() 
            Filter ParentRunnerFilteringTest.notThisMethodName(String) 
            ParentRunnerFilteringTest.<init>() 
            void ParentRunnerFilteringTest.testSuiteFiltering() 
            void ParentRunnerFilteringTest.testCountClassFiltering() 
            void ParentRunnerFilteringTest.testSuiteFilteringWithUnmodifiableChildList()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 30, column 13]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$C
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [Some line 23, column 21]}]}
dummy: false
class org.junit.runners.parameterized.ParametersRunnerFactory
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            Runner ParametersRunnerFactory.createRunnerForTestWithParameters(TestWithParameters)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false
class org.junit.internal.MethodSorterTest$DummySortWithNameAsc
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodSorterTest$DummySortWithNameAsc.delta() 
            Object MethodSorterTest$DummySortWithNameAsc.alpha(int,double,Thread) 
            MethodSorterTest$DummySortWithNameAsc.<init>() 
            int MethodSorterTest$DummySortWithNameAsc.gamma() 
            void MethodSorterTest$DummySortWithNameAsc.epsilon() 
            void MethodSorterTest$DummySortWithNameAsc.beta(int[][]) 
            void MethodSorterTest$DummySortWithNameAsc.gamma(boolean)
          }
exported_obj_methods: {}
annots: {<_org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.NAME_ASCENDING")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 154, column 17]}]}
dummy: false
class org.junit.rules.TestWatcherTest$CallbackArguments$Failed
fields: {
           org.junit.rules.TestRule* watcher <_final _org.junit.Rule>
         }
statics: {
            org.junit.runner.Description* catchedDescription <> 
            java.lang.Throwable* catchedThrowable <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Throwable TestWatcherTest$CallbackArguments$Failed.access$500() 
            TestWatcherTest$CallbackArguments$Failed.<init>() 
            Description TestWatcherTest$CallbackArguments$Failed.access$402(Description) 
            Description TestWatcherTest$CallbackArguments$Failed.access$400() 
            void TestWatcherTest$CallbackArguments$Failed.test() 
            Throwable TestWatcherTest$CallbackArguments$Failed.access$502(Throwable)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 214, column 28]}]}
dummy: false
class org.junit.experimental.categories.ExcludeCategories
fields: {}
statics: {}
supers: {
           class org.junit.experimental.categories.CategoryFilterFactory
         }
objc_protocols: {}
methods: {
            Filter ExcludeCategories.createFilter(List) 
            ExcludeCategories.<init>() 
            Filter ExcludeCategories.createFilter(FilterFactoryParams)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 26, column 19]}]}
dummy: false
class org.junit.rules.ErrorCollectorTest$CheckCallableWithFailingAssumption$1
fields: {
           org.junit.rules.ErrorCollectorTest$CheckCallableWithFailingAssumption* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object 
           class java.util.concurrent.Callable
         }
objc_protocols: {}
methods: {
            Object ErrorCollectorTest$CheckCallableWithFailingAssumption$1.call() 
            ErrorCollectorTest$CheckCallableWithFailingAssumption$1.<init>(ErrorCollectorTest$CheckCallableWithFailingAssumption)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 244, column 59]}]}
dummy: false
class junit.tests.runner.StackFilterTest
fields: {
           java.lang.String* fFiltered <> 
           java.lang.String* fUnfiltered <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            StackFilterTest.<init>() 
            void StackFilterTest.testFilter() 
            void StackFilterTest.setUp()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.ForwardCompatibilityTest$NoTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ForwardCompatibilityTest$NoTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.tests.junit3compatibility.ForwardCompatibilityTest$MarkerRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 239, column 24]}]}
dummy: false
class org.junit.tests.ObjectContractTest
fields: {}
statics: {
            java.lang.Object*[_*_](*) objects <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ObjectContractTest.<clinit>() 
            void ObjectContractTest.equalsThrowsNoException(Object,Object) 
            ObjectContractTest.<init>() 
            Method ObjectContractTest.toStringMethod() 
            void ObjectContractTest.equalsMeansEqualHashCodes(Object,Object)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 19, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.SuccessfulWithDataPointFields$BeforeAndAfterOnSameInstance
fields: {
           int befores <>
         }
statics: {
            java.lang.String* A <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void SuccessfulWithDataPointFields$BeforeAndAfterOnSameInstance.<clinit>() 
            void SuccessfulWithDataPointFields$BeforeAndAfterOnSameInstance.stringsAreOK(String) 
            SuccessfulWithDataPointFields$BeforeAndAfterOnSameInstance.<init>() 
            void SuccessfulWithDataPointFields$BeforeAndAfterOnSameInstance.incrementBefore()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 36, column 24]}]}
dummy: false
class org.junit.runners.model.TestClassTest$SimpleClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$SimpleClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 80, column 24]}]}
dummy: false
class org.junit.internal.runners.statements.ExpectExceptionTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest$OuterClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerTest$OuterClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false
class org.hamcrest.Description$NullDescription
fields: {}
statics: {
            org.hamcrest.Description* NONE <>
          }
supers: {
           class java.lang.Object 
           class org.hamcrest.Description
         }
objc_protocols: {}
methods: {
            Description Description$NullDescription.appendValue(Object) 
            Description Description$NullDescription.appendValueList(String,String,String,Object[]) 
            Description$NullDescription.<init>() 
            Description Description$NullDescription.appendDescriptionOf(SelfDescribing) 
            String Description$NullDescription.toString() 
            Description Description$NullDescription.appendValueList(String,String,String,Iterable) 
            Description Description$NullDescription.appendList(String,String,String,Iterable) 
            Description Description$NullDescription.appendText(String)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.notification.SynchronizedRunListener
fields: {
           org.junit.runner.notification.RunListener* listener <_final> 
           java.lang.Object* monitor <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void SynchronizedRunListener.testRunFinished(Result) 
            void SynchronizedRunListener.testFailure(Failure) 
            void SynchronizedRunListener.testSuiteFinished(Description) 
            void SynchronizedRunListener.testIgnored(Description) 
            void SynchronizedRunListener.testSuiteStarted(Description) 
            boolean SynchronizedRunListener.equals(Object) 
            String SynchronizedRunListener.toString() 
            void SynchronizedRunListener.testAssumptionFailure(Failure) 
            int SynchronizedRunListener.hashCode() 
            void SynchronizedRunListener.testStarted(Description) 
            SynchronizedRunListener.<init>(RunListener,Object) 
            void SynchronizedRunListener.testFinished(Description) 
            void SynchronizedRunListener.testRunStarted(Description)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.notification.RunListener$ThreadSafe>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.model.FrameworkMethod$1
fields: {
           java.lang.Object* val$target <_final> 
           org.junit.runners.model.FrameworkMethod* this$0 <_final> 
           java.lang.Object*[_*_](*) val$params <_final>
         }
statics: {}
supers: {
           class org.junit.internal.runners.model.ReflectiveCallable
         }
objc_protocols: {}
methods: {
            Object FrameworkMethod$1.runReflectiveCall() 
            FrameworkMethod$1.<init>(FrameworkMethod,Object,Object[])
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 56, column 40]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints$TheoryTestClassWithSpecificEnumDataPoint
fields: {}
statics: {
            org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints$ENUM* value <_org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithAutoGeneratedDataPoints$TheoryTestClassWithSpecificEnumDataPoint.<clinit>() 
            WithAutoGeneratedDataPoints$TheoryTestClassWithSpecificEnumDataPoint.<init>() 
            void WithAutoGeneratedDataPoints$TheoryTestClassWithSpecificEnumDataPoint.theory(WithAutoGeneratedDataPoints$ENUM)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 38, column 24]}]}
dummy: false
class java.lang.ClassCastException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$CreateTestDefersToNoArgCreateTestTest
fields: {
           _Bool createTestCalled <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            BlockJUnit4ClassRunnerOverrideTest$CreateTestDefersToNoArgCreateTestTest.<init>() 
            void BlockJUnit4ClassRunnerOverrideTest$CreateTestDefersToNoArgCreateTestTest.testCreateTestCalled()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.rules.BlockJUnit4ClassRunnerOverrideTest$CreateTestDefersToNoArgCreateTestRunner")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 162, column 24]}]}
dummy: false

class org.junit.tests.junit3compatibility.JUnit4TestAdapterTest$TestSuite4ForTestSuite3
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnit4TestAdapterTest$TestSuite4ForTestSuite3.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.junit3compatibility.JUnit4TestAdapterTest$TestSuite3")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 75, column 24]}]}
dummy: false
class org.junit.internal.management.FakeRuntimeMXBean
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.management.RuntimeMXBean
         }
objc_protocols: {}
methods: {
            List FakeRuntimeMXBean.getInputArguments() 
            FakeRuntimeMXBean.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 9, column 6]}]}
dummy: false
class org.junit.internal.MethodSorterTest$DummySortWithDefault
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MethodSorterTest$DummySortWithDefault.delta() 
            Object MethodSorterTest$DummySortWithDefault.alpha(int,double,Thread) 
            MethodSorterTest$DummySortWithDefault.<init>() 
            int MethodSorterTest$DummySortWithDefault.gamma() 
            void MethodSorterTest$DummySortWithDefault.epsilon() 
            void MethodSorterTest$DummySortWithDefault.beta(int[][]) 
            void MethodSorterTest$DummySortWithDefault.gamma(boolean)
          }
exported_obj_methods: {}
annots: {<_org.junit.FixMethodOrder(value="org.junit.runners.MethodSorters.DEFAULT")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 94, column 17]}]}
dummy: false
class junit.tests.framework.TestCaseTest$1
fields: {
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TestCaseTest$1.<init>(TestCaseTest,String) 
            void TestCaseTest$1.runTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 37, column 47]}]}
dummy: false
class junit.tests.runner.TextRunnerSingleMethodTest
fields: {
           java.lang.String* fName <>
         }
statics: {
            _Bool fgWasInvoked <>
          }
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            TextRunnerSingleMethodTest.<init>() 
            void TextRunnerSingleMethodTest.testSingle()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false

class org.junit.tests.experimental.theories.internal.AllMembersSupplierTest$HasDataPointsWithObjectParameter
fields: {}
statics: {
            java.lang.Object*[_*_](*) objectField <_org.junit.experimental.theories.DataPoints>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AllMembersSupplierTest$HasDataPointsWithObjectParameter.<clinit>() 
            AllMembersSupplierTest$HasDataPointsWithObjectParameter.<init>() 
            void AllMembersSupplierTest$HasDataPointsWithObjectParameter.theory(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 80, column 24]}]}
dummy: false
class junit.samples.money.IMoney
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            IMoney IMoney.negate() 
            IMoney IMoney.add(IMoney) 
            void IMoney.appendTo(MoneyBag) 
            IMoney IMoney.addMoneyBag(MoneyBag) 
            boolean IMoney.isZero() 
            IMoney IMoney.subtract(IMoney) 
            IMoney IMoney.addMoney(Money) 
            IMoney IMoney.multiply(int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [Some line 6, column 17]}]}
dummy: false

class org.junit.experimental.categories.MultiCategoryTest$InheritanceAllAnyTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MultiCategoryTest$InheritanceAllAnyTest.t() 
            void MultiCategoryTest$InheritanceAllAnyTest.z() 
            MultiCategoryTest$InheritanceAllAnyTest.<init>() 
            void MultiCategoryTest$InheritanceAllAnyTest.q() 
            void MultiCategoryTest$InheritanceAllAnyTest.w() 
            void MultiCategoryTest$InheritanceAllAnyTest.y() 
            void MultiCategoryTest$InheritanceAllAnyTest.x() 
            void MultiCategoryTest$InheritanceAllAnyTest.runnable()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 160, column 30]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$NonPublicTestWithClassRule
fields: {}
statics: {
            org.junit.rules.TestRule* temporaryFolder <_org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleMemberValidatorTest$NonPublicTestWithClassRule.<clinit>() 
            RuleMemberValidatorTest$NonPublicTestWithClassRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 66, column 17]}]}
dummy: false
class org.junit.internal.runners.rules.RuleMemberValidator$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.internal.RealSystem
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.internal.JUnitSystem
         }
objc_protocols: {}
methods: {
            RealSystem.<init>() 
            void RealSystem.exit(int) 
            PrintStream RealSystem.out()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.AssumptionViolatedExceptionTest$UnserializableClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String AssumptionViolatedExceptionTest$UnserializableClass.toString() 
            AssumptionViolatedExceptionTest$UnserializableClass.<init>() 
            AssumptionViolatedExceptionTest$UnserializableClass.<init>(AssumptionViolatedExceptionTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 201, column 25]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithParameterSupplier$TestClassUsingSupplierWithUnknownConstructor
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            WithParameterSupplier$TestClassUsingSupplierWithUnknownConstructor.<init>() 
            void WithParameterSupplier$TestClassUsingSupplierWithUnknownConstructor.theory(String)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.theories.Theories")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 98, column 24]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$Ancestor
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$Ancestor.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.experimental.categories.Category(value="org.junit.experimental.categories.CategoryTest$SlowTests")>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 414, column 33]}]}
dummy: false
class org.junit.experimental.categories.MultiCategoryTest$A
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [Some line 21, column 21]}]}
dummy: false
class org.junit.tests.manipulation.AllManipulationTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllManipulationTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.manipulation.FilterableTest, org.junit.tests.manipulation.FilterTest, org.junit.tests.manipulation.OrderableTest, org.junit.tests.manipulation.OrderWithTest, org.junit.tests.manipulation.SingleMethodTest, org.junit.tests.manipulation.SortableTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.OldTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            OldTests.<init>() 
            Test OldTests.suite()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.AllTests")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 8, column 13]}]}
dummy: false
class org.junit.tests.listening.TextListenerTest$Time
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TextListenerTest$Time.<init>() 
            void TextListenerTest$Time.time()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 55, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.AssumingInTheoriesTest$TheoryWithNoUnassumedParameters
fields: {}
statics: {
            _Bool FALSE <_final _org.junit.experimental.theories.DataPoint>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AssumingInTheoriesTest$TheoryWithNoUnassumedParameters.<init>() 
            void AssumingInTheoriesTest$TheoryWithNoUnassumedParameters.theoryWithNoUnassumedParameters(boolean)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 24]}]}
dummy: false
class org.junit.rules.TemporaryFolder
fields: {
           java.io.File* parentFolder <_final> 
           java.io.File* folder <> 
           _Bool assureDeletion <_final>
         }
statics: {
            java.lang.String* TMP_PREFIX <_final> 
            int TEMP_DIR_ATTEMPTS <_final>
          }
supers: {
           class org.junit.rules.ExternalResource
         }
objc_protocols: {}
methods: {
            TemporaryFolder.<init>(File) 
            File TemporaryFolder.newFolder(String[]) 
            File TemporaryFolder.createTemporaryFolderIn(File) 
            File TemporaryFolder.newFolder(String) 
            boolean TemporaryFolder.recursiveDelete(File) 
            void TemporaryFolder.create() 
            File TemporaryFolder.newFile(String) 
            TemporaryFolder.<init>() 
            File TemporaryFolder.createTemporaryFolderWithFileApi(File) 
            void TemporaryFolder.after() 
            boolean TemporaryFolder.tryDelete() 
            TemporaryFolder$Builder TemporaryFolder.builder() 
            File TemporaryFolder.getRoot() 
            File TemporaryFolder.newFolder() 
            File TemporaryFolder.createTemporaryFolderWithNioApi(File) 
            void TemporaryFolder.before() 
            void TemporaryFolder.delete() 
            File TemporaryFolder.newFile() 
            TemporaryFolder.<init>(TemporaryFolder$Builder)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 45, column 13]}]}
dummy: false
class java.util.Comparator
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runners.model.TestClassTest$SubclassWithField
fields: {
           org.junit.rules.TestRule* x <_org.junit.Rule> 
           org.junit.rules.TestRule* x <_org.junit.Rule>
         }
statics: {}
supers: {
           class org.junit.runners.model.TestClassTest$SuperclassWithField
         }
objc_protocols: {}
methods: {
            TestClassTest$SubclassWithField.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 43, column 24]}]}
dummy: false
class org.junit.runner.AllRunnerTests
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AllRunnerTests.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.runner.notification.AllNotificationTests, org.junit.runner.FilterFactoriesTest, org.junit.runner.FilterOptionIntegrationTest, org.junit.runner.OrderWithValidatorTest, org.junit.runner.JUnitCommandLineParseResultTest, org.junit.runner.JUnitCoreTest, org.junit.runner.RequestTest")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 17, column 13]}]}
dummy: false

class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest$AnnotatedTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void JUnit38ClassRunnerTest$AnnotatedTest.foo() 
            JUnit38ClassRunnerTest$AnnotatedTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 39, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$BadNumberOfAnnotatedFieldTest
fields: {
           int fInput <_org.junit.runners.Parameterized$Parameter> 
           int fExpected <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            int ParameterizedTestTest$BadNumberOfAnnotatedFieldTest.fib(int) 
            ParameterizedTestTest$BadNumberOfAnnotatedFieldTest.<init>() 
            void ParameterizedTestTest$BadNumberOfAnnotatedFieldTest.test() 
            Collection ParameterizedTestTest$BadNumberOfAnnotatedFieldTest.data()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 203, column 24]}]}
dummy: false

class org.junit.tests.manipulation.OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$Unordered
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$Unordered.c() 
            OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$Unordered.<init>() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$Unordered.b() 
            void OrderWithTest$TestClassRunnerIsOrderableViaOrderWith$Unordered.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 28]}]}
dummy: false
class org.junit.tests.running.classes.RunWithTest$BadRunner
fields: {}
statics: {}
supers: {
           class org.junit.runner.Runner
         }
objc_protocols: {}
methods: {
            void RunWithTest$BadRunner.run(RunNotifier) 
            RunWithTest$BadRunner.<init>() 
            Description RunWithTest$BadRunner.getDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 65, column 24]}]}
dummy: false
class org.junit.experimental.theories.Theories$TheoryAnchor$2
fields: {
           org.junit.runners.model.FrameworkMethod* val$method <_final> 
           org.junit.experimental.theories.internal.Assignments* val$complete <_final> 
           org.junit.experimental.theories.Theories$TheoryAnchor* this$0 <_final> 
           java.lang.Object* val$freshInstance <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            Theories$TheoryAnchor$2.<init>(Theories$TheoryAnchor,Assignments,FrameworkMethod,Object) 
            void Theories$TheoryAnchor$2.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 270, column 35]}]}
dummy: false
class org.junit.rules.MethodRulesTest$1
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.validator.PublicClassValidatorTest$PublicClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            PublicClassValidatorTest$PublicClass.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 16, column 24]}]}
dummy: false
class org.junit.tests.manipulation.ReverseAlphanumericOrdering
fields: {
           java.util.Comparator* comparator <_final>
         }
statics: {
            java.lang.String* CONSTRUCTOR_ERROR_FORMAT <_final>
          }
supers: {
           class org.junit.tests.manipulation.ComparatorBasedOrdering 
           class org.junit.runner.manipulation.Ordering$Factory
         }
objc_protocols: {}
methods: {
            ReverseAlphanumericOrdering.<init>() 
            Ordering ReverseAlphanumericOrdering.create(Ordering$Context)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.Result$SerializedForm
fields: {
           long fRunTime <_final> 
           java.util.List* fFailures <_final> 
           java.util.concurrent.atomic.AtomicInteger* fIgnoreCount <_final> 
           java.util.concurrent.atomic.AtomicInteger* assumptionFailureCount <_final> 
           long fStartTime <_final> 
           java.util.concurrent.atomic.AtomicInteger* fCount <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Object 
           class java.io.Serializable
         }
objc_protocols: {}
methods: {
            AtomicInteger Result$SerializedForm.access$100(Result$SerializedForm) 
            void Result$SerializedForm.serialize(ObjectOutputStream) 
            Result$SerializedForm.<init>(ObjectInputStream$GetField) 
            List Result$SerializedForm.access$300(Result$SerializedForm) 
            long Result$SerializedForm.access$500(Result$SerializedForm) 
            AtomicInteger Result$SerializedForm.access$200(Result$SerializedForm) 
            Result$SerializedForm Result$SerializedForm.deserialize(ObjectInputStream) 
            AtomicInteger Result$SerializedForm.access$000(Result$SerializedForm) 
            long Result$SerializedForm.access$400(Result$SerializedForm) 
            Result$SerializedForm.<init>(Result)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 172, column 25]}]}
dummy: false
class org.junit.validator.ValidateWith
fields: {}
statics: {}
supers: {
           class java.lang.annotation.Annotation
         }
objc_protocols: {}
methods: {
            Class ValidateWith.value()
          }
exported_obj_methods: {}
annots: {<_java.lang.annotation.Retention(value="java.lang.annotation.RetentionPolicy.RUNTIME") _java.lang.annotation.Target(value="java.lang.annotation.ElementType.ANNOTATION_TYPE") _java.lang.annotation.Inherited>}
java_class_info: {[Some {kind= Interface; loc= [None]}]}
dummy: false

class org.junit.rules.ExpectedExceptionTest$ExpectAssertionErrorWhichIsNotThrown
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ExpectAssertionErrorWhichIsNotThrown.fails() 
            ExpectedExceptionTest$ExpectAssertionErrorWhichIsNotThrown.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 258, column 24]}]}
dummy: false

class org.junit.rules.ExpectedExceptionTest$ErrorCollectorShouldFailAlthoughExpectedExceptionDoesNot
fields: {
           org.junit.rules.ErrorCollector* collector <_org.junit.Rule> 
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedExceptionTest$ErrorCollectorShouldFailAlthoughExpectedExceptionDoesNot.<init>() 
            void ExpectedExceptionTest$ErrorCollectorShouldFailAlthoughExpectedExceptionDoesNot.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 371, column 24]}]}
dummy: false
class org.junit.tests.running.classes.ParentRunnerFilteringTest$ExampleTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParentRunnerFilteringTest$ExampleTest.test1() 
            ParentRunnerFilteringTest$ExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 74, column 24]}]}
dummy: false
class org.junit.runner.notification.Failure
fields: {
           java.lang.Throwable* fThrownException <_final> 
           org.junit.runner.Description* fDescription <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Object 
           class java.io.Serializable
         }
objc_protocols: {}
methods: {
            Failure.<init>(Description,Throwable) 
            String Failure.getMessage() 
            String Failure.getTestHeader() 
            String Failure.getTrace() 
            String Failure.toString() 
            String Failure.getTrimmedTrace() 
            Throwable Failure.getException() 
            Description Failure.getDescription()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$OneFastSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$OneFastSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoryTest$SlowTests") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$OneFast")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 260, column 24]}]}
dummy: false
class org.junit.tests.running.methods.InheritedTestTest$Super
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void InheritedTestTest$Super.nothing() 
            InheritedTestTest$Super.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= AbstractClass; loc= [Some line 13, column 33]}]}
dummy: false

class org.junit.tests.experimental.max.MaxStarterTest$HalfMalformedJUnit38TestMethod
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            MaxStarterTest$HalfMalformedJUnit38TestMethod.<init>() 
            void MaxStarterTest$HalfMalformedJUnit38TestMethod.testNothing() 
            void MaxStarterTest$HalfMalformedJUnit38TestMethod.testSomething()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 264, column 24]}]}
dummy: false

class org.junit.tests.experimental.theories.runner.WithUnresolvedGenericTypeVariablesOnTheoryParms
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void WithUnresolvedGenericTypeVariablesOnTheoryParms.whereTypeVariableIsOnTheoryParm() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms.whereTypeVariableIsOnArrayTypeOnTheoryParm() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms.whereTypeVariableIsOnWildcardUpperBoundOnTheoryParm() 
            WithUnresolvedGenericTypeVariablesOnTheoryParms.<init>() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms.whereTypeVariableIsOnTheoryClass() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms.whereTypeVariableIsOnParameterizedTheoryParm() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms.whereTypeVariableIsOnComponentOfArrayTypeOnTheoryParm() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms.whereTypeVariableIsOnWildcardLowerBoundOnTheoryParm() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms.whereTypeVariableIsOnTheTheory() 
            void WithUnresolvedGenericTypeVariablesOnTheoryParms.whereTypeVariablesAbound()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false
class junit.framework.TestSuite
fields: {
           java.util.Vector* fTests <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class junit.framework.Test
         }
objc_protocols: {}
methods: {
            void TestSuite.run(TestResult) 
            boolean TestSuite.isTestMethod(Method) 
            void TestSuite.setName(String) 
            TestSuite.<init>(Class,String) 
            void TestSuite.addTestSuite(Class) 
            int TestSuite.testCount() 
            TestSuite.<init>(Class[]) 
            TestSuite.<init>(String) 
            void TestSuite.addTestMethod(Method,List,Class) 
            String TestSuite.getName() 
            TestSuite.<init>() 
            Constructor TestSuite.getTestConstructor(Class) 
            int TestSuite.countTestCases() 
            String TestSuite.toString() 
            Test TestSuite.createTest(Class,String) 
            void TestSuite.addTestsFromTestCase(Class) 
            Enumeration TestSuite.tests() 
            void TestSuite.addTest(Test) 
            TestSuite.<init>(Class) 
            void TestSuite.runTest(Test,TestResult) 
            TestSuite.<init>(Class[],String) 
            Test TestSuite.testAt(int) 
            Test TestSuite.testCaseForClass(Class) 
            Test TestSuite.warning(String) 
            boolean TestSuite.isPublicTestMethod(Method)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runners.RuleContainer$1
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class java.util.Comparator
         }
objc_protocols: {}
methods: {
            int RuleContainer$1.compare(Object,Object) 
            RuleContainer$1.<init>() 
            int RuleContainer$1.compareInt(int,int) 
            int RuleContainer$1.compare(RuleContainer$RuleEntry,RuleContainer$RuleEntry)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 41, column 86]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$OneFastOneSlow
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$OneFastOneSlow.<init>() 
            void CategoryTest$OneFastOneSlow.b() 
            void CategoryTest$OneFastOneSlow.a()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 225, column 24]}]}
dummy: false
class org.junit.rules.ClassRulesTest$OrderTestRule
fields: {
           java.lang.String* name <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement ClassRulesTest$OrderTestRule.apply(Statement,Description) 
            ClassRulesTest$OrderTestRule.<init>(String) 
            String ClassRulesTest$OrderTestRule.access$000(ClassRulesTest$OrderTestRule)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 114, column 25]}]}
dummy: false
class org.junit.tests.running.methods.ExpectedTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedTest.expectsAssumptionViolatedException() 
            void ExpectedTest.noneThrown() 
            ExpectedTest.<init>() 
            void ExpectedTest.unexpected() 
            void ExpectedTest.expected() 
            void ExpectedTest.expectsSuperclass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class java.util.Enumeration
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runner.manipulation.Ordering$Context
fields: {
           org.junit.runner.Description* description <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            Ordering$Context.<init>(Description,Ordering$1) 
            Ordering$Context.<init>(Description) 
            Description Ordering$Context.getTarget()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.runner.manipulation.Ordering$1
fields: {
           java.util.Random* val$random <_final>
         }
statics: {
            java.lang.String* CONSTRUCTOR_ERROR_FORMAT <_final>
          }
supers: {
           class org.junit.runner.manipulation.Ordering
         }
objc_protocols: {}
methods: {
            boolean Ordering$1.validateOrderingIsCorrect() 
            List Ordering$1.orderItems(Collection) 
            Ordering$1.<init>(Random)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 32, column 30]}]}
dummy: false
class org.junit.tests.running.methods.TimeoutTest$TimeoutFailureTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TimeoutTest$TimeoutFailureTest.<init>() 
            void TimeoutTest$TimeoutFailureTest.success()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 75, column 24]}]}
dummy: false
class org.junit.tests.running.methods.AnnotationTest$NoExceptionTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void AnnotationTest$NoExceptionTest.expectedException() 
            AnnotationTest$NoExceptionTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 255, column 24]}]}
dummy: false
class java.lang.NumberFormatException
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true

class org.junit.tests.experimental.AssumptionTest$AssumptionFailureInConstructor
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AssumptionTest$AssumptionFailureInConstructor.<init>() 
            void AssumptionTest$AssumptionFailureInConstructor.shouldFail()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 210, column 24]}]}
dummy: false

class org.junit.tests.experimental.AssumptionTest$TestClassWithAssumptionFailure
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AssumptionTest$TestClassWithAssumptionFailure.<init>() 
            void AssumptionTest$TestClassWithAssumptionFailure.assumeWithExpectedException()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 226, column 24]}]}
dummy: false

class org.junit.experimental.theories.internal.AllMembersSupplier$MethodParameterValue
fields: {
           org.junit.runners.model.FrameworkMethod* method <_final>
         }
statics: {}
supers: {
           class org.junit.experimental.theories.PotentialAssignment
         }
objc_protocols: {}
methods: {
            String AllMembersSupplier$MethodParameterValue.getDescription() 
            AllMembersSupplier$MethodParameterValue.<init>(FrameworkMethod) 
            Object AllMembersSupplier$MethodParameterValue.getValue() 
            AllMembersSupplier$MethodParameterValue.<init>(FrameworkMethod,AllMembersSupplier$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 24, column 17]}]}
dummy: false
class java.lang.Number
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.rules.TestRuleTest$CallMethodOnlyOnceRule$Dummy
fields: {}
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement TestRuleTest$CallMethodOnlyOnceRule$Dummy.apply(Statement,Description) 
            TestRuleTest$CallMethodOnlyOnceRule$Dummy.<init>() 
            TestRuleTest$CallMethodOnlyOnceRule$Dummy.<init>(TestRuleTest$1)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 516, column 29]}]}
dummy: false
class org.junit.internal.runners.rules.RuleMemberValidator$RuleValidator
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {
            void RuleMemberValidator$RuleValidator.validate(FrameworkMember,Class,List)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= Interface; loc= [Some line 153, column 14]}]}
dummy: false

class org.junit.experimental.theories.PotentialAssignment$CouldNotGenerateValueException
fields: {}
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.Exception
         }
objc_protocols: {}
methods: {
            PotentialAssignment$CouldNotGenerateValueException.<init>(Throwable) 
            PotentialAssignment$CouldNotGenerateValueException.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class java.lang.Throwable
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.internal.ArrayComparisonFailure
fields: {
           java.util.List* fIndices <_final> 
           java.lang.AssertionError* fCause <_final> 
           java.lang.String* fMessage <_final>
         }
statics: {
            long serialVersionUID <_final>
          }
supers: {
           class java.lang.AssertionError
         }
objc_protocols: {}
methods: {
            void ArrayComparisonFailure.addDimension(int) 
            String ArrayComparisonFailure.getMessage() 
            String ArrayComparisonFailure.toString() 
            Throwable ArrayComparisonFailure.getCause() 
            ArrayComparisonFailure.<init>(String,AssertionError,int)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 13, column 13]}]}
dummy: false
class org.junit.tests.experimental.max.MaxStarterTest$TwoOldTests
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void MaxStarterTest$TwoOldTests.testTwo() 
            MaxStarterTest$TwoOldTests.<init>() 
            void MaxStarterTest$TwoOldTests.testOne()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 181, column 24]}]}
dummy: false
class junit.framework.JUnit4TestAdapterCache$1
fields: {
           junit.framework.JUnit4TestAdapterCache* this$0 <_final> 
           junit.framework.TestResult* val$result <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            void JUnit4TestAdapterCache$1.testFailure(Failure) 
            JUnit4TestAdapterCache$1.<init>(JUnit4TestAdapterCache,TestResult) 
            void JUnit4TestAdapterCache$1.testStarted(Description) 
            void JUnit4TestAdapterCache$1.testFinished(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 46, column 47]}]}
dummy: false
class org.junit.rules.RuleMemberValidatorTest$TestWithProtectedClassRule
fields: {}
statics: {
            org.junit.rules.TestRule* temporaryFolder <_org.junit.ClassRule>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void RuleMemberValidatorTest$TestWithProtectedClassRule.<clinit>() 
            RuleMemberValidatorTest$TestWithProtectedClassRule.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 24]}]}
dummy: false
class org.junit.tests.experimental.max.MaxStarterTest
fields: {
           org.junit.experimental.max.MaxCore* fMax <> 
           java.io.File* fMaxFile <>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void MaxStarterTest.preferNewTestsOverTestsThatFailed() 
            void MaxStarterTest.filterSingleMethodFromOldTestClass() 
            void MaxStarterTest.preferFast() 
            void MaxStarterTest.halfMalformed() 
            void MaxStarterTest.assertFilterLeavesTestUnscathed(Class) 
            void MaxStarterTest.createMax() 
            void MaxStarterTest.sortTestsInMultipleClasses() 
            void MaxStarterTest.maxShouldSkipMalformedJUnit38Classes() 
            MaxStarterTest.<init>() 
            void MaxStarterTest.testsAreOnlyIncludedOnceWhenExpandingForSorting() 
            void MaxStarterTest.twoTestsNotRunComeBackInRandomOrder() 
            void MaxStarterTest.preferRecentlyFailed() 
            void MaxStarterTest.testCountsStandUpToFiltration() 
            void MaxStarterTest.listenersAreCalledCorrectlyInTheFaceOfFailures() 
            void MaxStarterTest.correctErrorFromHalfMalformedTest() 
            void MaxStarterTest.forgetMax() 
            void MaxStarterTest.rememberOldRuns() 
            void MaxStarterTest.correctErrorFromMalformedTest() 
            void MaxStarterTest.junit3TestsAreRunOnce() 
            void MaxStarterTest.preferNewTests()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 31, column 13]}]}
dummy: false
class org.junit.runner.manipulation.Filter$3
fields: {
           org.junit.runner.manipulation.Filter* val$first <_final> 
           org.junit.runner.manipulation.Filter* val$second <_final> 
           org.junit.runner.manipulation.Filter* this$0 <_final>
         }
statics: {
            org.junit.runner.manipulation.Filter* ALL <_final>
          }
supers: {
           class org.junit.runner.manipulation.Filter
         }
objc_protocols: {}
methods: {
            boolean Filter$3.shouldRun(Description) 
            Filter$3.<init>(Filter,Filter,Filter) 
            String Filter$3.describe()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 109, column 28]}]}
dummy: false
class org.junit.rules.MethodRulesTest$BeforesAndAfters
fields: {
           org.junit.rules.MethodRule* watchman <_org.junit.Rule>
         }
statics: {
            java.lang.String* watchedLog <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            String MethodRulesTest$BeforesAndAfters.access$602(String) 
            String MethodRulesTest$BeforesAndAfters.access$684(Object) 
            MethodRulesTest$BeforesAndAfters.<init>() 
            void MethodRulesTest$BeforesAndAfters.after() 
            String MethodRulesTest$BeforesAndAfters.access$600() 
            void MethodRulesTest$BeforesAndAfters.before() 
            void MethodRulesTest$BeforesAndAfters.succeeds()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 194, column 24]}]}
dummy: false
class org.junit.rules.TestRuleTest$OrderTestRule
fields: {
           java.lang.String* name <>
         }
statics: {}
supers: {
           class java.lang.Object 
           class org.junit.rules.TestRule
         }
objc_protocols: {}
methods: {
            Statement TestRuleTest$OrderTestRule.apply(Statement,Description) 
            TestRuleTest$OrderTestRule.<init>(String) 
            String TestRuleTest$OrderTestRule.access$600(TestRuleTest$OrderTestRule)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 473, column 25]}]}
dummy: false
class org.junit.runners.parameterized.BlockJUnit4ClassRunnerWithParameters
fields: {
           java.lang.String* name <_final> 
           java.lang.Object*[_*_](*) parameters <_final> 
           java.util.concurrent.ConcurrentMap* methodDescriptions <_final> 
           org.junit.runners.model.TestClass* testClass <_final> 
           java.util.List* filteredChildren <_volatile> 
           java.util.concurrent.locks.Lock* childrenLock <_final> 
           org.junit.runners.model.RunnerScheduler* scheduler <_volatile>
         }
statics: {
            org.junit.validator.TestClassValidator* PUBLIC_CLASS_VALIDATOR <> 
            java.lang.ThreadLocal* CURRENT_RULE_CONTAINER <_final> 
            java.util.List* VALIDATORS <_final>
          }
supers: {
           class org.junit.runners.BlockJUnit4ClassRunner
         }
objc_protocols: {}
methods: {
            boolean BlockJUnit4ClassRunnerWithParameters.fieldsAreAnnotated() 
            Object BlockJUnit4ClassRunnerWithParameters.createTestUsingConstructorInjection() 
            Annotation[] BlockJUnit4ClassRunnerWithParameters.getRunnerAnnotations() 
            String BlockJUnit4ClassRunnerWithParameters.testName(FrameworkMethod) 
            BlockJUnit4ClassRunnerWithParameters.<init>(TestWithParameters) 
            List BlockJUnit4ClassRunnerWithParameters.getAnnotatedFieldsByParameter() 
            String BlockJUnit4ClassRunnerWithParameters.getName() 
            Statement BlockJUnit4ClassRunnerWithParameters.withAfterParams(Statement) 
            Statement BlockJUnit4ClassRunnerWithParameters.classBlock(RunNotifier) 
            void BlockJUnit4ClassRunnerWithParameters.validateFields(List) 
            Object BlockJUnit4ClassRunnerWithParameters.createTestUsingFieldInjection() 
            Statement BlockJUnit4ClassRunnerWithParameters.withBeforeParams(Statement) 
            Object[] BlockJUnit4ClassRunnerWithParameters.access$000(BlockJUnit4ClassRunnerWithParameters) 
            Object BlockJUnit4ClassRunnerWithParameters.createTest() 
            void BlockJUnit4ClassRunnerWithParameters.validateConstructor(List) 
            BlockJUnit4ClassRunnerWithParameters$InjectionType BlockJUnit4ClassRunnerWithParameters.getInjectionType()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 23, column 13]}]}
dummy: false

class org.junit.internal.builders.AnnotatedBuilderTest$OuterClass$InnerClassWithoutOwnRunWith
fields: {
           org.junit.internal.builders.AnnotatedBuilderTest$OuterClass* this$0 <_final>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            AnnotatedBuilderTest$OuterClass$InnerClassWithoutOwnRunWith.<init>(AnnotatedBuilderTest$OuterClass) 
            void AnnotatedBuilderTest$OuterClass$InnerClassWithoutOwnRunWith.test()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 70, column 21]}]}
dummy: false
class java.io.StringWriter
fields: {}
statics: {}
supers: {}
objc_protocols: {}
methods: {}
exported_obj_methods: {}
annots: {<>}
java_class_info: {[None]}
dummy: true
class org.junit.runners.model.TestClassTest$FieldAnnotated
fields: {
           _Bool fieldA <_org.junit.Rule> 
           java.lang.String* fieldC <_org.junit.Rule> 
           _Bool fieldB <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestClassTest$FieldAnnotated.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 89, column 24]}]}
dummy: false
class org.junit.internal.MethodSorterTest$Sub
fields: {}
statics: {}
supers: {
           class org.junit.internal.MethodSorterTest$Super
         }
objc_protocols: {}
methods: {
            MethodSorterTest$Sub.<init>() 
            void MethodSorterTest$Sub.subBowser()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 52, column 17]}]}
dummy: false
class org.junit.rules.StopwatchTest$AbstractStopwatchTest$3
fields: {
           org.junit.rules.StopwatchTest$AbstractStopwatchTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.rules.TestWatcher
         }
objc_protocols: {}
methods: {
            void StopwatchTest$AbstractStopwatchTest$3.finished(Description) 
            StopwatchTest$AbstractStopwatchTest$3.<init>(StopwatchTest$AbstractStopwatchTest)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 90, column 62]}]}
dummy: false
class org.junit.internal.requests.SortingRequest
fields: {
           java.util.Comparator* comparator <_final> 
           org.junit.runner.Request* request <_final>
         }
statics: {}
supers: {
           class org.junit.runner.Request
         }
objc_protocols: {}
methods: {
            SortingRequest.<init>(Request,Comparator) 
            Runner SortingRequest.getRunner()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void CategoryTest.runMethodWithTwoCategories() 
            void CategoryTest.testCountWithExplicitExcludeFilter() 
            void CategoryTest.oneRunnableOthersAvoided() 
            void CategoryTest.testCount() 
            void CategoryTest.classesCanBeCategories() 
            void CategoryTest.categoryFilterRejectsIncompatibleCategory() 
            void CategoryTest.sameAsNoIncludeCategoryAnnotation() 
            void CategoryTest.allIncludedSuiteCategoriesMustBeMatched() 
            void CategoryTest.categoryFilterLeavesOnlyMatchingMethods() 
            void CategoryTest.testCountWithMultipleIncludeFilter() 
            CategoryTest.<init>() 
            void CategoryTest.testsThatAreBothIncludedAndExcludedAreExcluded() 
            void CategoryTest.emptyCategoriesSuite() 
            void CategoryTest.describeACategoryFilter() 
            void CategoryTest.subclassesOfIncludedCategoriesAreRun() 
            void CategoryTest.testCountWithExplicitExcludeFilter_usingConstructor() 
            void CategoryTest.testCountWithMultipleExcludeFilter() 
            void CategoryTest.testCountOnAWithoutSlowTests() 
            void CategoryTest.testInheritance() 
            void CategoryTest.ifNoTestsToRunUseErrorRunner() 
            void CategoryTest.testCountOnJustA() 
            void CategoryTest.anyMethodWithExcludedCategoryWillBeExcluded() 
            void CategoryTest.categoryFilterLeavesOnlyMatchingMethods_usingConstructor() 
            void CategoryTest.noIncludeCategoryAnnotation() 
            void CategoryTest.testCountWithExplicitIncludeFilter() 
            void CategoryTest.ignoredTest() 
            void CategoryTest.describeMultipleCategoryFilter()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 35, column 13]}]}
dummy: false
class org.junit.rules.TestWatcherTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            TestWatcherTest.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.runners.Enclosed")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 29, column 13]}]}
dummy: false
class org.junit.tests.running.methods.ExpectedTest$Expected
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ExpectedTest$Expected.<init>() 
            void ExpectedTest$Expected.expected()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 15, column 24]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$AllWithBeforeAndAfterClass
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$AllWithBeforeAndAfterClass.<init>() 
            void SuiteTest$AllWithBeforeAndAfterClass.after() 
            void SuiteTest$AllWithBeforeAndAfterClass.before()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.SuiteTest$TestA, org.junit.tests.running.classes.SuiteTest$TestB")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 121, column 24]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$SingleArgumentTestWithCollection
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ParameterizedTestTest$SingleArgumentTestWithCollection.aTest() 
            Iterable ParameterizedTestTest$SingleArgumentTestWithCollection.data() 
            ParameterizedTestTest$SingleArgumentTestWithCollection.<init>(Object)
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Parameterized")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 680, column 24]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest$1
fields: {
           org.junit.tests.junit3compatibility.JUnit38ClassRunnerTest* this$0 <_final>
         }
statics: {}
supers: {
           class org.junit.runner.notification.RunListener
         }
objc_protocols: {}
methods: {
            JUnit38ClassRunnerTest$1.<init>(JUnit38ClassRunnerTest) 
            void JUnit38ClassRunnerTest$1.testStarted(Description)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 64, column 49]}]}
dummy: false

class org.junit.rules.RuleMemberValidatorTest$MethodTestWithArbitraryObjectWithRuleAnnotation
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$MethodTestWithArbitraryObjectWithRuleAnnotation.<init>() 
            Object RuleMemberValidatorTest$MethodTestWithArbitraryObjectWithRuleAnnotation.getArbitraryObject()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 335, column 24]}]}
dummy: false

class org.junit.rules.RuleMemberValidatorTest$MethodTestWithNonStaticClassRule
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            RuleMemberValidatorTest$MethodTestWithNonStaticClassRule.<init>() 
            TestRule RuleMemberValidatorTest$MethodTestWithNonStaticClassRule.getTemporaryFolder()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 247, column 24]}]}
dummy: false
class org.junit.rules.ExpectedExceptionTest$ExpectsSubstringNullMessage
fields: {
           org.junit.rules.ExpectedException* thrown <_org.junit.Rule>
         }
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void ExpectedExceptionTest$ExpectsSubstringNullMessage.throwsMore() 
            ExpectedExceptionTest$ExpectsSubstringNullMessage.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 201, column 24]}]}
dummy: false
class org.junit.rules.TimeoutRuleTest
fields: {}
statics: {
            _Bool run4done <_volatile> 
            java.util.concurrent.locks.ReentrantLock* run1Lock <_final>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            void TimeoutRuleTest.<clinit>() 
            ReentrantLock TimeoutRuleTest.access$000() 
            void TimeoutRuleTest.nullTimeUnit() 
            void TimeoutRuleTest.timeUnitTimeout() 
            boolean TimeoutRuleTest.access$100() 
            TimeoutRuleTest.<init>() 
            void TimeoutRuleTest.after() 
            void TimeoutRuleTest.before() 
            void TimeoutRuleTest.longTimeout()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 25, column 13]}]}
dummy: false
class org.junit.tests.junit3compatibility.JUnit4TestAdapterTest$TestSuiteFor4
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            JUnit4TestAdapterTest$TestSuiteFor4.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.junit3compatibility.JUnit4TestAdapterTest$Test4")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 43, column 24]}]}
dummy: false
class org.junit.tests.running.classes.SuiteTest$Hydra
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            SuiteTest$Hydra.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.runners.Suite") _org.junit.runners.Suite$SuiteClasses(value="org.junit.tests.running.classes.SuiteTest$Hercules")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 182, column 24]}]}
dummy: false
class org.junit.rules.VerifierRuleTest
fields: {}
statics: {
            java.lang.String* sequence <>
          }
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            VerifierRuleTest.<init>() 
            void VerifierRuleTest.verifierRunsAfterTest() 
            String VerifierRuleTest.access$084(Object)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 11, column 13]}]}
dummy: false
class org.junit.internal.Throwables$1
fields: {
           java.util.List* val$list <_final>
         }
statics: {}
supers: {
           class java.util.AbstractList
         }
objc_protocols: {}
methods: {
            Throwables$1.<init>(List) 
            Object Throwables$1.get(int) 
            int Throwables$1.size()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 171, column 37]}]}
dummy: false

class org.junit.tests.running.classes.ParameterizedTestTest$UseParameterizedFactoryTest
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.classes.ParameterizedTestTest$UseParameterizedFactoryAbstractTest
         }
objc_protocols: {}
methods: {
            ParameterizedTestTest$UseParameterizedFactoryTest.<init>(String) 
            void ParameterizedTestTest$UseParameterizedFactoryTest.parameterizedTest()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 749, column 24]}]}
dummy: false
class org.junit.tests.running.classes.RunWithTest$SubExampleTest
fields: {}
statics: {}
supers: {
           class org.junit.tests.running.classes.RunWithTest$ExampleTest
         }
objc_protocols: {}
methods: {
            RunWithTest$SubExampleTest.<init>()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 54, column 24]}]}
dummy: false
class junit.tests.framework.FloatAssertTest
fields: {
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.framework.TestCase
         }
objc_protocols: {}
methods: {
            void FloatAssertTest.testAssertNegInfinityEqualsInfinity() 
            void FloatAssertTest.testAssertNaNEqualsNaN() 
            void FloatAssertTest.testAssertEqualsNaNFails() 
            FloatAssertTest.<init>() 
            void FloatAssertTest.testAssertPosInfinityNotEquals() 
            void FloatAssertTest.testAllInfinities() 
            void FloatAssertTest.testAssertPosInfinityNotEqualsNegInfinity() 
            void FloatAssertTest.testAssertNaNEqualsFails() 
            void FloatAssertTest.testAssertPosInfinityEqualsInfinity()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 6, column 13]}]}
dummy: false
class org.junit.rules.TestRuleTest$MethodExampleTest$1$1
fields: {
           org.junit.rules.TestRuleTest$MethodExampleTest$1* this$1 <_final> 
           org.junit.runners.model.Statement* val$base <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            void TestRuleTest$MethodExampleTest$1$1.evaluate() 
            TestRuleTest$MethodExampleTest$1$1.<init>(TestRuleTest$MethodExampleTest$1,Statement)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 249, column 39]}]}
dummy: false
class org.junit.internal.runners.statements.Fail
fields: {
           java.lang.Throwable* error <_final>
         }
statics: {}
supers: {
           class org.junit.runners.model.Statement
         }
objc_protocols: {}
methods: {
            Fail.<init>(Throwable) 
            void Fail.evaluate()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}
dummy: false
class org.junit.experimental.categories.CategoryTest$SlowTestSuite
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            CategoryTest$SlowTestSuite.<init>()
          }
exported_obj_methods: {}
annots: {<_org.junit.runner.RunWith(value="org.junit.experimental.categories.Categories") _org.junit.experimental.categories.Categories$IncludeCategory(value="org.junit.experimental.categories.CategoryTest$SlowTests") _org.junit.runners.Suite$SuiteClasses(value="org.junit.experimental.categories.CategoryTest$A, org.junit.experimental.categories.CategoryTest$B, org.junit.experimental.categories.CategoryTest$C")>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 96, column 24]}]}
dummy: false
class junit.tests.framework.TestCaseTest$7
fields: {
           junit.tests.framework.TestCaseTest* this$0 <_final> 
           _Bool fTornDown <> 
           java.lang.String* fName <>
         }
statics: {}
supers: {
           class junit.tests.framework.TestCaseTest$TornDown
         }
objc_protocols: {}
methods: {
            TestCaseTest$7.<init>(TestCaseTest) 
            void TestCaseTest$7.setUp()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 117, column 40]}]}
dummy: false

class org.junit.tests.running.classes.ParentRunnerTest$AssumptionViolatedAtParentLevelTest
fields: {}
statics: {}
supers: {
           class java.lang.Object
         }
objc_protocols: {}
methods: {
            ParentRunnerTest$AssumptionViolatedAtParentLevelTest.<init>() 
            void ParentRunnerTest$AssumptionViolatedAtParentLevelTest.test() 
            void ParentRunnerTest$AssumptionViolatedAtParentLevelTest.beforeClass()
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [Some line 185, column 24]}]}
dummy: false
class org.junit.experimental.theories.internal.EnumSupplier
fields: {
           java.lang.Class* enumType <>
         }
statics: {}
supers: {
           class org.junit.experimental.theories.ParameterSupplier
         }
objc_protocols: {}
methods: {
            List EnumSupplier.getValueSources(ParameterSignature) 
            EnumSupplier.<init>(Class)
          }
exported_obj_methods: {}
annots: {<>}
java_class_info: {[Some {kind= NormalClass; loc= [None]}]}