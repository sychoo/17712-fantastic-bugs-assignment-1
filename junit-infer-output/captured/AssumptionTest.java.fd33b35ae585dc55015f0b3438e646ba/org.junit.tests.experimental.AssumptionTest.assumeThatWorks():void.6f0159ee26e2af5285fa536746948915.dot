/* @generated */
digraph cfg {
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_1" [label="1: Start void AssumptionTest.assumeThatWorks()\nFormals:  this:org.junit.tests.experimental.AssumptionTest*\nLocals:  $bcvar1:void CatchVar22:void $irvar2:void $irvar1:void $irvar0:void\nAnnotation: <_org.junit.Test> void AssumptionTest.assumeThatWorks()() \n  " color=yellow style=filled]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_1" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_4" ;
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_2" [label="2: Exit void AssumptionTest.assumeThatWorks() \n  " color=yellow style=filled]
	

"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_3" [label="3:  exceptions sink \n   NULLIFY(&CatchVar22); [line 88]\n  EXIT_SCOPE(n$10,CatchVar22); [line 88]\n  APPLY_ABSTRACTION; [line 88]\n " shape="box"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_3" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_2" ;
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_4" [label="4:  Call Integer Integer.valueOf(int) \n   n$0=_fun_Integer Integer.valueOf(int)(1:int) [line 83]\n  *&$irvar0:java.lang.Integer*=n$0 [line 83]\n  EXIT_SCOPE(n$0); [line 83]\n " shape="box"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_4" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_5" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_4" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_13" [color="red" ];
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_5" [label="5:  Call Integer Integer.valueOf(int) \n   n$1=_fun_Integer Integer.valueOf(int)(2:int) [line 83]\n  *&$irvar1:java.lang.Integer*=n$1 [line 83]\n  EXIT_SCOPE(n$1); [line 83]\n " shape="box"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_5" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_6" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_5" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_13" [color="red" ];
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_6" [label="6:  Call Matcher CoreMatchers.is(Object) \n   n$2=*&$irvar1:java.lang.Integer* [line 83]\n  n$3=_fun_Matcher CoreMatchers.is(Object)(n$2:java.lang.Integer*) [line 83]\n  *&$irvar2:org.hamcrest.Matcher*=n$3 [line 83]\n  NULLIFY(&$irvar1); [line 83]\n  EXIT_SCOPE(n$2,n$3,$irvar1); [line 83]\n " shape="box"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_6" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_7" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_6" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_13" [color="red" ];
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_7" [label="7:  Call void Assume.assumeThat(Object,Matcher) \n   n$4=*&$irvar0:java.lang.Integer* [line 83]\n  n$5=*&$irvar2:org.hamcrest.Matcher* [line 83]\n  n$6=_fun_void Assume.assumeThat(Object,Matcher)(n$4:java.lang.Integer*,n$5:org.hamcrest.Matcher*) [line 83]\n  NULLIFY(&$irvar0); [line 83]\n  NULLIFY(&$irvar2); [line 83]\n  EXIT_SCOPE(n$4,n$5,n$6,$irvar0,$irvar2); [line 83]\n " shape="box"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_7" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_8" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_7" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_13" [color="red" ];
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_8" [label="8:  Call void Assert.fail(String) \n   n$7=_fun_void Assert.fail(String)(\"should throw AssumptionViolatedException\":java.lang.Object*) [line 84]\n  EXIT_SCOPE(n$7); [line 84]\n  APPLY_ABSTRACTION; [line 84]\n " shape="box"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_8" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_10" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_8" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_13" [color="red" ];
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_9" [label="9:  method_body \n   n$8=*&CatchVar22:java.lang.Object* [line 85]\n  *&$bcvar1:java.lang.Object*=n$8 [line 85]\n  NULLIFY(&CatchVar22); [line 85]\n  NULLIFY(&$bcvar1); [line 85]\n  EXIT_SCOPE(n$8,CatchVar22,$bcvar1); [line 85]\n  APPLY_ABSTRACTION; [line 85]\n " shape="box"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_9" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_10" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_9" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_3" [color="red" ];
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_10" [label="10:  method_body \n   APPLY_ABSTRACTION; [line 88]\n " shape="box"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_10" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_2" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_10" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_3" [color="red" ];
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_11" [label="11: Prune (true branch, switch) \n   n$11=_fun___instanceof(n$10:org.junit.AssumptionViolatedException*,sizeof(t=org.junit.AssumptionViolatedException):void) [line 85]\n  PRUNE(n$11, true); [line 85]\n  *&CatchVar22:void=n$10 [line 85]\n  EXIT_SCOPE(n$10,n$11); [line 85]\n " shape="invhouse"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_11" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_9" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_11" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_3" [color="red" ];
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_12" [label="12: Prune (false branch, switch) \n   n$11=_fun___instanceof(n$10:org.junit.AssumptionViolatedException*,sizeof(t=org.junit.AssumptionViolatedException):void) [line 85]\n  PRUNE(!n$11, false); [line 85]\n  *&return:void=EXN n$10 [line 85]\n  EXIT_SCOPE(n$10,n$11); [line 85]\n " shape="invhouse"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_12" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_3" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_12" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_3" [color="red" ];
"org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_13" [label="13:  exception handler \n   n$9=*&return:void [line 85]\n  *&return:void=null [line 85]\n  n$10=_fun___unwrap_exception(n$9:void) [line 85]\n  NULLIFY(&$irvar0); [line 85]\n  NULLIFY(&$irvar1); [line 85]\n  NULLIFY(&$irvar2); [line 85]\n  EXIT_SCOPE(n$9,$irvar0,$irvar1,$irvar2); [line 85]\n " shape="box"]
	

	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_13" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_11" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_13" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_12" ;
	 "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_13" -> "org.junit.tests.experimental.AssumptionTest.assumeThatWorks():void.6f0159ee26e2af5285fa536746948915_3" [color="red" ];
}
