/* @generated */
digraph cfg {
"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_1" [label="1: Start void AssertionTest.assertNotEqualsWorksWithPrimitiveTypes()\nFormals:  this:org.junit.tests.assertion.AssertionTest*\nLocals: \nAnnotation: <_org.junit.Test> void AssertionTest.assertNotEqualsWorksWithPrimitiveTypes()() \n  " color=yellow style=filled]
	

	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_1" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_4" ;
"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_2" [label="2: Exit void AssertionTest.assertNotEqualsWorksWithPrimitiveTypes() \n  " color=yellow style=filled]
	

"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_3" [label="3:  exceptions sink \n   APPLY_ABSTRACTION; [line 828]\n " shape="box"]
	

	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_3" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_2" ;
"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_4" [label="4:  Call void Assert.assertNotEquals(long,long) \n   n$0=_fun_void Assert.assertNotEquals(long,long)(1:long,2:long) [line 822]\n  EXIT_SCOPE(n$0); [line 822]\n " shape="box"]
	

	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_4" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_5" ;
	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_4" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_3" [color="red" ];
"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_5" [label="5:  Call void Assert.assertNotEquals(String,long,long) \n   n$1=_fun_void Assert.assertNotEquals(String,long,long)(\"The values should be different\":java.lang.Object*,1:long,2:long) [line 823]\n  EXIT_SCOPE(n$1); [line 823]\n " shape="box"]
	

	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_5" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_6" ;
	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_5" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_3" [color="red" ];
"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_6" [label="6:  Call void Assert.assertNotEquals(double,double,double) \n   n$2=_fun_void Assert.assertNotEquals(double,double,double)(1.:double,2.:double,0.:double) [line 824]\n  EXIT_SCOPE(n$2); [line 824]\n " shape="box"]
	

	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_6" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_7" ;
	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_6" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_3" [color="red" ];
"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_7" [label="7:  Call void Assert.assertNotEquals(String,double,double,double) \n   n$3=_fun_void Assert.assertNotEquals(String,double,double,double)(\"The values should be different\":java.lang.Object*,1.:double,2.:double,0.:double) [line 825]\n  EXIT_SCOPE(n$3); [line 825]\n " shape="box"]
	

	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_7" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_8" ;
	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_7" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_3" [color="red" ];
"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_8" [label="8:  Call void Assert.assertNotEquals(float,float,float) \n   n$4=_fun_void Assert.assertNotEquals(float,float,float)(1.:float,2.:float,0.:float) [line 826]\n  EXIT_SCOPE(n$4); [line 826]\n " shape="box"]
	

	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_8" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_9" ;
	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_8" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_3" [color="red" ];
"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_9" [label="9:  Call void Assert.assertNotEquals(String,float,float,float) \n   n$5=_fun_void Assert.assertNotEquals(String,float,float,float)(\"The values should be different\":java.lang.Object*,1.:float,2.:float,0.:float) [line 827]\n  EXIT_SCOPE(n$5); [line 827]\n " shape="box"]
	

	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_9" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_10" ;
	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_9" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_3" [color="red" ];
"org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_10" [label="10:  method_body \n   APPLY_ABSTRACTION; [line 828]\n " shape="box"]
	

	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_10" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_2" ;
	 "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_10" -> "org.junit.tests.assertion.AssertionTest.assertNotEqualsWorksWithPrimitiveTypes():void.28fc7cc4d9a78477c6199a0763f36750_3" [color="red" ];
}
