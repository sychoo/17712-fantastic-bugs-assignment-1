/* @generated */
digraph cfg {
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_1" [label="1: Start void AssertTest.testAssertNotSame()\nFormals:  this:junit.tests.framework.AssertTest*\nLocals:  CatchVar60:void $irvar3:void $irvar2:void $irvar1:void $irvar0:void e:junit.framework.AssertionFailedError* obj:java.lang.Integer* \n  " color=yellow style=filled]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_1" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_4" ;
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_2" [label="2: Exit void AssertTest.testAssertNotSame() \n  " color=yellow style=filled]
	

"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [label="3:  exceptions sink \n   NULLIFY(&$irvar3); [line 161]\n  NULLIFY(&CatchVar60); [line 161]\n  NULLIFY(&$irvar0); [line 161]\n  NULLIFY(&$irvar1); [line 161]\n  NULLIFY(&$irvar2); [line 161]\n  EXIT_SCOPE(n$23,$irvar3,CatchVar60,$irvar0,$irvar1,$irvar2); [line 161]\n  APPLY_ABSTRACTION; [line 161]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_2" ;
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_4" [label="4:  Call Integer.<init>(int) \n   n$0=_fun___new(sizeof(t=java.lang.Integer):java.lang.Integer*) [line 151]\n  n$1=_fun_Integer.<init>(int)(n$0:java.lang.Integer*,1:int) [line 151]\n  *&$irvar0:java.lang.Integer*=n$0 [line 151]\n  EXIT_SCOPE(n$0,n$1); [line 151]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_4" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_5" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_4" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_5" [label="5:  Call void TestCase.assertNotSame(Object,Object) \n   n$2=*&$irvar0:java.lang.Integer* [line 151]\n  n$3=_fun_void TestCase.assertNotSame(Object,Object)(n$2:java.lang.Integer*,null:java.lang.Object*) [line 151]\n  NULLIFY(&$irvar0); [line 151]\n  EXIT_SCOPE(n$2,n$3,$irvar0); [line 151]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_5" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_6" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_5" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_6" [label="6:  Call Integer.<init>(int) \n   n$4=_fun___new(sizeof(t=java.lang.Integer):java.lang.Integer*) [line 152]\n  n$5=_fun_Integer.<init>(int)(n$4:java.lang.Integer*,1:int) [line 152]\n  *&$irvar1:java.lang.Integer*=n$4 [line 152]\n  EXIT_SCOPE(n$4,n$5); [line 152]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_6" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_7" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_6" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_7" [label="7:  Call void TestCase.assertNotSame(Object,Object) \n   n$6=*&$irvar1:java.lang.Integer* [line 152]\n  n$7=_fun_void TestCase.assertNotSame(Object,Object)(null:java.lang.Object*,n$6:java.lang.Integer*) [line 152]\n  NULLIFY(&$irvar1); [line 152]\n  EXIT_SCOPE(n$6,n$7,$irvar1); [line 152]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_7" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_8" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_7" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_8" [label="8:  Call Integer.<init>(int) \n   n$8=_fun___new(sizeof(t=java.lang.Integer):java.lang.Integer*) [line 153]\n  n$9=_fun_Integer.<init>(int)(n$8:java.lang.Integer*,1:int) [line 153]\n  *&$irvar2:java.lang.Integer*=n$8 [line 153]\n  EXIT_SCOPE(n$8,n$9); [line 153]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_8" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_9" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_8" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_9" [label="9:  Call Integer.<init>(int) \n   n$10=_fun___new(sizeof(t=java.lang.Integer):java.lang.Integer*) [line 153]\n  n$11=_fun_Integer.<init>(int)(n$10:java.lang.Integer*,1:int) [line 153]\n  *&$irvar3:java.lang.Integer*=n$10 [line 153]\n  EXIT_SCOPE(n$10,n$11); [line 153]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_9" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_10" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_9" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_10" [label="10:  Call void TestCase.assertNotSame(Object,Object) \n   n$12=*&$irvar2:java.lang.Integer* [line 153]\n  n$13=*&$irvar3:java.lang.Integer* [line 153]\n  n$14=_fun_void TestCase.assertNotSame(Object,Object)(n$12:java.lang.Integer*,n$13:java.lang.Integer*) [line 153]\n  NULLIFY(&$irvar3); [line 153]\n  NULLIFY(&$irvar2); [line 153]\n  EXIT_SCOPE(n$12,n$13,n$14,$irvar3,$irvar2); [line 153]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_10" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_11" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_10" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_11" [label="11:  Call Integer.<init>(int) \n   n$15=_fun___new(sizeof(t=java.lang.Integer):java.lang.Integer*) [line 155]\n  n$16=_fun_Integer.<init>(int)(n$15:java.lang.Integer*,1:int) [line 155]\n  *&obj:java.lang.Integer*=n$15 [line 155]\n  EXIT_SCOPE(n$15,n$16); [line 155]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_11" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_12" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_11" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_19" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_12" [label="12:  Call void TestCase.assertNotSame(Object,Object) \n   n$17=*&obj:java.lang.Integer* [line 156]\n  n$18=*&obj:java.lang.Integer* [line 156]\n  n$19=_fun_void TestCase.assertNotSame(Object,Object)(n$17:java.lang.Integer*,n$18:java.lang.Integer*) [line 156]\n  NULLIFY(&obj); [line 156]\n  EXIT_SCOPE(n$17,n$18,n$19,obj); [line 156]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_12" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_15" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_12" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_19" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_13" [label="13:  method_body \n   n$20=*&CatchVar60:java.lang.Object* [line 157]\n  *&e:java.lang.Object*=n$20 [line 157]\n  NULLIFY(&CatchVar60); [line 157]\n  NULLIFY(&e); [line 157]\n  EXIT_SCOPE(n$20,CatchVar60,e); [line 157]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_13" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_14" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_13" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_14" [label="14:  method_body \n   APPLY_ABSTRACTION; [line 158]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_14" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_2" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_14" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_15" [label="15:  Call void TestCase.fail() \n   n$21=_fun_void TestCase.fail()() [line 160]\n  EXIT_SCOPE(n$21); [line 160]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_15" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_16" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_15" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_16" [label="16:  method_body \n   APPLY_ABSTRACTION; [line 161]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_16" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_2" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_16" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_17" [label="17: Prune (true branch, switch) \n   n$24=_fun___instanceof(n$23:junit.framework.AssertionFailedError*,sizeof(t=junit.framework.AssertionFailedError):void) [line 157]\n  PRUNE(n$24, true); [line 157]\n  *&CatchVar60:void=n$23 [line 157]\n  EXIT_SCOPE(n$23,n$24); [line 157]\n " shape="invhouse"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_17" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_13" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_17" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_18" [label="18: Prune (false branch, switch) \n   n$24=_fun___instanceof(n$23:junit.framework.AssertionFailedError*,sizeof(t=junit.framework.AssertionFailedError):void) [line 157]\n  PRUNE(!n$24, false); [line 157]\n  *&return:void=EXN n$23 [line 157]\n  EXIT_SCOPE(n$23,n$24); [line 157]\n " shape="invhouse"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_18" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_18" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
"junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_19" [label="19:  exception handler \n   n$22=*&return:void [line 157]\n  *&return:void=null [line 157]\n  n$23=_fun___unwrap_exception(n$22:void) [line 157]\n  NULLIFY(&obj); [line 157]\n  EXIT_SCOPE(n$22,obj); [line 157]\n " shape="box"]
	

	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_19" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_17" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_19" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_18" ;
	 "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_19" -> "junit.tests.framework.AssertTest.testAssertNotSame():void.f4b2a978bf659a761e8cab9913622787_3" [color="red" ];
}
