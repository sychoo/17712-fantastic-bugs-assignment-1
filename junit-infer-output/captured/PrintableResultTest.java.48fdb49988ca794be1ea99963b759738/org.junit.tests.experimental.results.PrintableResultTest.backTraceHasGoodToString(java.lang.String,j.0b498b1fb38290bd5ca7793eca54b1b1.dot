/* @generated */
digraph cfg {
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_1" [label="1: Start void PrintableResultTest.backTraceHasGoodToString(String,String)\nFormals:  this:org.junit.tests.experimental.results.PrintableResultTest* descriptionName:java.lang.String* stackTraceClassName:java.lang.String*\nLocals:  $irvar9:void $irvar8:void $irvar7:void $irvar6:void $irvar5:void $irvar4:void $irvar3:void $irvar2:void $irvar1:void $irvar0:void failure:org.junit.runner.notification.Failure*\nAnnotation: <_org.junit.experimental.theories.Theory(nullsAccepted="false")> void PrintableResultTest.backTraceHasGoodToString(String,String)() \n  " color=yellow style=filled]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_1" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_4" ;
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_2" [label="2: Exit void PrintableResultTest.backTraceHasGoodToString(String,String) \n  " color=yellow style=filled]
	

"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [label="3:  exceptions sink \n   NULLIFY(&$irvar3); [line 36]\n  NULLIFY(&$irvar9); [line 36]\n  NULLIFY(&failure); [line 36]\n  NULLIFY(&$irvar5); [line 36]\n  NULLIFY(&$irvar4); [line 36]\n  NULLIFY(&$irvar7); [line 36]\n  NULLIFY(&$irvar6); [line 36]\n  NULLIFY(&$irvar0); [line 36]\n  NULLIFY(&$irvar8); [line 36]\n  NULLIFY(&$irvar1); [line 36]\n  NULLIFY(&$irvar2); [line 36]\n  EXIT_SCOPE($irvar3,$irvar9,failure,$irvar5,$irvar4,$irvar7,$irvar6,$irvar0,$irvar8,$irvar1,$irvar2); [line 36]\n  APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_2" ;
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_4" [label="4:  method_body \n   n$0=_fun___new_array(sizeof(t=java.lang.annotation.Annotation*[_*_];len=[0]):java.lang.annotation.Annotation*[_*_](*)) [line 23]\n  *&$irvar0:java.lang.annotation.Annotation*[_*_](*)=n$0 [line 23]\n  EXIT_SCOPE(n$0); [line 23]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_4" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_5" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_4" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_5" [label="5:  Call Description Description.createSuiteDescription(String,Annotation[]) \n   n$1=*&descriptionName:java.lang.String* [line 24]\n  n$2=*&$irvar0:java.lang.annotation.Annotation*[_*_](*) [line 24]\n  n$3=_fun_Description Description.createSuiteDescription(String,Annotation[])(n$1:java.lang.String*,n$2:java.lang.annotation.Annotation*[_*_](*)) [line 24]\n  *&$irvar1:org.junit.runner.Description*=n$3 [line 24]\n  NULLIFY(&$irvar0); [line 24]\n  EXIT_SCOPE(n$1,n$2,n$3,$irvar0); [line 24]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_5" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_6" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_5" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_6" [label="6:  Call PrintableResultTest$1.<init>(PrintableResultTest,String) \n   n$4=_fun___new(sizeof(t=org.junit.tests.experimental.results.PrintableResultTest$1):org.junit.tests.experimental.results.PrintableResultTest$1*) [line 24]\n  n$5=*&this:org.junit.tests.experimental.results.PrintableResultTest* [line 24]\n  n$6=*&stackTraceClassName:java.lang.String* [line 24]\n  n$7=_fun_PrintableResultTest$1.<init>(PrintableResultTest,String)(n$4:org.junit.tests.experimental.results.PrintableResultTest$1*,n$5:org.junit.tests.experimental.results.PrintableResultTest*,n$6:java.lang.String*) [line 24]\n  *&$irvar2:org.junit.tests.experimental.results.PrintableResultTest$1*=n$4 [line 24]\n  NULLIFY(&this); [line 24]\n  EXIT_SCOPE(n$4,n$5,n$6,n$7,this); [line 24]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_6" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_7" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_6" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_7" [label="7:  Call Failure.<init>(Description,Throwable) \n   n$8=_fun___new(sizeof(t=org.junit.runner.notification.Failure):org.junit.runner.notification.Failure*) [line 24]\n  n$9=*&$irvar1:org.junit.runner.Description* [line 24]\n  n$10=*&$irvar2:org.junit.tests.experimental.results.PrintableResultTest$1* [line 24]\n  n$11=_fun_Failure.<init>(Description,Throwable)(n$8:org.junit.runner.notification.Failure*,n$9:org.junit.runner.Description*,n$10:org.junit.tests.experimental.results.PrintableResultTest$1*) [line 24]\n  *&failure:org.junit.runner.notification.Failure*=n$8 [line 24]\n  NULLIFY(&$irvar1); [line 24]\n  NULLIFY(&$irvar2); [line 24]\n  EXIT_SCOPE(n$8,n$9,n$10,n$11,$irvar1,$irvar2); [line 24]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_7" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_8" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_7" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_8" [label="8:  method_body \n   n$12=_fun___new_array(sizeof(t=org.junit.runner.notification.Failure*[_*_];len=[1]):org.junit.runner.notification.Failure*[_*_](*)) [line 34]\n  *&$irvar3:org.junit.runner.notification.Failure*[_*_](*)=n$12 [line 34]\n  EXIT_SCOPE(n$12); [line 34]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_8" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_9" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_8" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_9" [label="9:  method_body \n   n$13=*&$irvar3:org.junit.runner.notification.Failure*[_*_](*) [line 34]\n  n$14=*&failure:org.junit.runner.notification.Failure* [line 34]\n  *n$13[0]:org.junit.runner.notification.Failure*=n$14 [line 34]\n  NULLIFY(&failure); [line 34]\n  EXIT_SCOPE(n$13,n$14,failure); [line 34]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_9" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_10" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_9" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_10" [label="10:  Call List Arrays.asList(Object[]) \n   n$15=*&$irvar3:org.junit.runner.notification.Failure*[_*_](*) [line 34]\n  n$16=_fun_List Arrays.asList(Object[])(n$15:org.junit.runner.notification.Failure*[_*_](*)) [line 34]\n  *&$irvar4:java.util.List*=n$16 [line 34]\n  NULLIFY(&$irvar3); [line 34]\n  EXIT_SCOPE(n$15,n$16,$irvar3); [line 34]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_10" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_11" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_10" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_11" [label="11:  Call PrintableResult.<init>(List) \n   n$17=_fun___new(sizeof(t=org.junit.experimental.results.PrintableResult):org.junit.experimental.results.PrintableResult*) [line 34]\n  n$18=*&$irvar4:java.util.List* [line 34]\n  n$19=_fun_PrintableResult.<init>(List)(n$17:org.junit.experimental.results.PrintableResult*,n$18:java.util.List*) [line 34]\n  *&$irvar5:org.junit.experimental.results.PrintableResult*=n$17 [line 34]\n  NULLIFY(&$irvar4); [line 34]\n  EXIT_SCOPE(n$17,n$18,n$19,$irvar4); [line 34]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_11" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_12" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_11" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_12" [label="12:  Call String PrintableResult.toString() \n   n$20=*&$irvar5:org.junit.experimental.results.PrintableResult* [line 34]\n  _=*n$20:org.junit.experimental.results.PrintableResult*(root org.junit.experimental.results.PrintableResult) [line 34]\n  n$22=_fun_String PrintableResult.toString()(n$20:org.junit.experimental.results.PrintableResult*) [line 34]\n  *&$irvar6:java.lang.String*=n$22 [line 34]\n  NULLIFY(&$irvar5); [line 34]\n  EXIT_SCOPE(_,n$20,n$22,$irvar5); [line 34]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_12" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_13" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_12" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_13" [label="13:  Call Matcher CoreMatchers.containsString(String) \n   n$23=*&descriptionName:java.lang.String* [line 35]\n  n$24=_fun_Matcher CoreMatchers.containsString(String)(n$23:java.lang.String*) [line 35]\n  *&$irvar7:org.hamcrest.Matcher*=n$24 [line 35]\n  NULLIFY(&descriptionName); [line 35]\n  EXIT_SCOPE(n$23,n$24,descriptionName); [line 35]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_13" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_14" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_13" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_14" [label="14:  Call Matcher CoreMatchers.containsString(String) \n   n$25=*&stackTraceClassName:java.lang.String* [line 35]\n  n$26=_fun_Matcher CoreMatchers.containsString(String)(n$25:java.lang.String*) [line 35]\n  *&$irvar8:org.hamcrest.Matcher*=n$26 [line 35]\n  NULLIFY(&stackTraceClassName); [line 35]\n  EXIT_SCOPE(n$25,n$26,stackTraceClassName); [line 35]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_14" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_15" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_14" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_15" [label="15:  Call Matcher CoreMatchers.allOf(Matcher,Matcher) \n   n$27=*&$irvar7:org.hamcrest.Matcher* [line 34]\n  n$28=*&$irvar8:org.hamcrest.Matcher* [line 34]\n  n$29=_fun_Matcher CoreMatchers.allOf(Matcher,Matcher)(n$27:org.hamcrest.Matcher*,n$28:org.hamcrest.Matcher*) [line 34]\n  *&$irvar9:org.hamcrest.Matcher*=n$29 [line 34]\n  NULLIFY(&$irvar7); [line 34]\n  NULLIFY(&$irvar8); [line 34]\n  EXIT_SCOPE(n$27,n$28,n$29,$irvar7,$irvar8); [line 34]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_15" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_16" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_15" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_16" [label="16:  Call void MatcherAssert.assertThat(Object,Matcher) \n   n$30=*&$irvar6:java.lang.String* [line 34]\n  n$31=*&$irvar9:org.hamcrest.Matcher* [line 34]\n  n$32=_fun_void MatcherAssert.assertThat(Object,Matcher)(n$30:java.lang.String*,n$31:org.hamcrest.Matcher*) [line 34]\n  NULLIFY(&$irvar9); [line 34]\n  NULLIFY(&$irvar6); [line 34]\n  EXIT_SCOPE(n$30,n$31,n$32,$irvar9,$irvar6); [line 34]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_16" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_17" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_16" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
"org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_17" [label="17:  method_body \n   APPLY_ABSTRACTION; [line 36]\n " shape="box"]
	

	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_17" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_2" ;
	 "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_17" -> "org.junit.tests.experimental.results.PrintableResultTest.backTraceHasGoodToString(java.lang.String,j.0b498b1fb38290bd5ca7793eca54b1b1_3" [color="red" ];
}
